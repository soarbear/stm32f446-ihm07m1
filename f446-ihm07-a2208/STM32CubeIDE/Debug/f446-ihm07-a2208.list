
f446-ihm07-a2208.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a8c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08006c54  08006c54  00016c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f28  08006f28  0002070c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f28  08006f28  00016f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f30  08006f30  0002070c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f30  08006f30  00016f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f34  08006f34  00016f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000070c  20000000  08006f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  2000070c  08007644  0002070c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a60  08007644  00020a60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002070c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002073c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0003794a  00000000  00000000  0002077f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000089  00000000  00000000  000580c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00043e57  00000000  00000000  00058152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000076e3  00000000  00000000  0009bfa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001948  00000000  00000000  000a3690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef385  00000000  00000000  000a4fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002136  00000000  00000000  0019435d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 000129eb  00000000  00000000  00196493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002bea3  00000000  00000000  001a8e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004664  00000000  00000000  001d4d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000070c 	.word	0x2000070c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006c3c 	.word	0x08006c3c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000710 	.word	0x20000710
 8000204:	08006c3c 	.word	0x08006c3c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000504:	f8df d034 	ldr.w	sp, [pc, #52]	; 800053c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000508:	480d      	ldr	r0, [pc, #52]	; (8000540 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800050a:	490e      	ldr	r1, [pc, #56]	; (8000544 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800050c:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000510:	e002      	b.n	8000518 <LoopCopyDataInit>

08000512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000516:	3304      	adds	r3, #4

08000518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800051c:	d3f9      	bcc.n	8000512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051e:	4a0b      	ldr	r2, [pc, #44]	; (800054c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000520:	4c0b      	ldr	r4, [pc, #44]	; (8000550 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000524:	e001      	b.n	800052a <LoopFillZerobss>

08000526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000528:	3204      	adds	r2, #4

0800052a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800052c:	d3fb      	bcc.n	8000526 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800052e:	f002 fed1 	bl	80032d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000532:	f006 fb5f 	bl	8006bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000536:	f000 f893 	bl	8000660 <main>
  bx  lr    
 800053a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800053c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000544:	2000070c 	.word	0x2000070c
  ldr r2, =_sidata
 8000548:	08006f38 	.word	0x08006f38
  ldr r2, =_sbss
 800054c:	2000070c 	.word	0x2000070c
  ldr r4, =_ebss
 8000550:	20000a60 	.word	0x20000a60

08000554 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <BusFault_Handler>
	...

08000558 <DAC_Init>:
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 8000558:	4a02      	ldr	r2, [pc, #8]	; (8000564 <DAC_Init+0xc>)
 800055a:	6813      	ldr	r3, [r2, #0]
 800055c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000560:	6013      	str	r3, [r2, #0]
  */
__weak void DAC_Init(UI_Handle_t *pHandle)
{
  /* Enable DAC Channel2 */
  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_2);
}
 8000562:	4770      	bx	lr
 8000564:	40007400 	.word	0x40007400

08000568 <DAC_Exec>:
  *         variables will be provided in the related output channels. This is
  *         the implementation of the virtual function.
  * @param  pHandle pointer on related component instance.
  */
__weak void DAC_Exec(UI_Handle_t *pHandle)
{
 8000568:	b508      	push	{r3, lr}
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  MC_Protocol_REG_t bCh_var;

  bCh_var = pDacHandle->bChannel_variable[DAC_CH1];
  LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_2,
                                  DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var,MC_NULL)));
 800056a:	2200      	movs	r2, #0
 800056c:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
 8000570:	f002 fb9e 	bl	8002cb0 <UI_GetReg>
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8000574:	4909      	ldr	r1, [pc, #36]	; (800059c <DAC_Exec+0x34>)
  SET_BIT(DACx->SWTRIGR,
 8000576:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <DAC_Exec+0x38>)
  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8000578:	f8d1 3418 	ldr.w	r3, [r1, #1048]	; 0x418
 800057c:	b200      	sxth	r0, r0
 800057e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000586:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 800058a:	4318      	orrs	r0, r3
 800058c:	f8c1 0418 	str.w	r0, [r1, #1048]	; 0x418
  SET_BIT(DACx->SWTRIGR,
 8000590:	6853      	ldr	r3, [r2, #4]
 8000592:	f043 0302 	orr.w	r3, r3, #2
 8000596:	6053      	str	r3, [r2, #4]
  LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_2);
}
 8000598:	bd08      	pop	{r3, pc}
 800059a:	bf00      	nop
 800059c:	40007000 	.word	0x40007000
 80005a0:	40007400 	.word	0x40007400
 80005a4:	00000000 	.word	0x00000000

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	2300      	movs	r3, #0
{
 80005ac:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80005b2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80005ba:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4926      	ldr	r1, [pc, #152]	; (8000658 <SystemClock_Config+0xb0>)
 80005c0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c2:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c6:	4a25      	ldr	r2, [pc, #148]	; (800065c <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80005cc:	6408      	str	r0, [r1, #64]	; 0x40
 80005ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80005d0:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80005d4:	9101      	str	r1, [sp, #4]
 80005d6:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	9302      	str	r3, [sp, #8]
 80005da:	6813      	ldr	r3, [r2, #0]
 80005dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e0:	6013      	str	r3, [r2, #0]
 80005e2:	6813      	ldr	r3, [r2, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ea:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8000650 <SystemClock_Config+0xa8>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f4:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005fa:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2002      	movs	r0, #2
 80005fe:	2102      	movs	r1, #2
 8000600:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000604:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000606:	23b4      	movs	r3, #180	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060a:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 4;
 800060e:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000610:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f003 fc1f 	bl	8003e54 <HAL_RCC_OscConfig>
 8000616:	b108      	cbz	r0, 800061c <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061a:	e7fe      	b.n	800061a <SystemClock_Config+0x72>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800061c:	f003 fac4 	bl	8003ba8 <HAL_PWREx_EnableOverDrive>
 8000620:	4603      	mov	r3, r0
 8000622:	b108      	cbz	r0, 8000628 <SystemClock_Config+0x80>
 8000624:	b672      	cpsid	i
  while (1)
 8000626:	e7fe      	b.n	8000626 <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062e:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000632:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000636:	a803      	add	r0, sp, #12
 8000638:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063a:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063e:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000640:	f003 faee 	bl	8003c20 <HAL_RCC_ClockConfig>
 8000644:	b108      	cbz	r0, 800064a <SystemClock_Config+0xa2>
 8000646:	b672      	cpsid	i
  while (1)
 8000648:	e7fe      	b.n	8000648 <SystemClock_Config+0xa0>
}
 800064a:	b017      	add	sp, #92	; 0x5c
 800064c:	bd30      	pop	{r4, r5, pc}
 800064e:	bf00      	nop
 8000650:	00000001 	.word	0x00000001
 8000654:	00010000 	.word	0x00010000
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <main>:
{
 8000660:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	2600      	movs	r6, #0
{
 8000666:	b09d      	sub	sp, #116	; 0x74
  HAL_Init();
 8000668:	f002 fe62 	bl	8003330 <HAL_Init>
  SystemClock_Config();
 800066c:	f7ff ff9c 	bl	80005a8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	e9cd 6614 	strd	r6, r6, [sp, #80]	; 0x50
 8000674:	e9cd 6616 	strd	r6, r6, [sp, #88]	; 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000678:	4bac      	ldr	r3, [pc, #688]	; (800092c <main+0x2cc>)
 800067a:	9603      	str	r6, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	9618      	str	r6, [sp, #96]	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	6b19      	ldr	r1, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000680:	48ab      	ldr	r0, [pc, #684]	; (8000930 <main+0x2d0>)
  hadc1.Instance = ADC1;
 8000682:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 8000958 <main+0x2f8>
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000686:	4fab      	ldr	r7, [pc, #684]	; (8000934 <main+0x2d4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000688:	f041 0104 	orr.w	r1, r1, #4
 800068c:	6319      	str	r1, [r3, #48]	; 0x30
 800068e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000690:	f001 0104 	and.w	r1, r1, #4
 8000694:	9103      	str	r1, [sp, #12]
 8000696:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000698:	9604      	str	r6, [sp, #16]
 800069a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800069c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80006a0:	6319      	str	r1, [r3, #48]	; 0x30
 80006a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80006a4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80006a8:	9104      	str	r1, [sp, #16]
 80006aa:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	9605      	str	r6, [sp, #20]
 80006ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80006b0:	f041 0101 	orr.w	r1, r1, #1
 80006b4:	6319      	str	r1, [r3, #48]	; 0x30
 80006b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b8:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 80006bc:	4632      	mov	r2, r6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 80006c0:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 80006c6:	f003 fa6b 	bl	8003ba0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ca:	4b9b      	ldr	r3, [pc, #620]	; (8000938 <main+0x2d8>)
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80006cc:	4898      	ldr	r0, [pc, #608]	; (8000930 <main+0x2d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80006d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80006d4:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006d6:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2401      	movs	r4, #1
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f003 f94c 	bl	8003978 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006e0:	2502      	movs	r5, #2
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80006e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e6:	4892      	ldr	r0, [pc, #584]	; (8000930 <main+0x2d0>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80006e8:	9314      	str	r3, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ea:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006ec:	e9cd 4515 	strd	r4, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f0:	9517      	str	r5, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f2:	f003 f941 	bl	8003978 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80006f6:	2220      	movs	r2, #32
 80006f8:	4631      	mov	r1, r6
 80006fa:	a814      	add	r0, sp, #80	; 0x50
 80006fc:	f006 fa72 	bl	8006be4 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000700:	f44f 3880 	mov.w	r8, #65536	; 0x10000
  ADC_ChannelConfTypeDef sConfig = {0};
 8000704:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
 8000708:	e9cd 660f 	strd	r6, r6, [sp, #60]	; 0x3c
  hadc1.Instance = ADC1;
 800070c:	4a8b      	ldr	r2, [pc, #556]	; (800093c <main+0x2dc>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800070e:	f8cb 6008 	str.w	r6, [fp, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000712:	f88b 6018 	strb.w	r6, [fp, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000716:	f88b 6020 	strb.w	r6, [fp, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071a:	f8cb 602c 	str.w	r6, [fp, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800071e:	f88b 6030 	strb.w	r6, [fp, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000722:	4658      	mov	r0, fp
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000724:	f44f 6600 	mov.w	r6, #2048	; 0x800
  hadc1.Init.ScanConvMode = ENABLE;
 8000728:	f8cb 4010 	str.w	r4, [fp, #16]
  hadc1.Init.NbrOfConversion = 2;
 800072c:	f8cb 501c 	str.w	r5, [fp, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000730:	f8cb 4014 	str.w	r4, [fp, #20]
  hadc1.Instance = ADC1;
 8000734:	f8cb 2000 	str.w	r2, [fp]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000738:	f8cb 7028 	str.w	r7, [fp, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800073c:	f8cb 8004 	str.w	r8, [fp, #4]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000740:	f8cb 600c 	str.w	r6, [fp, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000744:	f002 fe20 	bl	8003388 <HAL_ADC_Init>
 8000748:	b108      	cbz	r0, 800074e <main+0xee>
 800074a:	b672      	cpsid	i
  while (1)
 800074c:	e7fe      	b.n	800074c <main+0xec>
  sConfigInjected.InjectedRank = 1;
 800074e:	e9cd 0414 	strd	r0, r4, [sp, #80]	; 0x50
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000752:	901a      	str	r0, [sp, #104]	; 0x68
  sConfigInjected.InjectedOffset = 0;
 8000754:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000756:	f04f 0903 	mov.w	r9, #3
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 800075a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800075e:	a914      	add	r1, sp, #80	; 0x50
 8000760:	4658      	mov	r0, fp
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000762:	9416      	str	r4, [sp, #88]	; 0x58
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 8000764:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000768:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 800076c:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000770:	f002 ff72 	bl	8003658 <HAL_ADCEx_InjectedConfigChannel>
 8000774:	b108      	cbz	r0, 800077a <main+0x11a>
 8000776:	b672      	cpsid	i
  while (1)
 8000778:	e7fe      	b.n	8000778 <main+0x118>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 800077a:	230b      	movs	r3, #11
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800077c:	a914      	add	r1, sp, #80	; 0x50
 800077e:	4658      	mov	r0, fp
  sConfigInjected.InjectedRank = 2;
 8000780:	9515      	str	r5, [sp, #84]	; 0x54
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8000782:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000784:	f002 ff68 	bl	8003658 <HAL_ADCEx_InjectedConfigChannel>
 8000788:	b108      	cbz	r0, 800078e <main+0x12e>
 800078a:	b672      	cpsid	i
  while (1)
 800078c:	e7fe      	b.n	800078c <main+0x12c>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 800078e:	230a      	movs	r3, #10
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000790:	a914      	add	r1, sp, #80	; 0x50
 8000792:	4658      	mov	r0, fp
  sConfigInjected.InjectedRank = 3;
 8000794:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000798:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800079a:	f002 ff5d 	bl	8003658 <HAL_ADCEx_InjectedConfigChannel>
 800079e:	b108      	cbz	r0, 80007a4 <main+0x144>
 80007a0:	b672      	cpsid	i
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <main+0x142>
  sConfig.Offset = 0;
 80007a4:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a6:	a90d      	add	r1, sp, #52	; 0x34
 80007a8:	4658      	mov	r0, fp
  sConfig.Rank = 1;
 80007aa:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80007ae:	950f      	str	r5, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	f002 fe96 	bl	80034e0 <HAL_ADC_ConfigChannel>
 80007b4:	b108      	cbz	r0, 80007ba <main+0x15a>
 80007b6:	b672      	cpsid	i
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <main+0x158>
  sConfig.Channel = ADC_CHANNEL_12;
 80007ba:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007bc:	a90d      	add	r1, sp, #52	; 0x34
 80007be:	4658      	mov	r0, fp
  sConfig.Rank = 2;
 80007c0:	950e      	str	r5, [sp, #56]	; 0x38
  sConfig.Channel = ADC_CHANNEL_12;
 80007c2:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c4:	f002 fe8c 	bl	80034e0 <HAL_ADC_ConfigChannel>
 80007c8:	4601      	mov	r1, r0
 80007ca:	b108      	cbz	r0, 80007d0 <main+0x170>
 80007cc:	b672      	cpsid	i
  while (1)
 80007ce:	e7fe      	b.n	80007ce <main+0x16e>
  hadc2.Instance = ADC2;
 80007d0:	f8df b170 	ldr.w	fp, [pc, #368]	; 8000944 <main+0x2e4>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80007d4:	9001      	str	r0, [sp, #4]
 80007d6:	2220      	movs	r2, #32
 80007d8:	a814      	add	r0, sp, #80	; 0x50
 80007da:	f006 fa03 	bl	8006be4 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80007de:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 80007e0:	4a57      	ldr	r2, [pc, #348]	; (8000940 <main+0x2e0>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007e2:	f8cb 8004 	str.w	r8, [fp, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007e6:	4658      	mov	r0, fp
  ADC_ChannelConfTypeDef sConfig = {0};
 80007e8:	e9cd 110d 	strd	r1, r1, [sp, #52]	; 0x34
 80007ec:	e9cd 110f 	strd	r1, r1, [sp, #60]	; 0x3c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f0:	f8cb 7028 	str.w	r7, [fp, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80007f4:	f8cb 600c 	str.w	r6, [fp, #12]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007f8:	f8cb 1008 	str.w	r1, [fp, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80007fc:	f8cb 4010 	str.w	r4, [fp, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000800:	f88b 1018 	strb.w	r1, [fp, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000804:	f88b 1020 	strb.w	r1, [fp, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000808:	f8cb 102c 	str.w	r1, [fp, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800080c:	f88b 1030 	strb.w	r1, [fp, #48]	; 0x30
  hadc2.Init.NbrOfConversion = 1;
 8000810:	f8cb 401c 	str.w	r4, [fp, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000814:	f8cb 4014 	str.w	r4, [fp, #20]
  hadc2.Instance = ADC2;
 8000818:	f8cb 2000 	str.w	r2, [fp]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800081c:	f002 fdb4 	bl	8003388 <HAL_ADC_Init>
 8000820:	b108      	cbz	r0, 8000826 <main+0x1c6>
 8000822:	b672      	cpsid	i
  while (1)
 8000824:	e7fe      	b.n	8000824 <main+0x1c4>
  sConfigInjected.InjectedRank = 1;
 8000826:	e9cd 0414 	strd	r0, r4, [sp, #80]	; 0x50
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800082a:	901a      	str	r0, [sp, #104]	; 0x68
  sConfigInjected.InjectedOffset = 0;
 800082c:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800082e:	a914      	add	r1, sp, #80	; 0x50
 8000830:	4658      	mov	r0, fp
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000832:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000836:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 800083a:	9416      	str	r4, [sp, #88]	; 0x58
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 800083c:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000840:	f002 ff0a 	bl	8003658 <HAL_ADCEx_InjectedConfigChannel>
 8000844:	b108      	cbz	r0, 800084a <main+0x1ea>
 8000846:	b672      	cpsid	i
  while (1)
 8000848:	e7fe      	b.n	8000848 <main+0x1e8>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 800084a:	230b      	movs	r3, #11
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800084c:	a914      	add	r1, sp, #80	; 0x50
 800084e:	4658      	mov	r0, fp
  sConfigInjected.InjectedRank = 2;
 8000850:	e9cd 3514 	strd	r3, r5, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000854:	f002 ff00 	bl	8003658 <HAL_ADCEx_InjectedConfigChannel>
 8000858:	b108      	cbz	r0, 800085e <main+0x1fe>
 800085a:	b672      	cpsid	i
  while (1)
 800085c:	e7fe      	b.n	800085c <main+0x1fc>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 800085e:	230a      	movs	r3, #10
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000860:	4658      	mov	r0, fp
 8000862:	a914      	add	r1, sp, #80	; 0x50
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000864:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigInjected.InjectedRank = 3;
 8000866:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800086a:	f002 fef5 	bl	8003658 <HAL_ADCEx_InjectedConfigChannel>
 800086e:	b108      	cbz	r0, 8000874 <main+0x214>
 8000870:	b672      	cpsid	i
  while (1)
 8000872:	e7fe      	b.n	8000872 <main+0x212>
  sConfig.Rank = 1;
 8000874:	2601      	movs	r6, #1
  sConfig.Channel = ADC_CHANNEL_0;
 8000876:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000878:	4832      	ldr	r0, [pc, #200]	; (8000944 <main+0x2e4>)
  sConfig.Channel = ADC_CHANNEL_0;
 800087a:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800087c:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800087e:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000882:	f002 fe2d 	bl	80034e0 <HAL_ADC_ConfigChannel>
 8000886:	b108      	cbz	r0, 800088c <main+0x22c>
 8000888:	b672      	cpsid	i
  while (1)
 800088a:	e7fe      	b.n	800088a <main+0x22a>
  hdac.Instance = DAC;
 800088c:	4c2e      	ldr	r4, [pc, #184]	; (8000948 <main+0x2e8>)
 800088e:	4b2f      	ldr	r3, [pc, #188]	; (800094c <main+0x2ec>)
 8000890:	6023      	str	r3, [r4, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 8000892:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000896:	4620      	mov	r0, r4
 8000898:	f003 f832 	bl	8003900 <HAL_DAC_Init>
 800089c:	b108      	cbz	r0, 80008a2 <main+0x242>
 800089e:	b672      	cpsid	i
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <main+0x240>
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80008a2:	233c      	movs	r3, #60	; 0x3c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008a4:	4620      	mov	r0, r4
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80008a6:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008a8:	2210      	movs	r2, #16
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80008aa:	2302      	movs	r3, #2
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008ac:	a914      	add	r1, sp, #80	; 0x50
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80008ae:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008b0:	f003 f83c 	bl	800392c <HAL_DAC_ConfigChannel>
 80008b4:	4604      	mov	r4, r0
 80008b6:	b108      	cbz	r0, 80008bc <main+0x25c>
 80008b8:	b672      	cpsid	i
  while (1)
 80008ba:	e7fe      	b.n	80008ba <main+0x25a>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008bc:	2720      	movs	r7, #32
  htim1.Instance = TIM1;
 80008be:	4d24      	ldr	r5, [pc, #144]	; (8000950 <main+0x2f0>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008c0:	9008      	str	r0, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c2:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
 80008c6:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
 80008ca:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008ce:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 80008d2:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d6:	9006      	str	r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d8:	9013      	str	r0, [sp, #76]	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008da:	9007      	str	r0, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008dc:	4601      	mov	r1, r0
 80008de:	463a      	mov	r2, r7
 80008e0:	a814      	add	r0, sp, #80	; 0x50
 80008e2:	f006 f97f 	bl	8006be4 <memset>
  htim1.Instance = TIM1;
 80008e6:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <main+0x2f4>)
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80008e8:	616e      	str	r6, [r5, #20]
  htim1.Instance = TIM1;
 80008ea:	602b      	str	r3, [r5, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80008ec:	f241 56f9 	movw	r6, #5625	; 0x15f9
 80008f0:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008f4:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80008f6:	e9c5 6303 	strd	r6, r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80008fa:	60af      	str	r7, [r5, #8]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80008fc:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fe:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000900:	f003 fcae 	bl	8004260 <HAL_TIM_Base_Init>
 8000904:	b108      	cbz	r0, 800090a <main+0x2aa>
 8000906:	b672      	cpsid	i
  while (1)
 8000908:	e7fe      	b.n	8000908 <main+0x2a8>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800090a:	4628      	mov	r0, r5
 800090c:	f003 fd38 	bl	8004380 <HAL_TIM_PWM_Init>
 8000910:	b108      	cbz	r0, 8000916 <main+0x2b6>
 8000912:	b672      	cpsid	i
  while (1)
 8000914:	e7fe      	b.n	8000914 <main+0x2b4>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000916:	2006      	movs	r0, #6
 8000918:	2310      	movs	r3, #16
 800091a:	e9cd 0308 	strd	r0, r3, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800091e:	a908      	add	r1, sp, #32
 8000920:	4628      	mov	r0, r5
 8000922:	f003 fecb 	bl	80046bc <HAL_TIM_SlaveConfigSynchro>
 8000926:	b1c8      	cbz	r0, 800095c <main+0x2fc>
 8000928:	b672      	cpsid	i
  while (1)
 800092a:	e7fe      	b.n	800092a <main+0x2ca>
 800092c:	40023800 	.word	0x40023800
 8000930:	40020800 	.word	0x40020800
 8000934:	0f000001 	.word	0x0f000001
 8000938:	10210000 	.word	0x10210000
 800093c:	40012000 	.word	0x40012000
 8000940:	40012100 	.word	0x40012100
 8000944:	20000770 	.word	0x20000770
 8000948:	200007b8 	.word	0x200007b8
 800094c:	40007400 	.word	0x40007400
 8000950:	200007cc 	.word	0x200007cc
 8000954:	40010000 	.word	0x40010000
 8000958:	20000728 	.word	0x20000728
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095c:	e9cd 0006 	strd	r0, r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000960:	a906      	add	r1, sp, #24
 8000962:	4628      	mov	r0, r5
 8000964:	f003 ff24 	bl	80047b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000968:	b108      	cbz	r0, 800096e <main+0x30e>
 800096a:	b672      	cpsid	i
  while (1)
 800096c:	e7fe      	b.n	800096c <main+0x30c>
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 800096e:	2260      	movs	r2, #96	; 0x60
 8000970:	f640 23fc 	movw	r3, #2812	; 0xafc
 8000974:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000978:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800097c:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000980:	4602      	mov	r2, r0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000982:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000984:	a90d      	add	r1, sp, #52	; 0x34
 8000986:	4628      	mov	r0, r5
 8000988:	f003 fd88 	bl	800449c <HAL_TIM_PWM_ConfigChannel>
 800098c:	b108      	cbz	r0, 8000992 <main+0x332>
 800098e:	b672      	cpsid	i
  while (1)
 8000990:	e7fe      	b.n	8000990 <main+0x330>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000992:	2204      	movs	r2, #4
 8000994:	a90d      	add	r1, sp, #52	; 0x34
 8000996:	4628      	mov	r0, r5
 8000998:	f003 fd80 	bl	800449c <HAL_TIM_PWM_ConfigChannel>
 800099c:	b108      	cbz	r0, 80009a2 <main+0x342>
 800099e:	b672      	cpsid	i
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <main+0x340>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009a2:	2208      	movs	r2, #8
 80009a4:	a90d      	add	r1, sp, #52	; 0x34
 80009a6:	4628      	mov	r0, r5
 80009a8:	f003 fd78 	bl	800449c <HAL_TIM_PWM_ConfigChannel>
 80009ac:	b108      	cbz	r0, 80009b2 <main+0x352>
 80009ae:	b672      	cpsid	i
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <main+0x350>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80009b2:	f241 53f8 	movw	r3, #5624	; 0x15f8
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80009b6:	2270      	movs	r2, #112	; 0x70
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80009b8:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009bc:	4830      	ldr	r0, [pc, #192]	; (8000a80 <main+0x420>)
 80009be:	a90d      	add	r1, sp, #52	; 0x34
 80009c0:	220c      	movs	r2, #12
 80009c2:	f003 fd6b 	bl	800449c <HAL_TIM_PWM_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	b108      	cbz	r0, 80009ce <main+0x36e>
 80009ca:	b672      	cpsid	i
  while (1)
 80009cc:	e7fe      	b.n	80009cc <main+0x36c>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80009ce:	f44f 6400 	mov.w	r4, #2048	; 0x800
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80009d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009d6:	e9cd 4214 	strd	r4, r2, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009da:	4829      	ldr	r0, [pc, #164]	; (8000a80 <main+0x420>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009dc:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 80009de:	f44f 7480 	mov.w	r4, #256	; 0x100
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80009e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009e6:	a914      	add	r1, sp, #80	; 0x50
  sBreakDeadTimeConfig.DeadTime = 0;
 80009e8:	e9cd 4316 	strd	r4, r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 80009ec:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009f0:	f003 ff1e 	bl	8004830 <HAL_TIMEx_ConfigBreakDeadTime>
 80009f4:	4604      	mov	r4, r0
 80009f6:	b108      	cbz	r0, 80009fc <main+0x39c>
 80009f8:	b672      	cpsid	i
  while (1)
 80009fa:	e7fe      	b.n	80009fa <main+0x39a>
  HAL_TIM_MspPostInit(&htim1);
 80009fc:	4820      	ldr	r0, [pc, #128]	; (8000a80 <main+0x420>)
 80009fe:	f001 fd13 	bl	8002428 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <main+0x424>)
 8000a04:	4820      	ldr	r0, [pc, #128]	; (8000a88 <main+0x428>)
  huart2.Init.BaudRate = 115200;
 8000a06:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000a0a:	e9c3 0100 	strd	r0, r1, [r3]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a0e:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a10:	4618      	mov	r0, r3
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a12:	e9c3 4402 	strd	r4, r4, [r3, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a16:	e9c3 4204 	strd	r4, r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1a:	e9c3 4406 	strd	r4, r4, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1e:	f003 ff31 	bl	8004884 <HAL_UART_Init>
 8000a22:	4604      	mov	r4, r0
 8000a24:	b108      	cbz	r0, 8000a2a <main+0x3ca>
 8000a26:	b672      	cpsid	i
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <main+0x3c8>
  MX_MotorControl_Init();
 8000a2a:	f001 fa95 	bl	8001f58 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000a2e:	4622      	mov	r2, r4
 8000a30:	2102      	movs	r1, #2
 8000a32:	2012      	movs	r0, #18
 8000a34:	f002 fef8 	bl	8003828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a38:	2012      	movs	r0, #18
 8000a3a:	f002 ff33 	bl	80038a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000a3e:	4622      	mov	r2, r4
 8000a40:	4621      	mov	r1, r4
 8000a42:	2019      	movs	r0, #25
 8000a44:	f002 fef0 	bl	8003828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a48:	2019      	movs	r0, #25
 8000a4a:	f002 ff2b 	bl	80038a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2104      	movs	r1, #4
 8000a52:	2018      	movs	r0, #24
 8000a54:	f002 fee8 	bl	8003828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000a58:	2018      	movs	r0, #24
 8000a5a:	f002 ff23 	bl	80038a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000a5e:	2103      	movs	r1, #3
 8000a60:	2201      	movs	r2, #1
 8000a62:	2026      	movs	r0, #38	; 0x26
 8000a64:	f002 fee0 	bl	8003828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a68:	2026      	movs	r0, #38	; 0x26
 8000a6a:	f002 ff1b 	bl	80038a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000a6e:	2028      	movs	r0, #40	; 0x28
 8000a70:	4622      	mov	r2, r4
 8000a72:	2103      	movs	r1, #3
 8000a74:	f002 fed8 	bl	8003828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a78:	2028      	movs	r0, #40	; 0x28
 8000a7a:	f002 ff13 	bl	80038a4 <HAL_NVIC_EnableIRQ>
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <main+0x41e>
 8000a80:	200007cc 	.word	0x200007cc
 8000a84:	20000814 	.word	0x20000814
 8000a88:	40004400 	.word	0x40004400

08000a8c <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8000a8c:	4b01      	ldr	r3, [pc, #4]	; (8000a94 <MC_StartMotor1+0x8>)
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	f000 b83a 	b.w	8000b08 <MCI_StartMotor>
 8000a94:	20000948 	.word	0x20000948

08000a98 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8000a98:	4b01      	ldr	r3, [pc, #4]	; (8000aa0 <MC_StopMotor1+0x8>)
 8000a9a:	6818      	ldr	r0, [r3, #0]
 8000a9c:	f000 b83e 	b.w	8000b1c <MCI_StopMotor>
 8000aa0:	20000948 	.word	0x20000948

08000aa4 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8000aa4:	4b01      	ldr	r3, [pc, #4]	; (8000aac <MC_GetSTMStateMotor1+0x8>)
 8000aa6:	6818      	ldr	r0, [r3, #0]
 8000aa8:	f000 b880 	b.w	8000bac <MCI_GetSTMState>
 8000aac:	20000948 	.word	0x20000948

08000ab0 <MCI_Init>:
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000ab0:	f04f 0c00 	mov.w	ip, #0
  pHandle->pSTC = pSTC;
 8000ab4:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 8000ab8:	6083      	str	r3, [r0, #8]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000aba:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000abe:	f8c0 c00e 	str.w	ip, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8000ac2:	f8a0 c016 	strh.w	ip, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000ac6:	f880 c018 	strb.w	ip, [r0, #24]
}
 8000aca:	4770      	bx	lr

08000acc <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000acc:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000ad0:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000ad4:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8000ad8:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8000ada:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000adc:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8000ade:	4770      	bx	lr

08000ae0 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000ae0:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000ae4:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000ae6:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8000aea:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8000aec:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000aee:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000af4:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000af6:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000af8:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000afa:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.q = Iqdref.q;
 8000afc:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000b00:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000b02:	b002      	add	sp, #8
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000b08:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000b0a:	2103      	movs	r1, #3
{
 8000b0c:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000b0e:	6800      	ldr	r0, [r0, #0]
 8000b10:	f005 fae8 	bl	80060e4 <STM_NextState>

  if ( RetVal == true )
 8000b14:	b108      	cbz	r0, 8000b1a <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000b16:	2301      	movs	r3, #1
 8000b18:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000b1a:	bd10      	pop	{r4, pc}

08000b1c <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000b1c:	6800      	ldr	r0, [r0, #0]
 8000b1e:	2107      	movs	r1, #7
 8000b20:	f005 bae0 	b.w	80060e4 <STM_NextState>

08000b24 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000b24:	6800      	ldr	r0, [r0, #0]
 8000b26:	f005 bb55 	b.w	80061d4 <STM_FaultAcknowledged>
 8000b2a:	bf00      	nop

08000b2c <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000b2c:	6800      	ldr	r0, [r0, #0]
 8000b2e:	2101      	movs	r1, #1
 8000b30:	f005 bad8 	b.w	80060e4 <STM_NextState>

08000b34 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000b34:	b178      	cbz	r0, 8000b56 <MCI_ExecBufferedCommands+0x22>
{
 8000b36:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000b38:	7e03      	ldrb	r3, [r0, #24]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	d000      	beq.n	8000b42 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000b40:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8000b42:	7b01      	ldrb	r1, [r0, #12]
 8000b44:	2902      	cmp	r1, #2
 8000b46:	d020      	beq.n	8000b8a <MCI_ExecBufferedCommands+0x56>
 8000b48:	2903      	cmp	r1, #3
 8000b4a:	d005      	beq.n	8000b58 <MCI_ExecBufferedCommands+0x24>
 8000b4c:	2901      	cmp	r1, #1
 8000b4e:	d00c      	beq.n	8000b6a <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000b50:	2303      	movs	r3, #3
 8000b52:	7623      	strb	r3, [r4, #24]
}
 8000b54:	bd10      	pop	{r4, pc}
 8000b56:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000b58:	6882      	ldr	r2, [r0, #8]
 8000b5a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000b5e:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8000b62:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000b64:	2302      	movs	r3, #2
 8000b66:	7623      	strb	r3, [r4, #24]
}
 8000b68:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000b6a:	6883      	ldr	r3, [r0, #8]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000b72:	6840      	ldr	r0, [r0, #4]
 8000b74:	f005 f9ec 	bl	8005f50 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000b78:	8ae2      	ldrh	r2, [r4, #22]
 8000b7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b7e:	6860      	ldr	r0, [r4, #4]
 8000b80:	f005 f9ea 	bl	8005f58 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000b84:	2800      	cmp	r0, #0
 8000b86:	d0e3      	beq.n	8000b50 <MCI_ExecBufferedCommands+0x1c>
 8000b88:	e7ec      	b.n	8000b64 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000b8a:	6883      	ldr	r3, [r0, #8]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000b92:	6840      	ldr	r0, [r0, #4]
 8000b94:	f005 f9dc 	bl	8005f50 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000b98:	8ae2      	ldrh	r2, [r4, #22]
 8000b9a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000b9e:	6860      	ldr	r0, [r4, #4]
 8000ba0:	f005 f9da 	bl	8005f58 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	d0d3      	beq.n	8000b50 <MCI_ExecBufferedCommands+0x1c>
 8000ba8:	e7dc      	b.n	8000b64 <MCI_ExecBufferedCommands+0x30>
 8000baa:	bf00      	nop

08000bac <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000bac:	6800      	ldr	r0, [r0, #0]
 8000bae:	f005 bb0f 	b.w	80061d0 <STM_GetState>
 8000bb2:	bf00      	nop

08000bb4 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000bb4:	7e40      	ldrb	r0, [r0, #25]
 8000bb6:	4770      	bx	lr

08000bb8 <MCI_GetImposedMotorDirection>:
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 8000bb8:	7b03      	ldrb	r3, [r0, #12]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d005      	beq.n	8000bca <MCI_GetImposedMotorDirection+0x12>
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d013      	beq.n	8000bea <MCI_GetImposedMotorDirection+0x32>
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d009      	beq.n	8000bda <MCI_GetImposedMotorDirection+0x22>
 8000bc6:	2001      	movs	r0, #1
      break;
    default:
      break;
  }
  return retVal;
}
 8000bc8:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 8000bca:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
        retVal = -1;
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	bfac      	ite	ge
 8000bd2:	2001      	movge	r0, #1
 8000bd4:	f04f 30ff 	movlt.w	r0, #4294967295
 8000bd8:	4770      	bx	lr
      if ( pHandle->hFinalSpeed < 0 )
 8000bda:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
        retVal = -1;
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	bfac      	ite	ge
 8000be2:	2001      	movge	r0, #1
 8000be4:	f04f 30ff 	movlt.w	r0, #4294967295
 8000be8:	4770      	bx	lr
      if ( pHandle->Iqdref.q < 0 )
 8000bea:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
        retVal = -1;
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	bfac      	ite	ge
 8000bf2:	2001      	movge	r0, #1
 8000bf4:	f04f 30ff 	movlt.w	r0, #4294967295
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000bfc:	7b03      	ldrb	r3, [r0, #12]
 8000bfe:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000c00:	bf0c      	ite	eq
 8000c02:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000c06:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000c0c:	6840      	ldr	r0, [r0, #4]
 8000c0e:	f005 b9eb 	b.w	8005fe8 <STC_StopRamp>
 8000c12:	bf00      	nop

08000c14 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000c14:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000c16:	6840      	ldr	r0, [r0, #4]
 8000c18:	f005 f980 	bl	8005f1c <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000c1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000c20:	f005 b924 	b.w	8005e6c <SPD_GetAvrgMecSpeedUnit>

08000c24 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000c24:	6840      	ldr	r0, [r0, #4]
 8000c26:	f005 b983 	b.w	8005f30 <STC_GetMecSpeedRefUnit>
 8000c2a:	bf00      	nop

08000c2c <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000c2c:	6882      	ldr	r2, [r0, #8]
 8000c2e:	6810      	ldr	r0, [r2, #0]
 8000c30:	2300      	movs	r3, #0
 8000c32:	b282      	uxth	r2, r0
 8000c34:	f362 030f 	bfi	r3, r2, #0, #16
 8000c38:	0c00      	lsrs	r0, r0, #16
 8000c3a:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000c3e:	b082      	sub	sp, #8
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	b002      	add	sp, #8
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000c48:	6882      	ldr	r2, [r0, #8]
 8000c4a:	6850      	ldr	r0, [r2, #4]
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	b282      	uxth	r2, r0
 8000c50:	f362 030f 	bfi	r3, r2, #0, #16
 8000c54:	0c00      	lsrs	r0, r0, #16
 8000c56:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000c5a:	b082      	sub	sp, #8
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	b002      	add	sp, #8
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000c64:	6882      	ldr	r2, [r0, #8]
 8000c66:	68d0      	ldr	r0, [r2, #12]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	b282      	uxth	r2, r0
 8000c6c:	f362 030f 	bfi	r3, r2, #0, #16
 8000c70:	0c00      	lsrs	r0, r0, #16
 8000c72:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000c76:	b082      	sub	sp, #8
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	b002      	add	sp, #8
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000c80:	6882      	ldr	r2, [r0, #8]
 8000c82:	6910      	ldr	r0, [r2, #16]
 8000c84:	2300      	movs	r3, #0
 8000c86:	b282      	uxth	r2, r0
 8000c88:	f362 030f 	bfi	r3, r2, #0, #16
 8000c8c:	0c00      	lsrs	r0, r0, #16
 8000c8e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000c92:	b082      	sub	sp, #8
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	b002      	add	sp, #8
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000c9c:	6882      	ldr	r2, [r0, #8]
 8000c9e:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	b282      	uxth	r2, r0
 8000ca6:	f362 030f 	bfi	r3, r2, #0, #16
 8000caa:	0c00      	lsrs	r0, r0, #16
 8000cac:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000cb0:	b082      	sub	sp, #8
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	b002      	add	sp, #8
 8000cb6:	4770      	bx	lr

08000cb8 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000cb8:	6882      	ldr	r2, [r0, #8]
 8000cba:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	b282      	uxth	r2, r0
 8000cc2:	f362 030f 	bfi	r3, r2, #0, #16
 8000cc6:	0c00      	lsrs	r0, r0, #16
 8000cc8:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000ccc:	b082      	sub	sp, #8
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	b002      	add	sp, #8
 8000cd2:	4770      	bx	lr

08000cd4 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000cd4:	6883      	ldr	r3, [r0, #8]
}
 8000cd6:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000cda:	4770      	bx	lr

08000cdc <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	6882      	ldr	r2, [r0, #8]
 8000ce0:	f361 030f 	bfi	r3, r1, #0, #16
 8000ce4:	f361 431f 	bfi	r3, r1, #16, #16
 8000ce8:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000cf0:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000cf2:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000cf6:	f005 f9b7 	bl	8006068 <STC_GetDefaultIqdref>
 8000cfa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000cfe:	8220      	strh	r0, [r4, #16]
 8000d00:	8263      	strh	r3, [r4, #18]
}
 8000d02:	bd10      	pop	{r4, pc}

08000d04 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000d04:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000d08:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000d0a:	fb13 f201 	smulbb	r2, r3, r1
{
 8000d0e:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000d12:	fb10 f001 	smulbb	r0, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000d16:	4252      	negs	r2, r2
 8000d18:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000d1c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
{
 8000d20:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000d22:	da05      	bge.n	8000d30 <MCM_Clarke+0x2c>
 8000d24:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000d26:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8000d2a:	da0c      	bge.n	8000d46 <MCM_Clarke+0x42>
 8000d2c:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <MCM_Clarke+0x50>)
 8000d2e:	e001      	b.n	8000d34 <MCM_Clarke+0x30>
 8000d30:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	2000      	movs	r0, #0
 8000d38:	f363 000f 	bfi	r0, r3, #0, #16
 8000d3c:	b293      	uxth	r3, r2
 8000d3e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000d42:	b004      	add	sp, #16
 8000d44:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000d46:	4803      	ldr	r0, [pc, #12]	; (8000d54 <MCM_Clarke+0x50>)
 8000d48:	b20a      	sxth	r2, r1
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	bfb8      	it	lt
 8000d4e:	4602      	movlt	r2, r0
 8000d50:	e7f0      	b.n	8000d34 <MCM_Clarke+0x30>
 8000d52:	bf00      	nop
 8000d54:	ffff8001 	.word	0xffff8001

08000d58 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000d58:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8000d5c:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000d60:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8000d64:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 8000d68:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000d6a:	d028      	beq.n	8000dbe <MCM_Trig_Functions+0x66>
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	461a      	mov	r2, r3
 8000d72:	d816      	bhi.n	8000da2 <MCM_Trig_Functions+0x4a>
 8000d74:	b361      	cbz	r1, 8000dd0 <MCM_Trig_Functions+0x78>
 8000d76:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000d7a:	d109      	bne.n	8000d90 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000d7c:	b2c0      	uxtb	r0, r0
 8000d7e:	43c2      	mvns	r2, r0
 8000d80:	491a      	ldr	r1, [pc, #104]	; (8000dec <MCM_Trig_Functions+0x94>)
 8000d82:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000d84:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000d88:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000d8c:	4252      	negs	r2, r2
 8000d8e:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	2000      	movs	r0, #0
 8000d94:	f363 000f 	bfi	r0, r3, #0, #16
 8000d98:	b292      	uxth	r2, r2
 8000d9a:	f362 401f 	bfi	r0, r2, #16, #16
}
 8000d9e:	b002      	add	sp, #8
 8000da0:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000da2:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8000da6:	d1f3      	bne.n	8000d90 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000da8:	4910      	ldr	r1, [pc, #64]	; (8000dec <MCM_Trig_Functions+0x94>)
 8000daa:	b2c0      	uxtb	r0, r0
 8000dac:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000dae:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000db2:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000db4:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000db6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000dba:	b21b      	sxth	r3, r3
      break;
 8000dbc:	e7e8      	b.n	8000d90 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000dbe:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000dc0:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000dc2:	490a      	ldr	r1, [pc, #40]	; (8000dec <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000dc4:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000dc6:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000dca:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 8000dce:	e7df      	b.n	8000d90 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000dd0:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000dd2:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000dd4:	4905      	ldr	r1, [pc, #20]	; (8000dec <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000dd6:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000dd8:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ddc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000de0:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000de2:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000de4:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000de6:	b21b      	sxth	r3, r3
      break;
 8000de8:	e7d2      	b.n	8000d90 <MCM_Trig_Functions+0x38>
 8000dea:	bf00      	nop
 8000dec:	08006c54 	.word	0x08006c54

08000df0 <MCM_Park>:
{
 8000df0:	b530      	push	{r4, r5, lr}
 8000df2:	b085      	sub	sp, #20
 8000df4:	4604      	mov	r4, r0
 8000df6:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000df8:	4608      	mov	r0, r1
{
 8000dfa:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000dfc:	f7ff ffac 	bl	8000d58 <MCM_Trig_Functions>
 8000e00:	b22d      	sxth	r5, r5
 8000e02:	b201      	sxth	r1, r0
 8000e04:	1424      	asrs	r4, r4, #16
 8000e06:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000e08:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000e0c:	fb04 3310 	mls	r3, r4, r0, r3
  if ( wqd_tmp > INT16_MAX )
 8000e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e14:	da05      	bge.n	8000e22 <MCM_Park+0x32>
 8000e16:	13da      	asrs	r2, r3, #15
  else if ( wqd_tmp < ( -32768 ) )
 8000e18:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000e1c:	da22      	bge.n	8000e64 <MCM_Park+0x74>
 8000e1e:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <MCM_Park+0x80>)
 8000e20:	e001      	b.n	8000e26 <MCM_Park+0x36>
 8000e22:	f647 72ff 	movw	r2, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000e26:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000e2a:	fb05 4400 	mla	r4, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 8000e2e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000e32:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 8000e36:	da04      	bge.n	8000e42 <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 8000e38:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000e3c:	da0c      	bge.n	8000e58 <MCM_Park+0x68>
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MCM_Park+0x80>)
 8000e40:	e001      	b.n	8000e46 <MCM_Park+0x56>
 8000e42:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8000e46:	b292      	uxth	r2, r2
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f362 000f 	bfi	r0, r2, #0, #16
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000e54:	b005      	add	sp, #20
 8000e56:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000e58:	4905      	ldr	r1, [pc, #20]	; (8000e70 <MCM_Park+0x80>)
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	bfb8      	it	lt
 8000e60:	460b      	movlt	r3, r1
 8000e62:	e7f0      	b.n	8000e46 <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000e64:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <MCM_Park+0x80>)
 8000e66:	b212      	sxth	r2, r2
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	bfb8      	it	lt
 8000e6c:	461a      	movlt	r2, r3
 8000e6e:	e7da      	b.n	8000e26 <MCM_Park+0x36>
 8000e70:	ffff8001 	.word	0xffff8001

08000e74 <MCM_Rev_Park>:
{
 8000e74:	b530      	push	{r4, r5, lr}
 8000e76:	b085      	sub	sp, #20
 8000e78:	4604      	mov	r4, r0
 8000e7a:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000e7c:	4608      	mov	r0, r1
{
 8000e7e:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000e80:	f7ff ff6a 	bl	8000d58 <MCM_Trig_Functions>
 8000e84:	1424      	asrs	r4, r4, #16
 8000e86:	1402      	asrs	r2, r0, #16
 8000e88:	b22d      	sxth	r5, r5
 8000e8a:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000e8c:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000e90:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000e94:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000e98:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 8000e9c:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f363 000f 	bfi	r0, r3, #0, #16
 8000ea6:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8000eaa:	f364 401f 	bfi	r0, r4, #16, #16
}
 8000eae:	b005      	add	sp, #20
 8000eb0:	bd30      	pop	{r4, r5, pc}
 8000eb2:	bf00      	nop

08000eb4 <FOC_Clear>:
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8000eb4:	2226      	movs	r2, #38	; 0x26
{
 8000eb6:	b538      	push	{r3, r4, r5, lr}
 8000eb8:	fb00 f202 	mul.w	r2, r0, r2
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 8000ebe:	2400      	movs	r4, #0
 8000ec0:	509c      	str	r4, [r3, r2]
{
 8000ec2:	4605      	mov	r5, r0
 8000ec4:	f102 0108 	add.w	r1, r2, #8
 8000ec8:	1898      	adds	r0, r3, r2
 8000eca:	3210      	adds	r2, #16
 8000ecc:	4419      	add	r1, r3
 8000ece:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000ed0:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8000ed2:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000ed4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000ed8:	604c      	str	r4, [r1, #4]
 8000eda:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000edc:	f8c3 4006 	str.w	r4, [r3, #6]
 8000ee0:	f8c3 400a 	str.w	r4, [r3, #10]
 8000ee4:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000ee8:	4621      	mov	r1, r4
 8000eea:	f003 fe7d 	bl	8004be8 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <FOC_Clear+0x68>)
 8000ef0:	4621      	mov	r1, r4
 8000ef2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000ef6:	f003 fe77 	bl	8004be8 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <FOC_Clear+0x6c>)
 8000efc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000f00:	f005 f80e 	bl	8005f20 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <FOC_Clear+0x70>)
 8000f06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000f0e:	f004 b87f 	b.w	8005010 <PWMC_SwitchOffPWM>
 8000f12:	bf00      	nop
 8000f14:	2000086c 	.word	0x2000086c
 8000f18:	20000928 	.word	0x20000928
 8000f1c:	20000924 	.word	0x20000924
 8000f20:	20000934 	.word	0x20000934
 8000f24:	2000093c 	.word	0x2000093c

08000f28 <MCboot>:
{
 8000f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	b089      	sub	sp, #36	; 0x24
  STM_Init(&STM[M1]);
 8000f30:	4861      	ldr	r0, [pc, #388]	; (80010b8 <MCboot+0x190>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000f32:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8001114 <MCboot+0x1ec>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000f36:	4e61      	ldr	r6, [pc, #388]	; (80010bc <MCboot+0x194>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000f38:	4d61      	ldr	r5, [pc, #388]	; (80010c0 <MCboot+0x198>)
  STO_PLL_Init (&STO_PLL_M1);
 8000f3a:	4f62      	ldr	r7, [pc, #392]	; (80010c4 <MCboot+0x19c>)
  PID_HandleInit(&PIDIqHandle_M1);
 8000f3c:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 8001118 <MCboot+0x1f0>
  PID_HandleInit(&PIDIdHandle_M1);
 8000f40:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 800111c <MCboot+0x1f4>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000f44:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8001120 <MCboot+0x1f8>
{
 8000f48:	e9cd 3103 	strd	r3, r1, [sp, #12]
  STM_Init(&STM[M1]);
 8000f4c:	f005 f8a2 	bl	8006094 <STM_Init>
  bMCBootCompleted = 0;
 8000f50:	4a5d      	ldr	r2, [pc, #372]	; (80010c8 <MCboot+0x1a0>)
  pCLM[M1] = &CircleLimitationM1;
 8000f52:	4b5e      	ldr	r3, [pc, #376]	; (80010cc <MCboot+0x1a4>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000f54:	485e      	ldr	r0, [pc, #376]	; (80010d0 <MCboot+0x1a8>)
 8000f56:	f8c9 0000 	str.w	r0, [r9]
  bMCBootCompleted = 0;
 8000f5a:	2400      	movs	r4, #0
 8000f5c:	7014      	strb	r4, [r2, #0]
  pCLM[M1] = &CircleLimitationM1;
 8000f5e:	4a5d      	ldr	r2, [pc, #372]	; (80010d4 <MCboot+0x1ac>)
 8000f60:	601a      	str	r2, [r3, #0]
  R3_2_Init(&PWM_Handle_M1);
 8000f62:	f004 fb19 	bl	8005598 <R3_2_Init>
  startTimers();
 8000f66:	f003 fec5 	bl	8004cf4 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	f003 fe28 	bl	8004bc0 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000f70:	4a59      	ldr	r2, [pc, #356]	; (80010d8 <MCboot+0x1b0>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000f72:	4b5a      	ldr	r3, [pc, #360]	; (80010dc <MCboot+0x1b4>)
 8000f74:	602b      	str	r3, [r5, #0]
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000f76:	6016      	str	r6, [r2, #0]
  STO_PLL_Init (&STO_PLL_M1);
 8000f78:	4638      	mov	r0, r7
 8000f7a:	f005 fb1d 	bl	80065b8 <STO_PLL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 8000f7e:	4856      	ldr	r0, [pc, #344]	; (80010d8 <MCboot+0x1b0>)
  VSS_Init (&VirtualSpeedSensorM1);
 8000f80:	4e57      	ldr	r6, [pc, #348]	; (80010e0 <MCboot+0x1b8>)
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 8000f82:	6801      	ldr	r1, [r0, #0]
 8000f84:	6828      	ldr	r0, [r5, #0]
 8000f86:	463a      	mov	r2, r7
 8000f88:	f004 ffb0 	bl	8005eec <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	f005 fd2f 	bl	80069f0 <VSS_Init>
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8000f92:	f8d9 3000 	ldr.w	r3, [r9]
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	4632      	mov	r2, r6
 8000f9a:	6829      	ldr	r1, [r5, #0]
 8000f9c:	4b51      	ldr	r3, [pc, #324]	; (80010e4 <MCboot+0x1bc>)
 8000f9e:	4852      	ldr	r0, [pc, #328]	; (80010e8 <MCboot+0x1c0>)
 8000fa0:	f004 fe72 	bl	8005c88 <RUC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000fa4:	4658      	mov	r0, fp
 8000fa6:	f003 fe0b 	bl	8004bc0 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000faa:	4650      	mov	r0, sl
 8000fac:	f003 fe08 	bl	8004bc0 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000fb0:	4b4e      	ldr	r3, [pc, #312]	; (80010ec <MCboot+0x1c4>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8000fb2:	494f      	ldr	r1, [pc, #316]	; (80010f0 <MCboot+0x1c8>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000fb4:	484f      	ldr	r0, [pc, #316]	; (80010f4 <MCboot+0x1cc>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000fb6:	f8c3 b000 	str.w	fp, [r3]
  pPIDId[M1] = &PIDIdHandle_M1;
 8000fba:	f8c1 a000 	str.w	sl, [r1]
  NTC_Init(&TempSensorParamsM1);
 8000fbe:	f8df b164 	ldr.w	fp, [pc, #356]	; 8001124 <MCboot+0x1fc>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000fc2:	f8c8 0000 	str.w	r0, [r8]
  RVBS_Init(pBusSensorM1);
 8000fc6:	f004 fd85 	bl	8005ad4 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000fca:	494b      	ldr	r1, [pc, #300]	; (80010f8 <MCboot+0x1d0>)
 8000fcc:	4b4b      	ldr	r3, [pc, #300]	; (80010fc <MCboot+0x1d4>)
 8000fce:	600b      	str	r3, [r1, #0]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000fd0:	f8df a154 	ldr.w	sl, [pc, #340]	; 8001128 <MCboot+0x200>
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000fd4:	f8d8 2000 	ldr.w	r2, [r8]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000fd8:	f8c3 a10c 	str.w	sl, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8000fdc:	4658      	mov	r0, fp
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000fde:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  NTC_Init(&TempSensorParamsM1);
 8000fe2:	f003 fda9 	bl	8004b38 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000fe6:	4a46      	ldr	r2, [pc, #280]	; (8001100 <MCboot+0x1d8>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000fe8:	4b46      	ldr	r3, [pc, #280]	; (8001104 <MCboot+0x1dc>)
 8000fea:	4847      	ldr	r0, [pc, #284]	; (8001108 <MCboot+0x1e0>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000fec:	f8c2 b000 	str.w	fp, [r2]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000ff0:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 8000ff2:	f004 fdbf 	bl	8005b74 <REMNG_Init>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000ff6:	f04f 0b01 	mov.w	fp, #1
  FOC_Clear(M1);
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f7ff ff5a 	bl	8000eb4 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001000:	f88a b024 	strb.w	fp, [sl, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001004:	6828      	ldr	r0, [r5, #0]
 8001006:	f005 f82f 	bl	8006068 <STC_GetDefaultIqdref>
 800100a:	f8ca 0010 	str.w	r0, [sl, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800100e:	6828      	ldr	r0, [r5, #0]
 8001010:	f005 f82a 	bl	8006068 <STC_GetDefaultIqdref>
 8001014:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8001018:	f8aa 0014 	strh.w	r0, [sl, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800101c:	4653      	mov	r3, sl
  oMCInterface[M1] = & Mci[M1];
 800101e:	f8df a10c 	ldr.w	sl, [pc, #268]	; 800112c <MCboot+0x204>
 8001022:	483a      	ldr	r0, [pc, #232]	; (800110c <MCboot+0x1e4>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001024:	682a      	ldr	r2, [r5, #0]
 8001026:	4924      	ldr	r1, [pc, #144]	; (80010b8 <MCboot+0x190>)
  oMCInterface[M1] = & Mci[M1];
 8001028:	f8ca 0000 	str.w	r0, [sl]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800102c:	f7ff fd40 	bl	8000ab0 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8001030:	f8da 3000 	ldr.w	r3, [sl]
 8001034:	6828      	ldr	r0, [r5, #0]
 8001036:	9305      	str	r3, [sp, #20]
 8001038:	f005 f80c 	bl	8006054 <STC_GetMecSpeedRefUnitDefault>
 800103c:	9b05      	ldr	r3, [sp, #20]
 800103e:	4601      	mov	r1, r0
 8001040:	4622      	mov	r2, r4
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fd42 	bl	8000acc <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 8001048:	9803      	ldr	r0, [sp, #12]
 800104a:	f8da 3000 	ldr.w	r3, [sl]
 800104e:	6003      	str	r3, [r0, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001050:	4b26      	ldr	r3, [pc, #152]	; (80010ec <MCboot+0x1c4>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001052:	4821      	ldr	r0, [pc, #132]	; (80010d8 <MCboot+0x1b0>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001054:	f8d3 c000 	ldr.w	ip, [r3]
  MCT[M1].pPIDId = pPIDId[M1];
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <MCboot+0x1c8>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 800105a:	f8d0 e000 	ldr.w	lr, [r0]
  MCT[M1].pPIDId = pPIDId[M1];
 800105e:	6818      	ldr	r0, [r3, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001060:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <MCboot+0x1d0>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001062:	f8d9 1000 	ldr.w	r1, [r9]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001066:	f8d3 9000 	ldr.w	r9, [r3]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 800106a:	4b29      	ldr	r3, [pc, #164]	; (8001110 <MCboot+0x1e8>)
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 800106c:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 800106e:	6098      	str	r0, [r3, #8]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001070:	4d23      	ldr	r5, [pc, #140]	; (8001100 <MCboot+0x1d8>)
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 8001072:	481d      	ldr	r0, [pc, #116]	; (80010e8 <MCboot+0x1c0>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001074:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001076:	f8d8 8000 	ldr.w	r8, [r8]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 800107a:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 800107c:	e9c3 0705 	strd	r0, r7, [r3, #20]
  MCT[M1].pStateMachine = &STM[M1];
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <MCboot+0x190>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001082:	f8c3 8030 	str.w	r8, [r3, #48]	; 0x30
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001086:	e9c3 6208 	strd	r6, r2, [r3, #32]
  MCT[M1].pPIDIq = pPIDIq[M1];
 800108a:	e9c3 ec00 	strd	lr, ip, [r3]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 800108e:	e9c3 050a 	strd	r0, r5, [r3, #40]	; 0x28
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8001092:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 8001096:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 800109a:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  bMCBootCompleted = 1;
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <MCboot+0x1a0>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80010a0:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 80010a4:	60dc      	str	r4, [r3, #12]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 80010a6:	61dc      	str	r4, [r3, #28]
  MCT[M1].pOTT = MC_NULL;
 80010a8:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 80010aa:	9904      	ldr	r1, [sp, #16]
 80010ac:	600b      	str	r3, [r1, #0]
  bMCBootCompleted = 1;
 80010ae:	f882 b000 	strb.w	fp, [r2]
}
 80010b2:	b009      	add	sp, #36	; 0x24
 80010b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010b8:	20000904 	.word	0x20000904
 80010bc:	20000148 	.word	0x20000148
 80010c0:	20000934 	.word	0x20000934
 80010c4:	200003d0 	.word	0x200003d0
 80010c8:	2000090a 	.word	0x2000090a
 80010cc:	2000091c 	.word	0x2000091c
 80010d0:	20000288 	.word	0x20000288
 80010d4:	20000000 	.word	0x20000000
 80010d8:	2000092c 	.word	0x2000092c
 80010dc:	200004f8 	.word	0x200004f8
 80010e0:	20000584 	.word	0x20000584
 80010e4:	200003bc 	.word	0x200003bc
 80010e8:	20000344 	.word	0x20000344
 80010ec:	20000928 	.word	0x20000928
 80010f0:	20000924 	.word	0x20000924
 80010f4:	2000031c 	.word	0x2000031c
 80010f8:	20000920 	.word	0x20000920
 80010fc:	20000174 	.word	0x20000174
 8001100:	20000938 	.word	0x20000938
 8001104:	20000930 	.word	0x20000930
 8001108:	20000304 	.word	0x20000304
 800110c:	200008e8 	.word	0x200008e8
 8001110:	20000894 	.word	0x20000894
 8001114:	2000093c 	.word	0x2000093c
 8001118:	2000011c 	.word	0x2000011c
 800111c:	200000f0 	.word	0x200000f0
 8001120:	20000918 	.word	0x20000918
 8001124:	2000052c 	.word	0x2000052c
 8001128:	2000086c 	.word	0x2000086c
 800112c:	20000914 	.word	0x20000914

08001130 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001134:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001136:	4c08      	ldr	r4, [pc, #32]	; (8001158 <FOC_CalcCurrRef+0x24>)
 8001138:	2326      	movs	r3, #38	; 0x26
 800113a:	fb03 4400 	mla	r4, r3, r0, r4
 800113e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001142:	b103      	cbz	r3, 8001146 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001144:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <FOC_CalcCurrRef+0x28>)
 8001148:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800114c:	f004 ff50 	bl	8005ff0 <STC_CalcTorqueReference>
 8001150:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001152:	8220      	strh	r0, [r4, #16]
}
 8001154:	bd10      	pop	{r4, pc}
 8001156:	bf00      	nop
 8001158:	2000086c 	.word	0x2000086c
 800115c:	20000934 	.word	0x20000934

08001160 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001160:	4b01      	ldr	r3, [pc, #4]	; (8001168 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001162:	8018      	strh	r0, [r3, #0]
}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	2000090c 	.word	0x2000090c

0800116c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800116e:	8818      	ldrh	r0, [r3, #0]
 8001170:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001172:	fab0 f080 	clz	r0, r0
 8001176:	0940      	lsrs	r0, r0, #5
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2000090c 	.word	0x2000090c

08001180 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001180:	4b01      	ldr	r3, [pc, #4]	; (8001188 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001182:	8018      	strh	r0, [r3, #0]
}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000910 	.word	0x20000910

0800118c <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800118e:	8818      	ldrh	r0, [r3, #0]
 8001190:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001192:	fab0 f080 	clz	r0, r0
 8001196:	0940      	lsrs	r0, r0, #5
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000910 	.word	0x20000910

080011a0 <TSK_MediumFrequencyTaskM1>:
{
 80011a0:	b530      	push	{r4, r5, lr}
 80011a2:	b083      	sub	sp, #12
  int16_t wAux = 0;
 80011a4:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80011a6:	4669      	mov	r1, sp
 80011a8:	489c      	ldr	r0, [pc, #624]	; (800141c <TSK_MediumFrequencyTaskM1+0x27c>)
  int16_t wAux = 0;
 80011aa:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80011ae:	f005 f907 	bl	80063c0 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 80011b2:	4d9b      	ldr	r5, [pc, #620]	; (8001420 <TSK_MediumFrequencyTaskM1+0x280>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80011b4:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 80011b6:	6828      	ldr	r0, [r5, #0]
 80011b8:	f003 fd66 	bl	8004c88 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 80011bc:	4899      	ldr	r0, [pc, #612]	; (8001424 <TSK_MediumFrequencyTaskM1+0x284>)
 80011be:	f005 f807 	bl	80061d0 <STM_GetState>
  switch ( StateM1 )
 80011c2:	1ec3      	subs	r3, r0, #3
 80011c4:	2b10      	cmp	r3, #16
 80011c6:	d824      	bhi.n	8001212 <TSK_MediumFrequencyTaskM1+0x72>
 80011c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80011cc:	005c0048 	.word	0x005c0048
 80011d0:	00be00a7 	.word	0x00be00a7
 80011d4:	00ce0011 	.word	0x00ce0011
 80011d8:	002300d8 	.word	0x002300d8
 80011dc:	00230023 	.word	0x00230023
 80011e0:	00230023 	.word	0x00230023
 80011e4:	00e50023 	.word	0x00e50023
 80011e8:	010100f4 	.word	0x010100f4
 80011ec:	0025      	.short	0x0025
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 80011ee:	4b8e      	ldr	r3, [pc, #568]	; (8001428 <TSK_MediumFrequencyTaskM1+0x288>)
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	f004 f8a5 	bl	8005340 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff fe5c 	bl	8000eb4 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 80011fc:	6828      	ldr	r0, [r5, #0]
 80011fe:	f003 fc57 	bl	8004ab0 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8001202:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001206:	f7ff ffbb 	bl	8001180 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 800120a:	4886      	ldr	r0, [pc, #536]	; (8001424 <TSK_MediumFrequencyTaskM1+0x284>)
 800120c:	2108      	movs	r1, #8
 800120e:	f004 ff69 	bl	80060e4 <STM_NextState>
}
 8001212:	b003      	add	sp, #12
 8001214:	bd30      	pop	{r4, r5, pc}
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8001216:	4885      	ldr	r0, [pc, #532]	; (800142c <TSK_MediumFrequencyTaskM1+0x28c>)
 8001218:	f004 fdb8 	bl	8005d8c <RUC_Exec>
 800121c:	2800      	cmp	r0, #0
 800121e:	f000 80f7 	beq.w	8001410 <TSK_MediumFrequencyTaskM1+0x270>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 8001222:	4883      	ldr	r0, [pc, #524]	; (8001430 <TSK_MediumFrequencyTaskM1+0x290>)
 8001224:	a901      	add	r1, sp, #4
 8001226:	f005 fc39 	bl	8006a9c <VSS_CalcAvrgMecSpeedUnit>
 800122a:	4604      	mov	r4, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 800122c:	4880      	ldr	r0, [pc, #512]	; (8001430 <TSK_MediumFrequencyTaskM1+0x290>)
 800122e:	f005 fcd5 	bl	8006bdc <VSS_TransitionEnded>
        if ( LoopClosed == true )
 8001232:	b90c      	cbnz	r4, 8001238 <TSK_MediumFrequencyTaskM1+0x98>
 8001234:	2800      	cmp	r0, #0
 8001236:	d0ec      	beq.n	8001212 <TSK_MediumFrequencyTaskM1+0x72>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8001238:	4a7e      	ldr	r2, [pc, #504]	; (8001434 <TSK_MediumFrequencyTaskM1+0x294>)
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 800123a:	4b7f      	ldr	r3, [pc, #508]	; (8001438 <TSK_MediumFrequencyTaskM1+0x298>)
          PID_SetIntegralTerm( pPIDSpeed[M1],
 800123c:	6814      	ldr	r4, [r2, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 800123e:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 8001242:	4620      	mov	r0, r4
 8001244:	f003 fcd4 	bl	8004bf0 <PID_GetKIDivisor>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8001248:	fb05 f100 	mul.w	r1, r5, r0
 800124c:	4620      	mov	r0, r4
 800124e:	f003 fccb 	bl	8004be8 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 8001252:	2105      	movs	r1, #5
 8001254:	4873      	ldr	r0, [pc, #460]	; (8001424 <TSK_MediumFrequencyTaskM1+0x284>)
 8001256:	f004 ff45 	bl	80060e4 <STM_NextState>
    break;
 800125a:	e7da      	b.n	8001212 <TSK_MediumFrequencyTaskM1+0x72>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 800125c:	4b77      	ldr	r3, [pc, #476]	; (800143c <TSK_MediumFrequencyTaskM1+0x29c>)
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	f7ff fcaa 	bl	8000bb8 <MCI_GetImposedMotorDirection>
 8001264:	4601      	mov	r1, r0
 8001266:	4871      	ldr	r0, [pc, #452]	; (800142c <TSK_MediumFrequencyTaskM1+0x28c>)
 8001268:	f004 fd4c 	bl	8005d04 <RUC_Clear>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 800126c:	4b6e      	ldr	r3, [pc, #440]	; (8001428 <TSK_MediumFrequencyTaskM1+0x288>)
 800126e:	6818      	ldr	r0, [r3, #0]
 8001270:	f003 fff2 	bl	8005258 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001274:	2014      	movs	r0, #20
 8001276:	f7ff ff73 	bl	8001160 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 800127a:	2110      	movs	r1, #16
 800127c:	4869      	ldr	r0, [pc, #420]	; (8001424 <TSK_MediumFrequencyTaskM1+0x284>)
 800127e:	f004 ff31 	bl	80060e4 <STM_NextState>
    break;
 8001282:	e7c6      	b.n	8001212 <TSK_MediumFrequencyTaskM1+0x72>
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8001284:	4869      	ldr	r0, [pc, #420]	; (800142c <TSK_MediumFrequencyTaskM1+0x28c>)
 8001286:	f004 fd81 	bl	8005d8c <RUC_Exec>
 800128a:	2800      	cmp	r0, #0
 800128c:	f000 80ba 	beq.w	8001404 <TSK_MediumFrequencyTaskM1+0x264>
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8001290:	4b6b      	ldr	r3, [pc, #428]	; (8001440 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	f004 feac 	bl	8005ff0 <STC_CalcTorqueReference>
        IqdRef.d = FOCVars[M1].UserIdref;
 8001298:	4b67      	ldr	r3, [pc, #412]	; (8001438 <TSK_MediumFrequencyTaskM1+0x298>)
 800129a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 800129e:	8218      	strh	r0, [r3, #16]
 80012a0:	825a      	strh	r2, [r3, #18]
      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 80012a2:	4863      	ldr	r0, [pc, #396]	; (8001430 <TSK_MediumFrequencyTaskM1+0x290>)
 80012a4:	f10d 0102 	add.w	r1, sp, #2
 80012a8:	f005 fbf8 	bl	8006a9c <VSS_CalcAvrgMecSpeedUnit>
      if (RUC_FirstAccelerationStageReached(&RevUpControlM1) == true)
 80012ac:	485f      	ldr	r0, [pc, #380]	; (800142c <TSK_MediumFrequencyTaskM1+0x28c>)
 80012ae:	f004 fda3 	bl	8005df8 <RUC_FirstAccelerationStageReached>
 80012b2:	2800      	cmp	r0, #0
 80012b4:	d0ad      	beq.n	8001212 <TSK_MediumFrequencyTaskM1+0x72>
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 80012b6:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80012ba:	4858      	ldr	r0, [pc, #352]	; (800141c <TSK_MediumFrequencyTaskM1+0x27c>)
 80012bc:	f005 f9b6 	bl	800662c <STO_PLL_IsObserverConverged>
 80012c0:	4604      	mov	r4, r0
        STO_SetDirection(&STO_PLL_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 80012c2:	4860      	ldr	r0, [pc, #384]	; (8001444 <TSK_MediumFrequencyTaskM1+0x2a4>)
 80012c4:	f7ff fc78 	bl	8000bb8 <MCI_GetImposedMotorDirection>
 80012c8:	b2c1      	uxtb	r1, r0
 80012ca:	4854      	ldr	r0, [pc, #336]	; (800141c <TSK_MediumFrequencyTaskM1+0x27c>)
 80012cc:	f005 fa6e 	bl	80067ac <STO_SetDirection>
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 80012d0:	4857      	ldr	r0, [pc, #348]	; (8001430 <TSK_MediumFrequencyTaskM1+0x290>)
 80012d2:	4621      	mov	r1, r4
 80012d4:	f005 fc74 	bl	8006bc0 <VSS_SetStartTransition>
      if ( ObserverConverged )
 80012d8:	2c00      	cmp	r4, #0
 80012da:	d09a      	beq.n	8001212 <TSK_MediumFrequencyTaskM1+0x72>
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80012dc:	484f      	ldr	r0, [pc, #316]	; (800141c <TSK_MediumFrequencyTaskM1+0x27c>)
 80012de:	4d56      	ldr	r5, [pc, #344]	; (8001438 <TSK_MediumFrequencyTaskM1+0x298>)
        REMNG_Init( pREMNG[M1] );
 80012e0:	4c59      	ldr	r4, [pc, #356]	; (8001448 <TSK_MediumFrequencyTaskM1+0x2a8>)
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80012e2:	f004 fdbf 	bl	8005e64 <SPD_GetElAngle>
 80012e6:	4601      	mov	r1, r0
 80012e8:	6868      	ldr	r0, [r5, #4]
 80012ea:	f7ff fd81 	bl	8000df0 <MCM_Park>
 80012ee:	4603      	mov	r3, r0
        REMNG_Init( pREMNG[M1] );
 80012f0:	6820      	ldr	r0, [r4, #0]
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80012f2:	9301      	str	r3, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 80012f4:	f004 fc3e 	bl	8005b74 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 80012f8:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 80012fc:	6820      	ldr	r0, [r4, #0]
 80012fe:	2200      	movs	r2, #0
 8001300:	f004 fc7e 	bl	8005c00 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 8001304:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001308:	6820      	ldr	r0, [r4, #0]
 800130a:	2219      	movs	r2, #25
 800130c:	f004 fc78 	bl	8005c00 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 8001310:	2113      	movs	r1, #19
 8001312:	4844      	ldr	r0, [pc, #272]	; (8001424 <TSK_MediumFrequencyTaskM1+0x284>)
 8001314:	f004 fee6 	bl	80060e4 <STM_NextState>
    break;
 8001318:	e77b      	b.n	8001212 <TSK_MediumFrequencyTaskM1+0x72>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 800131a:	4c49      	ldr	r4, [pc, #292]	; (8001440 <TSK_MediumFrequencyTaskM1+0x2a0>)
 800131c:	493f      	ldr	r1, [pc, #252]	; (800141c <TSK_MediumFrequencyTaskM1+0x27c>)
 800131e:	6820      	ldr	r0, [r4, #0]
 8001320:	f004 fdfa 	bl	8005f18 <STC_SetSpeedSensor>
	  FOC_InitAdditionalMethods(M1);
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff ff03 	bl	8001130 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 800132a:	2000      	movs	r0, #0
 800132c:	f7ff ff02 	bl	8001134 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8001330:	2106      	movs	r1, #6
 8001332:	483c      	ldr	r0, [pc, #240]	; (8001424 <TSK_MediumFrequencyTaskM1+0x284>)
 8001334:	f004 fed6 	bl	80060e4 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001338:	6820      	ldr	r0, [r4, #0]
 800133a:	f004 fea3 	bl	8006084 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 800133e:	4b3f      	ldr	r3, [pc, #252]	; (800143c <TSK_MediumFrequencyTaskM1+0x29c>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	f7ff fbf7 	bl	8000b34 <MCI_ExecBufferedCommands>
    break;
 8001346:	e764      	b.n	8001212 <TSK_MediumFrequencyTaskM1+0x72>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001348:	4b3c      	ldr	r3, [pc, #240]	; (800143c <TSK_MediumFrequencyTaskM1+0x29c>)
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	f7ff fbf2 	bl	8000b34 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff feef 	bl	8001134 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8001356:	2c00      	cmp	r4, #0
 8001358:	f47f af5b 	bne.w	8001212 <TSK_MediumFrequencyTaskM1+0x72>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 800135c:	4622      	mov	r2, r4
 800135e:	2120      	movs	r1, #32
 8001360:	4830      	ldr	r0, [pc, #192]	; (8001424 <TSK_MediumFrequencyTaskM1+0x284>)
 8001362:	f004 fe9d 	bl	80060a0 <STM_FaultProcessing>
 8001366:	e754      	b.n	8001212 <TSK_MediumFrequencyTaskM1+0x72>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001368:	f7ff ff10 	bl	800118c <TSK_StopPermanencyTimeHasElapsedM1>
 800136c:	2800      	cmp	r0, #0
 800136e:	f43f af50 	beq.w	8001212 <TSK_MediumFrequencyTaskM1+0x72>
      STM_NextState( &STM[M1], STOP_IDLE );
 8001372:	2109      	movs	r1, #9
 8001374:	482b      	ldr	r0, [pc, #172]	; (8001424 <TSK_MediumFrequencyTaskM1+0x284>)
 8001376:	f004 feb5 	bl	80060e4 <STM_NextState>
 800137a:	e74a      	b.n	8001212 <TSK_MediumFrequencyTaskM1+0x72>
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 800137c:	4b30      	ldr	r3, [pc, #192]	; (8001440 <TSK_MediumFrequencyTaskM1+0x2a0>)
 800137e:	492c      	ldr	r1, [pc, #176]	; (8001430 <TSK_MediumFrequencyTaskM1+0x290>)
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	f004 fdc9 	bl	8005f18 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 8001386:	482a      	ldr	r0, [pc, #168]	; (8001430 <TSK_MediumFrequencyTaskM1+0x290>)
 8001388:	f005 fb24 	bl	80069d4 <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 800138c:	2100      	movs	r1, #0
 800138e:	4825      	ldr	r0, [pc, #148]	; (8001424 <TSK_MediumFrequencyTaskM1+0x284>)
 8001390:	f004 fea8 	bl	80060e4 <STM_NextState>
}
 8001394:	e73d      	b.n	8001212 <TSK_MediumFrequencyTaskM1+0x72>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001396:	f7ff fee9 	bl	800116c <TSK_ChargeBootCapDelayHasElapsedM1>
 800139a:	2800      	cmp	r0, #0
 800139c:	f43f af39 	beq.w	8001212 <TSK_MediumFrequencyTaskM1+0x72>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <TSK_MediumFrequencyTaskM1+0x288>)
 80013a2:	2100      	movs	r1, #0
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	f003 fe35 	bl	8005014 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80013aa:	2111      	movs	r1, #17
 80013ac:	481d      	ldr	r0, [pc, #116]	; (8001424 <TSK_MediumFrequencyTaskM1+0x284>)
 80013ae:	f004 fe99 	bl	80060e4 <STM_NextState>
 80013b2:	e72e      	b.n	8001212 <TSK_MediumFrequencyTaskM1+0x72>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80013b4:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <TSK_MediumFrequencyTaskM1+0x288>)
 80013b6:	2101      	movs	r1, #1
 80013b8:	6818      	ldr	r0, [r3, #0]
 80013ba:	f003 fe2b 	bl	8005014 <PWMC_CurrentReadingCalibr>
 80013be:	2800      	cmp	r0, #0
 80013c0:	f43f af27 	beq.w	8001212 <TSK_MediumFrequencyTaskM1+0x72>
      STM_NextState( &STM[M1], CLEAR );
 80013c4:	2112      	movs	r1, #18
 80013c6:	4817      	ldr	r0, [pc, #92]	; (8001424 <TSK_MediumFrequencyTaskM1+0x284>)
 80013c8:	f004 fe8c 	bl	80060e4 <STM_NextState>
 80013cc:	e721      	b.n	8001212 <TSK_MediumFrequencyTaskM1+0x72>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80013ce:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <TSK_MediumFrequencyTaskM1+0x2a0>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <TSK_MediumFrequencyTaskM1+0x298>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80013d2:	6810      	ldr	r0, [r2, #0]
 80013d4:	4916      	ldr	r1, [pc, #88]	; (8001430 <TSK_MediumFrequencyTaskM1+0x290>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80013dc:	f004 fd9c 	bl	8005f18 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 80013e0:	480e      	ldr	r0, [pc, #56]	; (800141c <TSK_MediumFrequencyTaskM1+0x27c>)
 80013e2:	f005 f8c3 	bl	800656c <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 80013e6:	480f      	ldr	r0, [pc, #60]	; (8001424 <TSK_MediumFrequencyTaskM1+0x284>)
 80013e8:	2104      	movs	r1, #4
 80013ea:	f004 fe7b 	bl	80060e4 <STM_NextState>
 80013ee:	2800      	cmp	r0, #0
 80013f0:	f43f af0f 	beq.w	8001212 <TSK_MediumFrequencyTaskM1+0x72>
      FOC_Clear( M1 );
 80013f4:	2000      	movs	r0, #0
 80013f6:	f7ff fd5d 	bl	8000eb4 <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <TSK_MediumFrequencyTaskM1+0x288>)
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	f003 ff55 	bl	80052ac <R3_2_SwitchOnPWM>
 8001402:	e706      	b.n	8001212 <TSK_MediumFrequencyTaskM1+0x72>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8001404:	4602      	mov	r2, r0
 8001406:	2110      	movs	r1, #16
 8001408:	4806      	ldr	r0, [pc, #24]	; (8001424 <TSK_MediumFrequencyTaskM1+0x284>)
 800140a:	f004 fe49 	bl	80060a0 <STM_FaultProcessing>
 800140e:	e748      	b.n	80012a2 <TSK_MediumFrequencyTaskM1+0x102>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8001410:	4602      	mov	r2, r0
 8001412:	2110      	movs	r1, #16
 8001414:	4803      	ldr	r0, [pc, #12]	; (8001424 <TSK_MediumFrequencyTaskM1+0x284>)
 8001416:	f004 fe43 	bl	80060a0 <STM_FaultProcessing>
 800141a:	e6fa      	b.n	8001212 <TSK_MediumFrequencyTaskM1+0x72>
 800141c:	200003d0 	.word	0x200003d0
 8001420:	20000920 	.word	0x20000920
 8001424:	20000904 	.word	0x20000904
 8001428:	2000093c 	.word	0x2000093c
 800142c:	20000344 	.word	0x20000344
 8001430:	20000584 	.word	0x20000584
 8001434:	2000092c 	.word	0x2000092c
 8001438:	2000086c 	.word	0x2000086c
 800143c:	20000914 	.word	0x20000914
 8001440:	20000934 	.word	0x20000934
 8001444:	200008e8 	.word	0x200008e8
 8001448:	20000930 	.word	0x20000930

0800144c <MC_Scheduler>:
{
 800144c:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MC_Scheduler+0x48>)
 8001450:	781c      	ldrb	r4, [r3, #0]
 8001452:	2c01      	cmp	r4, #1
 8001454:	d000      	beq.n	8001458 <MC_Scheduler+0xc>
}
 8001456:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8001458:	4d0f      	ldr	r5, [pc, #60]	; (8001498 <MC_Scheduler+0x4c>)
 800145a:	882b      	ldrh	r3, [r5, #0]
 800145c:	b29b      	uxth	r3, r3
 800145e:	b1ab      	cbz	r3, 800148c <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 8001460:	882b      	ldrh	r3, [r5, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	b29b      	uxth	r3, r3
 8001466:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001468:	4a0c      	ldr	r2, [pc, #48]	; (800149c <MC_Scheduler+0x50>)
 800146a:	8813      	ldrh	r3, [r2, #0]
 800146c:	b29b      	uxth	r3, r3
 800146e:	b11b      	cbz	r3, 8001478 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8001470:	8813      	ldrh	r3, [r2, #0]
 8001472:	3b01      	subs	r3, #1
 8001474:	b29b      	uxth	r3, r3
 8001476:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <MC_Scheduler+0x54>)
 800147a:	8813      	ldrh	r3, [r2, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0e9      	beq.n	8001456 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001482:	8813      	ldrh	r3, [r2, #0]
 8001484:	3b01      	subs	r3, #1
 8001486:	b29b      	uxth	r3, r3
 8001488:	8013      	strh	r3, [r2, #0]
}
 800148a:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 800148c:	f7ff fe88 	bl	80011a0 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001490:	802c      	strh	r4, [r5, #0]
 8001492:	e7e9      	b.n	8001468 <MC_Scheduler+0x1c>
 8001494:	2000090a 	.word	0x2000090a
 8001498:	2000090e 	.word	0x2000090e
 800149c:	2000090c 	.word	0x2000090c
 80014a0:	20000910 	.word	0x20000910

080014a4 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80014a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if ( STM[M1].bState == SWITCH_OVER )
 80014a8:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <TSK_HighFrequencyTask+0x14c>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80014aa:	4c52      	ldr	r4, [pc, #328]	; (80015f4 <TSK_HighFrequencyTask+0x150>)
  if ( STM[M1].bState == SWITCH_OVER )
 80014ac:	781b      	ldrb	r3, [r3, #0]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80014ae:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 80014b2:	b088      	sub	sp, #32
  if ( STM[M1].bState == SWITCH_OVER )
 80014b4:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80014b6:	9005      	str	r0, [sp, #20]
  if ( STM[M1].bState == SWITCH_OVER )
 80014b8:	f000 808d 	beq.w	80015d6 <TSK_HighFrequencyTask+0x132>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80014bc:	4b4e      	ldr	r3, [pc, #312]	; (80015f8 <TSK_HighFrequencyTask+0x154>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80014be:	4f4f      	ldr	r7, [pc, #316]	; (80015fc <TSK_HighFrequencyTask+0x158>)
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	f004 fd2b 	bl	8005f1c <STC_GetSpeedSensor>
 80014c6:	4680      	mov	r8, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80014c8:	f004 fccc 	bl	8005e64 <SPD_GetElAngle>
 80014cc:	4605      	mov	r5, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 80014ce:	4640      	mov	r0, r8
 80014d0:	f004 fcd0 	bl	8005e74 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80014d4:	a902      	add	r1, sp, #8
 80014d6:	6838      	ldr	r0, [r7, #0]
 80014d8:	f003 fc66 	bl	8004da8 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 80014dc:	9802      	ldr	r0, [sp, #8]
 80014de:	f7ff fc11 	bl	8000d04 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80014e2:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 80014e4:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80014e6:	f7ff fc83 	bl	8000df0 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80014ea:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80014ee:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80014f0:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 80014f2:	1ac9      	subs	r1, r1, r3
 80014f4:	4b42      	ldr	r3, [pc, #264]	; (8001600 <TSK_HighFrequencyTask+0x15c>)
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	f003 fb82 	bl	8004c00 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80014fc:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8001500:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001504:	1ac9      	subs	r1, r1, r3
 8001506:	4b3f      	ldr	r3, [pc, #252]	; (8001604 <TSK_HighFrequencyTask+0x160>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001508:	4606      	mov	r6, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	f003 fb78 	bl	8004c00 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001510:	4b3d      	ldr	r3, [pc, #244]	; (8001608 <TSK_HighFrequencyTask+0x164>)
 8001512:	f8ad 6004 	strh.w	r6, [sp, #4]
 8001516:	f8ad 0006 	strh.w	r0, [sp, #6]
 800151a:	9901      	ldr	r1, [sp, #4]
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	f003 fa53 	bl	80049c8 <Circle_Limitation>
 8001522:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001524:	4640      	mov	r0, r8
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001526:	9601      	str	r6, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001528:	f004 fca4 	bl	8005e74 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800152c:	4629      	mov	r1, r5
 800152e:	9801      	ldr	r0, [sp, #4]
 8001530:	f7ff fca0 	bl	8000e74 <MCM_Rev_Park>
 8001534:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001536:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001538:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800153a:	f003 fc37 	bl	8004dac <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 800153e:	9b02      	ldr	r3, [sp, #8]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001540:	9a03      	ldr	r2, [sp, #12]
  FOCVars[M1].Iab = Iab;
 8001542:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001544:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 8001546:	9b00      	ldr	r3, [sp, #0]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001548:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 800154a:	f8c4 6016 	str.w	r6, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 800154e:	2901      	cmp	r1, #1
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001550:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001552:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001554:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8001558:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 800155a:	d034      	beq.n	80015c6 <TSK_HighFrequencyTask+0x122>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 800155c:	482b      	ldr	r0, [pc, #172]	; (800160c <TSK_HighFrequencyTask+0x168>)
 800155e:	f004 fc4b 	bl	8005df8 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001562:	492b      	ldr	r1, [pc, #172]	; (8001610 <TSK_HighFrequencyTask+0x16c>)
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8001564:	6862      	ldr	r2, [r4, #4]
 8001566:	9206      	str	r2, [sp, #24]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001568:	4603      	mov	r3, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800156a:	6808      	ldr	r0, [r1, #0]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 800156c:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800156e:	f003 fa23 	bl	80049b8 <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001572:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001574:	4603      	mov	r3, r0
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001576:	4827      	ldr	r0, [pc, #156]	; (8001614 <TSK_HighFrequencyTask+0x170>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001578:	f8ad 301c 	strh.w	r3, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 800157c:	f004 fe3c 	bl	80061f8 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8001580:	4824      	ldr	r0, [pc, #144]	; (8001614 <TSK_HighFrequencyTask+0x170>)
 8001582:	f004 ffc1 	bl	8006508 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 8001586:	b164      	cbz	r4, 80015a2 <TSK_HighFrequencyTask+0xfe>
    hState = STM_GetState(&STM[M1]);
 8001588:	4819      	ldr	r0, [pc, #100]	; (80015f0 <TSK_HighFrequencyTask+0x14c>)
 800158a:	f004 fe21 	bl	80061d0 <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 800158e:	1f03      	subs	r3, r0, #4
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b01      	cmp	r3, #1
 8001594:	d909      	bls.n	80015aa <TSK_HighFrequencyTask+0x106>
 8001596:	2813      	cmp	r0, #19
 8001598:	d007      	beq.n	80015aa <TSK_HighFrequencyTask+0x106>
}
 800159a:	2000      	movs	r0, #0
 800159c:	b008      	add	sp, #32
 800159e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      STO_ResetPLL(&STO_PLL_M1);
 80015a2:	481c      	ldr	r0, [pc, #112]	; (8001614 <TSK_HighFrequencyTask+0x170>)
 80015a4:	f005 f8e6 	bl	8006774 <STO_ResetPLL>
 80015a8:	e7ee      	b.n	8001588 <TSK_HighFrequencyTask+0xe4>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80015aa:	481a      	ldr	r0, [pc, #104]	; (8001614 <TSK_HighFrequencyTask+0x170>)
 80015ac:	f004 fc5a 	bl	8005e64 <SPD_GetElAngle>
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 80015b0:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80015b2:	4603      	mov	r3, r0
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 80015b4:	4818      	ldr	r0, [pc, #96]	; (8001618 <TSK_HighFrequencyTask+0x174>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80015b6:	f8ad 3010 	strh.w	r3, [sp, #16]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 80015ba:	f005 fa1d 	bl	80069f8 <VSS_CalcElAngle>
}
 80015be:	2000      	movs	r0, #0
 80015c0:	b008      	add	sp, #32
 80015c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	4809      	ldr	r0, [pc, #36]	; (80015f0 <TSK_HighFrequencyTask+0x14c>)
 80015ca:	f004 fd69 	bl	80060a0 <STM_FaultProcessing>
}
 80015ce:	2000      	movs	r0, #0
 80015d0:	b008      	add	sp, #32
 80015d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 80015d6:	4d11      	ldr	r5, [pc, #68]	; (800161c <TSK_HighFrequencyTask+0x178>)
 80015d8:	6828      	ldr	r0, [r5, #0]
 80015da:	f004 faf5 	bl	8005bc8 <REMNG_RampCompleted>
 80015de:	2800      	cmp	r0, #0
 80015e0:	f47f af6c 	bne.w	80014bc <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 80015e4:	6828      	ldr	r0, [r5, #0]
 80015e6:	f004 facd 	bl	8005b84 <REMNG_Calc>
 80015ea:	8220      	strh	r0, [r4, #16]
 80015ec:	e766      	b.n	80014bc <TSK_HighFrequencyTask+0x18>
 80015ee:	bf00      	nop
 80015f0:	20000904 	.word	0x20000904
 80015f4:	2000086c 	.word	0x2000086c
 80015f8:	20000934 	.word	0x20000934
 80015fc:	2000093c 	.word	0x2000093c
 8001600:	20000928 	.word	0x20000928
 8001604:	20000924 	.word	0x20000924
 8001608:	2000091c 	.word	0x2000091c
 800160c:	20000344 	.word	0x20000344
 8001610:	20000918 	.word	0x20000918
 8001614:	200003d0 	.word	0x200003d0
 8001618:	20000584 	.word	0x20000584
 800161c:	20000930 	.word	0x20000930

08001620 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001624:	4e20      	ldr	r6, [pc, #128]	; (80016a8 <TSK_SafetyTask_PWMOFF+0x88>)
{
 8001626:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001628:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800162c:	f003 fa96 	bl	8004b5c <NTC_CalcAvTemp>
 8001630:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001632:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001636:	f003 fd17 	bl	8005068 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800163a:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800163e:	4328      	orrs	r0, r5
 8001640:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8001642:	b334      	cbz	r4, 8001692 <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001644:	4f19      	ldr	r7, [pc, #100]	; (80016ac <TSK_SafetyTask_PWMOFF+0x8c>)
 8001646:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800164a:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 800164e:	43ea      	mvns	r2, r5
 8001650:	b292      	uxth	r2, r2
 8001652:	4629      	mov	r1, r5
 8001654:	4638      	mov	r0, r7
 8001656:	f004 fd23 	bl	80060a0 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 800165a:	4638      	mov	r0, r7
 800165c:	f004 fdb8 	bl	80061d0 <STM_GetState>
 8001660:	280a      	cmp	r0, #10
 8001662:	d002      	beq.n	800166a <TSK_SafetyTask_PWMOFF+0x4a>
 8001664:	280b      	cmp	r0, #11
 8001666:	d00e      	beq.n	8001686 <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800166a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800166e:	f003 fccf 	bl	8005010 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001672:	4620      	mov	r0, r4
 8001674:	f7ff fc1e 	bl	8000eb4 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001678:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <TSK_SafetyTask_PWMOFF+0x90>)
 800167a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 800167e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001682:	f003 ba15 	b.w	8004ab0 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001686:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 800168a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800168e:	f003 bcbf 	b.w	8005010 <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <TSK_SafetyTask_PWMOFF+0x94>)
 8001694:	6818      	ldr	r0, [r3, #0]
 8001696:	f004 fa37 	bl	8005b08 <RVBS_CalcAvVbus>
 800169a:	f000 000e 	and.w	r0, r0, #14
 800169e:	4305      	orrs	r5, r0
 80016a0:	e7d0      	b.n	8001644 <TSK_SafetyTask_PWMOFF+0x24>
 80016a2:	bf00      	nop
 80016a4:	20000938 	.word	0x20000938
 80016a8:	2000093c 	.word	0x2000093c
 80016ac:	20000904 	.word	0x20000904
 80016b0:	20000920 	.word	0x20000920
 80016b4:	20000918 	.word	0x20000918

080016b8 <TSK_SafetyTask>:
{
 80016b8:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <TSK_SafetyTask+0x1c>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d000      	beq.n	80016c4 <TSK_SafetyTask+0xc>
}
 80016c2:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80016c4:	2000      	movs	r0, #0
 80016c6:	f7ff ffab 	bl	8001620 <TSK_SafetyTask_PWMOFF>
}
 80016ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 80016ce:	f000 bd7f 	b.w	80021d0 <RCM_ExecUserConv>
 80016d2:	bf00      	nop
 80016d4:	2000090a 	.word	0x2000090a

080016d8 <MC_RunMotorControlTasks>:
{
 80016d8:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MC_RunMotorControlTasks+0x1c>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b903      	cbnz	r3, 80016e2 <MC_RunMotorControlTasks+0xa>
}
 80016e0:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 80016e2:	f7ff feb3 	bl	800144c <MC_Scheduler>
    TSK_SafetyTask();
 80016e6:	f7ff ffe7 	bl	80016b8 <TSK_SafetyTask>
}
 80016ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 80016ee:	f001 b859 	b.w	80027a4 <UI_Scheduler>
 80016f2:	bf00      	nop
 80016f4:	2000090a 	.word	0x2000090a

080016f8 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80016f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <TSK_HardwareFaultTask+0x18>)
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	f003 fe1f 	bl	8005340 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001706:	4803      	ldr	r0, [pc, #12]	; (8001714 <TSK_HardwareFaultTask+0x1c>)
 8001708:	2200      	movs	r2, #0
 800170a:	2180      	movs	r1, #128	; 0x80
 800170c:	f004 bcc8 	b.w	80060a0 <STM_FaultProcessing>
 8001710:	2000093c 	.word	0x2000093c
 8001714:	20000904 	.word	0x20000904

08001718 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001718:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800171a:	4a35      	ldr	r2, [pc, #212]	; (80017f0 <mc_lock_pins+0xd8>)
 800171c:	4b35      	ldr	r3, [pc, #212]	; (80017f4 <mc_lock_pins+0xdc>)
 800171e:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001724:	61d1      	str	r1, [r2, #28]
 8001726:	b08c      	sub	sp, #48	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001728:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800172a:	69d3      	ldr	r3, [r2, #28]
 800172c:	930b      	str	r3, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 800172e:	f44f 7100 	mov.w	r1, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001732:	f44f 3381 	mov.w	r3, #66048	; 0x10200
  (void) temp;
 8001736:	980b      	ldr	r0, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001738:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800173a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800173c:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800173e:	69d3      	ldr	r3, [r2, #28]
 8001740:	930a      	str	r3, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001742:	2140      	movs	r1, #64	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001744:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <mc_lock_pins+0xe0>)
  (void) temp;
 8001746:	980a      	ldr	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001748:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800174a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800174c:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800174e:	69d3      	ldr	r3, [r2, #28]
 8001750:	9309      	str	r3, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001752:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001756:	f44f 6080 	mov.w	r0, #1024	; 0x400
  (void) temp;
 800175a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800175c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800175e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001760:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001762:	69d4      	ldr	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <mc_lock_pins+0xe4>)
  temp = READ_REG(GPIOx->LCKR);
 8001766:	9408      	str	r4, [sp, #32]
  (void) temp;
 8001768:	9d08      	ldr	r5, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800176a:	f44f 3488 	mov.w	r4, #69632	; 0x11000
  WRITE_REG(GPIOx->LCKR, PinMask);
 800176e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001772:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001774:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001776:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001778:	69dc      	ldr	r4, [r3, #28]
 800177a:	9407      	str	r4, [sp, #28]
  (void) temp;
 800177c:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800177e:	f44f 3484 	mov.w	r4, #67584	; 0x10800
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001782:	f44f 6500 	mov.w	r5, #2048	; 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001786:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001788:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800178a:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800178c:	69dc      	ldr	r4, [r3, #28]
 800178e:	9406      	str	r4, [sp, #24]
  (void) temp;
 8001790:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001792:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001794:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001796:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001798:	69d9      	ldr	r1, [r3, #28]
 800179a:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800179c:	2002      	movs	r0, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800179e:	4918      	ldr	r1, [pc, #96]	; (8001800 <mc_lock_pins+0xe8>)
  (void) temp;
 80017a0:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017a2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017a4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017a6:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80017a8:	69d4      	ldr	r4, [r2, #28]
 80017aa:	9404      	str	r4, [sp, #16]
  (void) temp;
 80017ac:	9d04      	ldr	r5, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017ae:	4c15      	ldr	r4, [pc, #84]	; (8001804 <mc_lock_pins+0xec>)
 80017b0:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017b2:	2504      	movs	r5, #4
 80017b4:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017b6:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80017b8:	69dc      	ldr	r4, [r3, #28]
 80017ba:	9403      	str	r4, [sp, #12]
  (void) temp;
 80017bc:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017be:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017c0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017c2:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80017c4:	69d9      	ldr	r1, [r3, #28]
 80017c6:	9102      	str	r1, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017c8:	2001      	movs	r0, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  (void) temp;
 80017ce:	9c02      	ldr	r4, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017d0:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017d2:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017d4:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80017d6:	69d2      	ldr	r2, [r2, #28]
 80017d8:	9201      	str	r2, [sp, #4]
  (void) temp;
 80017da:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017dc:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017de:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017e0:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	9300      	str	r3, [sp, #0]
  (void) temp;
 80017e6:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 80017e8:	b00c      	add	sp, #48	; 0x30
 80017ea:	bc30      	pop	{r4, r5}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40020000 	.word	0x40020000
 80017f4:	00010100 	.word	0x00010100
 80017f8:	00010040 	.word	0x00010040
 80017fc:	40020800 	.word	0x40020800
 8001800:	00010002 	.word	0x00010002
 8001804:	00010004 	.word	0x00010004

08001808 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800180c:	b08e      	sub	sp, #56	; 0x38
 800180e:	4616      	mov	r6, r2
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8001810:	2700      	movs	r7, #0
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001812:	094a      	lsrs	r2, r1, #5
{
 8001814:	460c      	mov	r4, r1
 8001816:	4605      	mov	r5, r0
 8001818:	4698      	mov	r8, r3
  bool bNoError = false; // Default is error
 800181a:	f88d 7011 	strb.w	r7, [sp, #17]
  if (bMotorSelection != 0)
 800181e:	d123      	bne.n	8001868 <MCP_ReceivedFrame+0x60>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8001820:	2912      	cmp	r1, #18
 8001822:	d814      	bhi.n	800184e <MCP_ReceivedFrame+0x46>
 8001824:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001828:	01820016 	.word	0x01820016
 800182c:	017800e3 	.word	0x017800e3
 8001830:	00130013 	.word	0x00130013
 8001834:	00830057 	.word	0x00830057
 8001838:	00c10098 	.word	0x00c10098
 800183c:	01d70222 	.word	0x01d70222
 8001840:	01ee01fe 	.word	0x01ee01fe
 8001844:	00130013 	.word	0x00130013
 8001848:	00130013 	.word	0x00130013
 800184c:	0016      	.short	0x0016
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 800184e:	2301      	movs	r3, #1
 8001850:	f88d 3016 	strb.w	r3, [sp, #22]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001854:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001858:	2301      	movs	r3, #1
 800185a:	f10d 0216 	add.w	r2, sp, #22
 800185e:	21ff      	movs	r1, #255	; 0xff
 8001860:	47a0      	blx	r4
    }
  }
}
 8001862:	b00e      	add	sp, #56	; 0x38
 8001864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8001868:	3a01      	subs	r2, #1
 800186a:	4639      	mov	r1, r7
 800186c:	9203      	str	r2, [sp, #12]
 800186e:	f000 fff9 	bl	8002864 <UI_SetReg>
 8001872:	b300      	cbz	r0, 80018b6 <MCP_ReceivedFrame+0xae>
      if (pHandle->pDAC)
 8001874:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
      Code &= 0x1F; /* Mask: 0001|1111 */
 8001878:	f004 041f 	and.w	r4, r4, #31
      if (pHandle->pDAC)
 800187c:	b118      	cbz	r0, 8001886 <MCP_ReceivedFrame+0x7e>
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 800187e:	9a03      	ldr	r2, [sp, #12]
 8001880:	4639      	mov	r1, r7
 8001882:	f000 ffef 	bl	8002864 <UI_SetReg>
  switch (Code)
 8001886:	2c12      	cmp	r4, #18
 8001888:	f200 8299 	bhi.w	8001dbe <MCP_ReceivedFrame+0x5b6>
 800188c:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001890:	014e008a 	.word	0x014e008a
 8001894:	014400af 	.word	0x014400af
 8001898:	02970297 	.word	0x02970297
 800189c:	004f0023 	.word	0x004f0023
 80018a0:	008d0064 	.word	0x008d0064
 80018a4:	01a301ee 	.word	0x01a301ee
 80018a8:	01ba01ca 	.word	0x01ba01ca
 80018ac:	02970297 	.word	0x02970297
 80018b0:	02970297 	.word	0x02970297
 80018b4:	008a      	.short	0x008a
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80018b6:	230b      	movs	r3, #11
    if (bNoError)
 80018b8:	f89d 0011 	ldrb.w	r0, [sp, #17]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80018bc:	f88d 3016 	strb.w	r3, [sp, #22]
    if (bNoError)
 80018c0:	2800      	cmp	r0, #0
 80018c2:	d0c7      	beq.n	8001854 <MCP_ReceivedFrame+0x4c>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 80018c4:	2300      	movs	r3, #0
 80018c6:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 80018ca:	461a      	mov	r2, r3
 80018cc:	21f0      	movs	r1, #240	; 0xf0
 80018ce:	47a0      	blx	r4
}
 80018d0:	b00e      	add	sp, #56	; 0x38
 80018d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        outBuff[i] = 0;
 80018d6:	ac06      	add	r4, sp, #24
 80018d8:	2100      	movs	r1, #0
 80018da:	2220      	movs	r2, #32
 80018dc:	4620      	mov	r0, r4
 80018de:	f005 f981 	bl	8006be4 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80018e2:	f8d5 c0c0 	ldr.w	ip, [r5, #192]	; 0xc0
 80018e6:	f10d 011a 	add.w	r1, sp, #26
 80018ea:	f10c 33ff 	add.w	r3, ip, #4294967295
 80018ee:	f10c 071c 	add.w	r7, ip, #28
 80018f2:	f1cc 0601 	rsb	r6, ip, #1
 80018f6:	e004      	b.n	8001902 <MCP_ReceivedFrame+0xfa>
 80018f8:	42bb      	cmp	r3, r7
        outBuff[3+i] = pHandle->s_fwVer[i];
 80018fa:	f801 2f01 	strb.w	r2, [r1, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80018fe:	f000 82e1 	beq.w	8001ec4 <MCP_ReceivedFrame+0x6bc>
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001902:	18f0      	adds	r0, r6, r3
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001904:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001908:	2a09      	cmp	r2, #9
 800190a:	d1f5      	bne.n	80018f8 <MCP_ReceivedFrame+0xf0>
      outBuff[0] = pHandle->s_fwVer[i+5];
 800190c:	1d43      	adds	r3, r0, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 800190e:	1dc2      	adds	r2, r0, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001910:	3009      	adds	r0, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001912:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8001916:	f88d 3018 	strb.w	r3, [sp, #24]
      outBuff[1] = pHandle->s_fwVer[i+7];
 800191a:	f81c 3002 	ldrb.w	r3, [ip, r2]
 800191e:	f88d 3019 	strb.w	r3, [sp, #25]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001922:	f81c 3000 	ldrb.w	r3, [ip, r0]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001926:	6b6e      	ldr	r6, [r5, #52]	; 0x34
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001928:	f88d 301a 	strb.w	r3, [sp, #26]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 800192c:	e195      	b.n	8001c5a <MCP_ReceivedFrame+0x452>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800192e:	7872      	ldrb	r2, [r6, #1]
 8001930:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001932:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001934:	78f1      	ldrb	r1, [r6, #3]
 8001936:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800193a:	78b2      	ldrb	r2, [r6, #2]
 800193c:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001940:	7932      	ldrb	r2, [r6, #4]
 8001942:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001946:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 800194a:	b292      	uxth	r2, r2
 800194c:	4628      	mov	r0, r5
 800194e:	f001 f937 	bl	8002bc0 <UI_ExecSpeedRamp>
 8001952:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001956:	e7b3      	b.n	80018c0 <MCP_ReceivedFrame+0xb8>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001958:	f10d 0016 	add.w	r0, sp, #22
 800195c:	7831      	ldrb	r1, [r6, #0]
 800195e:	9000      	str	r0, [sp, #0]
 8001960:	ab05      	add	r3, sp, #20
 8001962:	f10d 0212 	add.w	r2, sp, #18
 8001966:	4628      	mov	r0, r5
 8001968:	f001 f946 	bl	8002bf8 <UI_GetRevupData>
      outBuff[4] = (uint8_t)(FinalTorque);
 800196c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
      outBuff[6] = (uint8_t)(Durationms);
 8001970:	f8bd 1012 	ldrh.w	r1, [sp, #18]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001974:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001978:	6b6c      	ldr	r4, [r5, #52]	; 0x34
      outBuff[0] = (uint8_t)(rpm);
 800197a:	2200      	movs	r2, #0
 800197c:	f360 0207 	bfi	r2, r0, #0, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001980:	1200      	asrs	r0, r0, #8
      outBuff[0] = (uint8_t)(rpm);
 8001982:	f360 220f 	bfi	r2, r0, #8, #8
 8001986:	f361 4217 	bfi	r2, r1, #16, #8
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 800198a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      outBuff[7] = (uint8_t)(Durationms >> 8);
 800198e:	0a09      	lsrs	r1, r1, #8
      outBuff[0] = (uint8_t)(rpm);
 8001990:	f361 621f 	bfi	r2, r1, #24, #8
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001994:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8001996:	e9cd 3206 	strd	r3, r2, [sp, #24]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 800199a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800199c:	2308      	movs	r3, #8
 800199e:	aa06      	add	r2, sp, #24
 80019a0:	21f0      	movs	r1, #240	; 0xf0
 80019a2:	47a0      	blx	r4
    if (bNoError)
 80019a4:	f89d 0011 	ldrb.w	r0, [sp, #17]
 80019a8:	e78a      	b.n	80018c0 <MCP_ReceivedFrame+0xb8>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80019aa:	78b1      	ldrb	r1, [r6, #2]
 80019ac:	7872      	ldrb	r2, [r6, #1]
 80019ae:	78f3      	ldrb	r3, [r6, #3]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80019b0:	7970      	ldrb	r0, [r6, #5]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80019b2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80019b6:	7931      	ldrb	r1, [r6, #4]
 80019b8:	eb02 4203 	add.w	r2, r2, r3, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80019bc:	4bb4      	ldr	r3, [pc, #720]	; (8001c90 <MCP_ReceivedFrame+0x488>)
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80019be:	eb02 6201 	add.w	r2, r2, r1, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80019c2:	fb83 1302 	smull	r1, r3, r3, r2
 80019c6:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
      hDurationms = buffer[7] + (buffer[8] << 8);
 80019ca:	7a31      	ldrb	r1, [r6, #8]
 80019cc:	79f2      	ldrb	r2, [r6, #7]
 80019ce:	eb02 2201 	add.w	r2, r2, r1, lsl #8
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80019d2:	79b1      	ldrb	r1, [r6, #6]
 80019d4:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80019d8:	b200      	sxth	r0, r0
 80019da:	7831      	ldrb	r1, [r6, #0]
 80019dc:	9000      	str	r0, [sp, #0]
 80019de:	b21b      	sxth	r3, r3
 80019e0:	b292      	uxth	r2, r2
 80019e2:	4628      	mov	r0, r5
 80019e4:	f001 f926 	bl	8002c34 <UI_SetRevupData>
 80019e8:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 80019ec:	e768      	b.n	80018c0 <MCP_ReceivedFrame+0xb8>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80019ee:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80019f0:	2303      	movs	r3, #3
 80019f2:	2961      	cmp	r1, #97	; 0x61
 80019f4:	f88d 3016 	strb.w	r3, [sp, #22]
      switch (bRegID)
 80019f8:	f200 814e 	bhi.w	8001c98 <MCP_ReceivedFrame+0x490>
 80019fc:	2945      	cmp	r1, #69	; 0x45
 80019fe:	f200 81c4 	bhi.w	8001d8a <MCP_ReceivedFrame+0x582>
 8001a02:	2941      	cmp	r1, #65	; 0x41
 8001a04:	d8ce      	bhi.n	80019a4 <MCP_ReceivedFrame+0x19c>
 8001a06:	2941      	cmp	r1, #65	; 0x41
 8001a08:	d8cc      	bhi.n	80019a4 <MCP_ReceivedFrame+0x19c>
 8001a0a:	a301      	add	r3, pc, #4	; (adr r3, 8001a10 <MCP_ReceivedFrame+0x208>)
 8001a0c:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8001a10:	08001def 	.word	0x08001def
 8001a14:	08001cf7 	.word	0x08001cf7
 8001a18:	08001def 	.word	0x08001def
 8001a1c:	08001def 	.word	0x08001def
 8001a20:	08001cf7 	.word	0x08001cf7
 8001a24:	08001d9b 	.word	0x08001d9b
 8001a28:	08001d9b 	.word	0x08001d9b
 8001a2c:	08001d9b 	.word	0x08001d9b
 8001a30:	08001d9b 	.word	0x08001d9b
 8001a34:	08001d9b 	.word	0x08001d9b
 8001a38:	08001d9b 	.word	0x08001d9b
 8001a3c:	08001d9b 	.word	0x08001d9b
 8001a40:	08001d9b 	.word	0x08001d9b
 8001a44:	08001d9b 	.word	0x08001d9b
 8001a48:	08001d9b 	.word	0x08001d9b
 8001a4c:	08001d9b 	.word	0x08001d9b
 8001a50:	08001d9b 	.word	0x08001d9b
 8001a54:	08001d9b 	.word	0x08001d9b
 8001a58:	08001d9b 	.word	0x08001d9b
 8001a5c:	08001d9b 	.word	0x08001d9b
 8001a60:	08001d9b 	.word	0x08001d9b
 8001a64:	08001d9b 	.word	0x08001d9b
 8001a68:	08001d9b 	.word	0x08001d9b
 8001a6c:	08001d9b 	.word	0x08001d9b
 8001a70:	08001d9b 	.word	0x08001d9b
 8001a74:	08001d9b 	.word	0x08001d9b
 8001a78:	08001d9b 	.word	0x08001d9b
 8001a7c:	08001d9b 	.word	0x08001d9b
 8001a80:	08001ea1 	.word	0x08001ea1
 8001a84:	08001e79 	.word	0x08001e79
 8001a88:	08001cf7 	.word	0x08001cf7
 8001a8c:	08001d9b 	.word	0x08001d9b
 8001a90:	08001d9b 	.word	0x08001d9b
 8001a94:	08001d9b 	.word	0x08001d9b
 8001a98:	08001def 	.word	0x08001def
 8001a9c:	080019a5 	.word	0x080019a5
 8001aa0:	080019a5 	.word	0x080019a5
 8001aa4:	080019a5 	.word	0x080019a5
 8001aa8:	080019a5 	.word	0x080019a5
 8001aac:	080019a5 	.word	0x080019a5
 8001ab0:	080019a5 	.word	0x080019a5
 8001ab4:	080019a5 	.word	0x080019a5
 8001ab8:	080019a5 	.word	0x080019a5
 8001abc:	080019a5 	.word	0x080019a5
 8001ac0:	080019a5 	.word	0x080019a5
 8001ac4:	080019a5 	.word	0x080019a5
 8001ac8:	080019a5 	.word	0x080019a5
 8001acc:	080019a5 	.word	0x080019a5
 8001ad0:	080019a5 	.word	0x080019a5
 8001ad4:	080019a5 	.word	0x080019a5
 8001ad8:	080019a5 	.word	0x080019a5
 8001adc:	080019a5 	.word	0x080019a5
 8001ae0:	080019a5 	.word	0x080019a5
 8001ae4:	080019a5 	.word	0x080019a5
 8001ae8:	080019a5 	.word	0x080019a5
 8001aec:	080019a5 	.word	0x080019a5
 8001af0:	080019a5 	.word	0x080019a5
 8001af4:	080019a5 	.word	0x080019a5
 8001af8:	080019a5 	.word	0x080019a5
 8001afc:	080019a5 	.word	0x080019a5
 8001b00:	080019a5 	.word	0x080019a5
 8001b04:	080019a5 	.word	0x080019a5
 8001b08:	080019a5 	.word	0x080019a5
 8001b0c:	080019a5 	.word	0x080019a5
 8001b10:	080019a5 	.word	0x080019a5
 8001b14:	08001d9b 	.word	0x08001d9b
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001b18:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001b1a:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001b1c:	f88d 3016 	strb.w	r3, [sp, #22]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001b20:	4628      	mov	r0, r5
 8001b22:	f001 f80f 	bl	8002b44 <UI_ExecCmd>
 8001b26:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001b2a:	e6c9      	b.n	80018c0 <MCP_ReceivedFrame+0xb8>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001b2c:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001b2e:	2305      	movs	r3, #5
 8001b30:	2948      	cmp	r1, #72	; 0x48
 8001b32:	f88d 3016 	strb.w	r3, [sp, #22]
      switch (bRegID)
 8001b36:	f200 80f0 	bhi.w	8001d1a <MCP_ReceivedFrame+0x512>
 8001b3a:	2948      	cmp	r1, #72	; 0x48
 8001b3c:	f200 8105 	bhi.w	8001d4a <MCP_ReceivedFrame+0x542>
 8001b40:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001b44:	0103018b 	.word	0x0103018b
 8001b48:	01700103 	.word	0x01700103
 8001b4c:	01430103 	.word	0x01430103
 8001b50:	01430143 	.word	0x01430143
 8001b54:	01430143 	.word	0x01430143
 8001b58:	01430143 	.word	0x01430143
 8001b5c:	01430143 	.word	0x01430143
 8001b60:	01430143 	.word	0x01430143
 8001b64:	01130113 	.word	0x01130113
 8001b68:	01030103 	.word	0x01030103
 8001b6c:	01430143 	.word	0x01430143
 8001b70:	01430143 	.word	0x01430143
 8001b74:	01030143 	.word	0x01030143
 8001b78:	01030103 	.word	0x01030103
 8001b7c:	01810177 	.word	0x01810177
 8001b80:	01030103 	.word	0x01030103
 8001b84:	01030103 	.word	0x01030103
 8001b88:	01030103 	.word	0x01030103
 8001b8c:	01030103 	.word	0x01030103
 8001b90:	01030103 	.word	0x01030103
 8001b94:	01030103 	.word	0x01030103
 8001b98:	01030103 	.word	0x01030103
 8001b9c:	01030103 	.word	0x01030103
 8001ba0:	01030103 	.word	0x01030103
 8001ba4:	01030103 	.word	0x01030103
 8001ba8:	01030103 	.word	0x01030103
 8001bac:	01030103 	.word	0x01030103
 8001bb0:	01030103 	.word	0x01030103
 8001bb4:	01030103 	.word	0x01030103
 8001bb8:	01030103 	.word	0x01030103
 8001bbc:	01030103 	.word	0x01030103
 8001bc0:	01030103 	.word	0x01030103
 8001bc4:	01430103 	.word	0x01430103
 8001bc8:	01030103 	.word	0x01030103
 8001bcc:	01030103 	.word	0x01030103
 8001bd0:	01130113 	.word	0x01130113
 8001bd4:	0113      	.short	0x0113
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001bd6:	4c2f      	ldr	r4, [pc, #188]	; (8001c94 <MCP_ReceivedFrame+0x48c>)
      stepList.data = buffer;
 8001bd8:	9606      	str	r6, [sp, #24]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001bda:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001bdc:	4621      	mov	r1, r4
 8001bde:	a806      	add	r0, sp, #24
      stepList.len = Size;
 8001be0:	f88d 801c 	strb.w	r8, [sp, #28]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001be4:	f88d 3016 	strb.w	r3, [sp, #22]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001be8:	f001 f84e 	bl	8002c88 <UI_GetMPInfo>
 8001bec:	f88d 0011 	strb.w	r0, [sp, #17]
      if (bNoError)
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	f43f ae2f 	beq.w	8001854 <MCP_ReceivedFrame+0x4c>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001bf6:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8001bf8:	7923      	ldrb	r3, [r4, #4]
 8001bfa:	6822      	ldr	r2, [r4, #0]
 8001bfc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001bfe:	21f0      	movs	r1, #240	; 0xf0
 8001c00:	47b0      	blx	r6
  if (RequireAck)
 8001c02:	e62e      	b.n	8001862 <MCP_ReceivedFrame+0x5a>
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001c04:	7870      	ldrb	r0, [r6, #1]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001c06:	7973      	ldrb	r3, [r6, #5]
 8001c08:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001c0a:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001c0c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001c10:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001c14:	b292      	uxth	r2, r2
 8001c16:	b209      	sxth	r1, r1
 8001c18:	4628      	mov	r0, r5
 8001c1a:	f000 ffe3 	bl	8002be4 <UI_ExecTorqueRamp>
 8001c1e:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001c22:	e64d      	b.n	80018c0 <MCP_ReceivedFrame+0xb8>
 8001c24:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
 8001c28:	ac06      	add	r4, sp, #24
 8001c2a:	3801      	subs	r0, #1
 8001c2c:	4626      	mov	r6, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	e003      	b.n	8001c3a <MCP_ReceivedFrame+0x432>
 8001c32:	2a20      	cmp	r2, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8001c34:	f806 1b01 	strb.w	r1, [r6], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001c38:	d00e      	beq.n	8001c58 <MCP_ReceivedFrame+0x450>
 8001c3a:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8001c3e:	b2d3      	uxtb	r3, r2
 8001c40:	3201      	adds	r2, #1
 8001c42:	2900      	cmp	r1, #0
 8001c44:	d1f5      	bne.n	8001c32 <MCP_ReceivedFrame+0x42a>
        outBuff[i] = 0;
 8001c46:	f103 0238 	add.w	r2, r3, #56	; 0x38
      for (; i < 32; i++)
 8001c4a:	3301      	adds	r3, #1
        outBuff[i] = 0;
 8001c4c:	446a      	add	r2, sp
      for (; i < 32; i++)
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b20      	cmp	r3, #32
        outBuff[i] = 0;
 8001c52:	f802 1c20 	strb.w	r1, [r2, #-32]
      for (; i < 32; i++)
 8001c56:	d1f6      	bne.n	8001c46 <MCP_ReceivedFrame+0x43e>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001c58:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8001c5a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001c5c:	2320      	movs	r3, #32
 8001c5e:	4622      	mov	r2, r4
 8001c60:	21f0      	movs	r1, #240	; 0xf0
 8001c62:	47b0      	blx	r6
      bNoError = true;
 8001c64:	2301      	movs	r3, #1
 8001c66:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001c6a:	e62b      	b.n	80018c4 <MCP_ReceivedFrame+0xbc>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001c6c:	78f3      	ldrb	r3, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001c6e:	7870      	ldrb	r0, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001c70:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001c72:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001c74:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001c78:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001c7c:	b212      	sxth	r2, r2
 8001c7e:	b209      	sxth	r1, r1
 8001c80:	4628      	mov	r0, r5
 8001c82:	f000 fff3 	bl	8002c6c <UI_SetCurrentReferences>
      bNoError = true;
 8001c86:	2301      	movs	r3, #1
 8001c88:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001c8c:	e61a      	b.n	80018c4 <MCP_ReceivedFrame+0xbc>
 8001c8e:	bf00      	nop
 8001c90:	2aaaaaab 	.word	0x2aaaaaab
 8001c94:	20000940 	.word	0x20000940
 8001c98:	060b      	lsls	r3, r1, #24
 8001c9a:	d51f      	bpl.n	8001cdc <MCP_ReceivedFrame+0x4d4>
 8001c9c:	f081 0380 	eor.w	r3, r1, #128	; 0x80
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
 8001ca6:	f63f ae7d 	bhi.w	80019a4 <MCP_ReceivedFrame+0x19c>
 8001caa:	2a08      	cmp	r2, #8
 8001cac:	f63f ae7a 	bhi.w	80019a4 <MCP_ReceivedFrame+0x19c>
 8001cb0:	a301      	add	r3, pc, #4	; (adr r3, 8001cb8 <MCP_ReceivedFrame+0x4b0>)
 8001cb2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001cb6:	bf00      	nop
 8001cb8:	08001def 	.word	0x08001def
 8001cbc:	080019a5 	.word	0x080019a5
 8001cc0:	08001def 	.word	0x08001def
 8001cc4:	08001cf7 	.word	0x08001cf7
 8001cc8:	08001cf7 	.word	0x08001cf7
 8001ccc:	08001cf7 	.word	0x08001cf7
 8001cd0:	08001d9b 	.word	0x08001d9b
 8001cd4:	08001d9b 	.word	0x08001d9b
 8001cd8:	08001d9b 	.word	0x08001d9b
 8001cdc:	2963      	cmp	r1, #99	; 0x63
 8001cde:	f67f ae61 	bls.w	80019a4 <MCP_ReceivedFrame+0x19c>
 8001ce2:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
 8001ce6:	4879      	ldr	r0, [pc, #484]	; (8001ecc <MCP_ReceivedFrame+0x6c4>)
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2201      	movs	r2, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	4018      	ands	r0, r3
 8001cf2:	2800      	cmp	r0, #0
 8001cf4:	d073      	beq.n	8001dde <MCP_ReceivedFrame+0x5d6>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001cf6:	f10d 0211 	add.w	r2, sp, #17
 8001cfa:	4628      	mov	r0, r5
 8001cfc:	f000 ffd8 	bl	8002cb0 <UI_GetReg>
          if ( bNoError == true )
 8001d00:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001d04:	9006      	str	r0, [sp, #24]
          if ( bNoError == true )
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f43f ada4 	beq.w	8001854 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001d0c:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001d10:	2304      	movs	r3, #4
 8001d12:	aa06      	add	r2, sp, #24
 8001d14:	21f0      	movs	r1, #240	; 0xf0
 8001d16:	47a0      	blx	r4
  if (RequireAck)
 8001d18:	e5a3      	b.n	8001862 <MCP_ReceivedFrame+0x5a>
 8001d1a:	2965      	cmp	r1, #101	; 0x65
 8001d1c:	d913      	bls.n	8001d46 <MCP_ReceivedFrame+0x53e>
 8001d1e:	f1a1 0374 	sub.w	r3, r1, #116	; 0x74
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	2a14      	cmp	r2, #20
 8001d26:	d810      	bhi.n	8001d4a <MCP_ReceivedFrame+0x542>
 8001d28:	2b14      	cmp	r3, #20
 8001d2a:	d80e      	bhi.n	8001d4a <MCP_ReceivedFrame+0x542>
 8001d2c:	e8df f003 	tbb	[pc, r3]
 8001d30:	1d1d1d7a 	.word	0x1d1d1d7a
 8001d34:	0d0d1d1d 	.word	0x0d0d1d1d
 8001d38:	0d1d1d0d 	.word	0x0d1d1d0d
 8001d3c:	0d0d0d0d 	.word	0x0d0d0d0d
 8001d40:	4d4d0d0d 	.word	0x4d4d0d0d
 8001d44:	4d          	.byte	0x4d
 8001d45:	00          	.byte	0x00
 8001d46:	294e      	cmp	r1, #78	; 0x4e
 8001d48:	d805      	bhi.n	8001d56 <MCP_ReceivedFrame+0x54e>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001d4a:	2302      	movs	r3, #2
    if (bNoError)
 8001d4c:	f89d 0011 	ldrb.w	r0, [sp, #17]
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001d50:	f88d 3016 	strb.w	r3, [sp, #22]
  if (RequireAck)
 8001d54:	e5b4      	b.n	80018c0 <MCP_ReceivedFrame+0xb8>
 8001d56:	f1a1 024f 	sub.w	r2, r1, #79	; 0x4f
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	4093      	lsls	r3, r2
 8001d60:	4a5b      	ldr	r2, [pc, #364]	; (8001ed0 <MCP_ReceivedFrame+0x6c8>)
 8001d62:	4213      	tst	r3, r2
 8001d64:	d131      	bne.n	8001dca <MCP_ReceivedFrame+0x5c2>
 8001d66:	295b      	cmp	r1, #91	; 0x5b
 8001d68:	d1ef      	bne.n	8001d4a <MCP_ReceivedFrame+0x542>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001d6a:	78b2      	ldrb	r2, [r6, #2]
 8001d6c:	7873      	ldrb	r3, [r6, #1]
 8001d6e:	78f0      	ldrb	r0, [r6, #3]
 8001d70:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001d74:	7932      	ldrb	r2, [r6, #4]
 8001d76:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001d7a:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001d7e:	4628      	mov	r0, r5
 8001d80:	f000 fd70 	bl	8002864 <UI_SetReg>
 8001d84:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001d88:	e59a      	b.n	80018c0 <MCP_ReceivedFrame+0xb8>
 8001d8a:	f1a1 0246 	sub.w	r2, r1, #70	; 0x46
 8001d8e:	4851      	ldr	r0, [pc, #324]	; (8001ed4 <MCP_ReceivedFrame+0x6cc>)
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	2301      	movs	r3, #1
 8001d94:	4093      	lsls	r3, r2
 8001d96:	4203      	tst	r3, r0
 8001d98:	d03b      	beq.n	8001e12 <MCP_ReceivedFrame+0x60a>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001d9a:	f10d 0211 	add.w	r2, sp, #17
 8001d9e:	4628      	mov	r0, r5
 8001da0:	f000 ff86 	bl	8002cb0 <UI_GetReg>
          if ( bNoError == true )
 8001da4:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001da8:	9006      	str	r0, [sp, #24]
          if ( bNoError == true )
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f43f ad52 	beq.w	8001854 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001db0:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001db4:	2302      	movs	r3, #2
 8001db6:	aa06      	add	r2, sp, #24
 8001db8:	21f0      	movs	r1, #240	; 0xf0
 8001dba:	47a0      	blx	r4
  if (RequireAck)
 8001dbc:	e551      	b.n	8001862 <MCP_ReceivedFrame+0x5a>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001dbe:	2301      	movs	r3, #1
    if (bNoError)
 8001dc0:	f89d 0011 	ldrb.w	r0, [sp, #17]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001dc4:	f88d 3016 	strb.w	r3, [sp, #22]
  if (RequireAck)
 8001dc8:	e57a      	b.n	80018c0 <MCP_ReceivedFrame+0xb8>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001dca:	78b2      	ldrb	r2, [r6, #2]
 8001dcc:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001dce:	4628      	mov	r0, r5
 8001dd0:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001dd4:	f000 fd46 	bl	8002864 <UI_SetReg>
 8001dd8:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001ddc:	e570      	b.n	80018c0 <MCP_ReceivedFrame+0xb8>
 8001dde:	f64c 4203 	movw	r2, #52227	; 0xcc03
 8001de2:	4213      	tst	r3, r2
 8001de4:	d1d9      	bne.n	8001d9a <MCP_ReceivedFrame+0x592>
 8001de6:	4a3c      	ldr	r2, [pc, #240]	; (8001ed8 <MCP_ReceivedFrame+0x6d0>)
 8001de8:	4213      	tst	r3, r2
 8001dea:	f43f addb 	beq.w	80019a4 <MCP_ReceivedFrame+0x19c>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001dee:	f10d 0211 	add.w	r2, sp, #17
 8001df2:	4628      	mov	r0, r5
 8001df4:	f000 ff5c 	bl	8002cb0 <UI_GetReg>
           if ( bNoError == true )
 8001df8:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001dfc:	9006      	str	r0, [sp, #24]
           if ( bNoError == true )
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f43f ad28 	beq.w	8001854 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001e04:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001e08:	2301      	movs	r3, #1
 8001e0a:	aa06      	add	r2, sp, #24
 8001e0c:	21f0      	movs	r1, #240	; 0xf0
 8001e0e:	47a0      	blx	r4
  if (RequireAck)
 8001e10:	e527      	b.n	8001862 <MCP_ReceivedFrame+0x5a>
 8001e12:	4a32      	ldr	r2, [pc, #200]	; (8001edc <MCP_ReceivedFrame+0x6d4>)
 8001e14:	4213      	tst	r3, r2
 8001e16:	f47f af6e 	bne.w	8001cf6 <MCP_ReceivedFrame+0x4ee>
 8001e1a:	4a31      	ldr	r2, [pc, #196]	; (8001ee0 <MCP_ReceivedFrame+0x6d8>)
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	2a00      	cmp	r2, #0
 8001e20:	d1e5      	bne.n	8001dee <MCP_ReceivedFrame+0x5e6>
 8001e22:	e5bf      	b.n	80019a4 <MCP_ReceivedFrame+0x19c>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001e24:	7872      	ldrb	r2, [r6, #1]
 8001e26:	4628      	mov	r0, r5
 8001e28:	f000 fd1c 	bl	8002864 <UI_SetReg>
 8001e2c:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001e30:	e546      	b.n	80018c0 <MCP_ReceivedFrame+0xb8>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH0, (MC_Protocol_REG_t)(buffer[1]));
 8001e32:	7872      	ldrb	r2, [r6, #1]
 8001e34:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001e38:	2100      	movs	r1, #0
 8001e3a:	f000 ff2f 	bl	8002c9c <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001e44:	e53e      	b.n	80018c4 <MCP_ReceivedFrame+0xbc>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 8001e46:	7872      	ldrb	r2, [r6, #1]
 8001e48:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	f000 ff25 	bl	8002c9c <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8001e52:	2301      	movs	r3, #1
 8001e54:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001e58:	e534      	b.n	80018c4 <MCP_ReceivedFrame+0xbc>
          int32_t wValue = (int32_t)(buffer[1]);
 8001e5a:	7872      	ldrb	r2, [r6, #1]
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 8001e5c:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001e60:	9203      	str	r2, [sp, #12]
 8001e62:	2100      	movs	r1, #0
 8001e64:	f000 fcfe 	bl	8002864 <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001e68:	9a03      	ldr	r2, [sp, #12]
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	f000 fcf9 	bl	8002864 <UI_SetReg>
 8001e72:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001e76:	e523      	b.n	80018c0 <MCP_ReceivedFrame+0xb8>
          if (pHandle->pDAC)
 8001e78:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	f43f ad91 	beq.w	80019a4 <MCP_ReceivedFrame+0x19c>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8001e82:	2101      	movs	r1, #1
 8001e84:	f000 ff0e 	bl	8002ca4 <UI_GetDAC>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001e88:	2301      	movs	r3, #1
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8001e8a:	f88d 0018 	strb.w	r0, [sp, #24]
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001e8e:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8001e90:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001e92:	aa06      	add	r2, sp, #24
 8001e94:	21f0      	movs	r1, #240	; 0xf0
 8001e96:	47a0      	blx	r4
            bNoError = true;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001e9e:	e511      	b.n	80018c4 <MCP_ReceivedFrame+0xbc>
          if (pHandle->pDAC)
 8001ea0:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	f43f ad7d 	beq.w	80019a4 <MCP_ReceivedFrame+0x19c>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8001eaa:	2100      	movs	r1, #0
 8001eac:	f000 fefa 	bl	8002ca4 <UI_GetDAC>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f88d 3018 	strb.w	r3, [sp, #24]
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001eb6:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001eba:	2301      	movs	r3, #1
 8001ebc:	aa06      	add	r2, sp, #24
 8001ebe:	21f0      	movs	r1, #240	; 0xf0
 8001ec0:	47a0      	blx	r4
  if (RequireAck)
 8001ec2:	e4ce      	b.n	8001862 <MCP_ReceivedFrame+0x5a>
 8001ec4:	2026      	movs	r0, #38	; 0x26
 8001ec6:	2224      	movs	r2, #36	; 0x24
 8001ec8:	2322      	movs	r3, #34	; 0x22
 8001eca:	e522      	b.n	8001912 <MCP_ReceivedFrame+0x10a>
 8001ecc:	0ffe11f0 	.word	0x0ffe11f0
 8001ed0:	006407f1 	.word	0x006407f1
 8001ed4:	0f8ffe78 	.word	0x0f8ffe78
 8001ed8:	0001020c 	.word	0x0001020c
 8001edc:	00200107 	.word	0x00200107
 8001ee0:	00100080 	.word	0x00100080

08001ee4 <MCP_WaitNextFrame>:
{
 8001ee4:	b510      	push	{r4, lr}
 8001ee6:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001ee8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001eea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001eec:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
  pHandle->fFcpReceive(pHandle->pFCP);
 8001ef4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ef6:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 8001ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001efc:	4718      	bx	r3
 8001efe:	bf00      	nop

08001f00 <MCP_Init>:
{
 8001f00:	b570      	push	{r4, r5, r6, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	4604      	mov	r4, r0
 8001f06:	461d      	mov	r5, r3
 8001f08:	9b07      	ldr	r3, [sp, #28]
  pHandle->pDAC = pDAC;
 8001f0a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
{
 8001f0e:	9b08      	ldr	r3, [sp, #32]
  pHandle->s_fwVer = s_fwVer;
 8001f10:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  FCP_SetClient( pFCP, pHandle,
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <MCP_Init+0x3c>)
  pHandle->pFCP = pFCP;
 8001f16:	6321      	str	r1, [r4, #48]	; 0x30
{
 8001f18:	4608      	mov	r0, r1
 8001f1a:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	4a08      	ldr	r2, [pc, #32]	; (8001f40 <MCP_Init+0x40>)
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <MCP_Init+0x44>)
 8001f22:	4621      	mov	r1, r4
 8001f24:	f002 fda6 	bl	8004a74 <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001f28:	9b06      	ldr	r3, [sp, #24]
 8001f2a:	63e3      	str	r3, [r4, #60]	; 0x3c
  pHandle->fFcpReceive = fFcpReceive;
 8001f2c:	e9c4 650d 	strd	r6, r5, [r4, #52]	; 0x34
  MCP_WaitNextFrame(pHandle);
 8001f30:	4620      	mov	r0, r4
 8001f32:	f7ff ffd7 	bl	8001ee4 <MCP_WaitNextFrame>
}
 8001f36:	b002      	add	sp, #8
 8001f38:	bd70      	pop	{r4, r5, r6, pc}
 8001f3a:	bf00      	nop
 8001f3c:	08001f49 	.word	0x08001f49
 8001f40:	08001f51 	.word	0x08001f51
 8001f44:	08001809 	.word	0x08001809

08001f48 <MCP_OnTimeOut>:
{
 8001f48:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8001f4a:	f7ff ffcb 	bl	8001ee4 <MCP_WaitNextFrame>
}
 8001f4e:	bd08      	pop	{r3, pc}

08001f50 <MCP_SentFrame>:
{
 8001f50:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8001f52:	f7ff ffc7 	bl	8001ee4 <MCP_WaitNextFrame>
}
 8001f56:	bd08      	pop	{r3, pc}

08001f58 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001f58:	b530      	push	{r4, r5, lr}
 8001f5a:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001f5c:	f001 fefe 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001f62:	4d0c      	ldr	r5, [pc, #48]	; (8001f94 <MX_MotorControl_Init+0x3c>)
 8001f64:	4c0c      	ldr	r4, [pc, #48]	; (8001f98 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001f66:	fba3 3000 	umull	r3, r0, r3, r0
 8001f6a:	09c0      	lsrs	r0, r0, #7
 8001f6c:	f001 fca8 	bl	80038c0 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8001f70:	4629      	mov	r1, r5
 8001f72:	4620      	mov	r0, r4
 8001f74:	f7fe ffd8 	bl	8000f28 <MCboot>
  mc_lock_pins();
 8001f78:	f7ff fbce 	bl	8001718 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001f7c:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <MX_MotorControl_Init+0x44>)
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	4807      	ldr	r0, [pc, #28]	; (8001fa0 <MX_MotorControl_Init+0x48>)
 8001f82:	462b      	mov	r3, r5
 8001f84:	4622      	mov	r2, r4
 8001f86:	2101      	movs	r1, #1
 8001f88:	f000 fb9c 	bl	80026c4 <UI_TaskInit>
}
 8001f8c:	b003      	add	sp, #12
 8001f8e:	bd30      	pop	{r4, r5, pc}
 8001f90:	10624dd3 	.word	0x10624dd3
 8001f94:	2000094c 	.word	0x2000094c
 8001f98:	20000948 	.word	0x20000948
 8001f9c:	08006ee8 	.word	0x08006ee8
 8001fa0:	200006f8 	.word	0x200006f8

08001fa4 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fa4:	4b6b      	ldr	r3, [pc, #428]	; (8002154 <RCM_RegisterRegConv+0x1b0>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
{
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fac:	2a00      	cmp	r2, #0
 8001fae:	d02f      	beq.n	8002010 <RCM_RegisterRegConv+0x6c>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001fb0:	f890 c004 	ldrb.w	ip, [r0, #4]
 8001fb4:	7910      	ldrb	r0, [r2, #4]
 8001fb6:	4584      	cmp	ip, r0
 8001fb8:	d01d      	beq.n	8001ff6 <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fba:	685c      	ldr	r4, [r3, #4]
 8001fbc:	2c00      	cmp	r4, #0
 8001fbe:	f000 80ac 	beq.w	800211a <RCM_RegisterRegConv+0x176>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001fc2:	7922      	ldrb	r2, [r4, #4]
 8001fc4:	4562      	cmp	r2, ip
  uint8_t handle=255;
 8001fc6:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001fca:	d02b      	beq.n	8002024 <RCM_RegisterRegConv+0x80>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fcc:	689c      	ldr	r4, [r3, #8]
 8001fce:	2c00      	cmp	r4, #0
 8001fd0:	f000 808f 	beq.w	80020f2 <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001fd4:	7922      	ldrb	r2, [r4, #4]
 8001fd6:	4562      	cmp	r2, ip
 8001fd8:	d02a      	beq.n	8002030 <RCM_RegisterRegConv+0x8c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fda:	68dc      	ldr	r4, [r3, #12]
 8001fdc:	2c00      	cmp	r4, #0
 8001fde:	f000 8091 	beq.w	8002104 <RCM_RegisterRegConv+0x160>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001fe2:	7922      	ldrb	r2, [r4, #4]
 8001fe4:	4562      	cmp	r2, ip
 8001fe6:	f000 8092 	beq.w	800210e <RCM_RegisterRegConv+0x16a>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8001fea:	2803      	cmp	r0, #3
 8001fec:	bf88      	it	hi
 8001fee:	20ff      	movhi	r0, #255	; 0xff
 8001ff0:	f240 80a1 	bls.w	8002136 <RCM_RegisterRegConv+0x192>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8001ff4:	bd70      	pop	{r4, r5, r6, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001ff6:	6810      	ldr	r0, [r2, #0]
 8001ff8:	680a      	ldr	r2, [r1, #0]
 8001ffa:	4290      	cmp	r0, r2
 8001ffc:	d01e      	beq.n	800203c <RCM_RegisterRegConv+0x98>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001ffe:	685c      	ldr	r4, [r3, #4]
 8002000:	2c00      	cmp	r4, #0
 8002002:	d1de      	bne.n	8001fc2 <RCM_RegisterRegConv+0x1e>
 8002004:	689c      	ldr	r4, [r3, #8]
 8002006:	2c00      	cmp	r4, #0
 8002008:	f000 809a 	beq.w	8002140 <RCM_RegisterRegConv+0x19c>
      i++;
 800200c:	2001      	movs	r0, #1
 800200e:	e7e1      	b.n	8001fd4 <RCM_RegisterRegConv+0x30>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002010:	685c      	ldr	r4, [r3, #4]
 8002012:	2c00      	cmp	r4, #0
 8002014:	f000 808d 	beq.w	8002132 <RCM_RegisterRegConv+0x18e>
 8002018:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 800201c:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800201e:	7922      	ldrb	r2, [r4, #4]
 8002020:	4562      	cmp	r2, ip
 8002022:	d1d3      	bne.n	8001fcc <RCM_RegisterRegConv+0x28>
 8002024:	6824      	ldr	r4, [r4, #0]
 8002026:	680a      	ldr	r2, [r1, #0]
 8002028:	4294      	cmp	r4, r2
 800202a:	d1cf      	bne.n	8001fcc <RCM_RegisterRegConv+0x28>
      i++;
 800202c:	2001      	movs	r0, #1
 800202e:	e006      	b.n	800203e <RCM_RegisterRegConv+0x9a>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002030:	6824      	ldr	r4, [r4, #0]
 8002032:	680a      	ldr	r2, [r1, #0]
 8002034:	4294      	cmp	r4, r2
 8002036:	d1d0      	bne.n	8001fda <RCM_RegisterRegConv+0x36>
      i++;
 8002038:	2002      	movs	r0, #2
 800203a:	e000      	b.n	800203e <RCM_RegisterRegConv+0x9a>
  uint8_t i=0;
 800203c:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 800203e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002042:	6893      	ldr	r3, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002044:	4c44      	ldr	r4, [pc, #272]	; (8002158 <RCM_RegisterRegConv+0x1b4>)
 8002046:	2500      	movs	r5, #0
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8002048:	07db      	lsls	r3, r3, #31
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800204a:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 800204e:	d411      	bmi.n	8002074 <RCM_RegisterRegConv+0xd0>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8002050:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002052:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8002056:	f023 0320 	bic.w	r3, r3, #32
 800205a:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 800205c:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800205e:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002060:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8002064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002068:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800206a:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800206c:	6893      	ldr	r3, [r2, #8]
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002074:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002076:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800207a:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 800207c:	790b      	ldrb	r3, [r1, #4]
 800207e:	2b09      	cmp	r3, #9
 8002080:	d82d      	bhi.n	80020de <RCM_RegisterRegConv+0x13a>
 8002082:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8002086:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 800208a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800208e:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8002096:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800209a:	fab4 f484 	clz	r4, r4
 800209e:	fa2e fe04 	lsr.w	lr, lr, r4
 80020a2:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 80020a4:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80020a8:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 80020ac:	f04f 7cf8 	mov.w	ip, #32505856	; 0x1f00000
 80020b0:	fa9c f5ac 	rbit	r5, ip
 80020b4:	fab5 f585 	clz	r5, r5
 80020b8:	fa9c fcac 	rbit	ip, ip
 80020bc:	688e      	ldr	r6, [r1, #8]
 80020be:	fabc fc8c 	clz	ip, ip
 80020c2:	fa23 f105 	lsr.w	r1, r3, r5
 80020c6:	fa23 f30c 	lsr.w	r3, r3, ip
 80020ca:	fa06 f503 	lsl.w	r5, r6, r3
 80020ce:	2307      	movs	r3, #7
 80020d0:	408b      	lsls	r3, r1
 80020d2:	ea24 0303 	bic.w	r3, r4, r3
 80020d6:	432b      	orrs	r3, r5
 80020d8:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
}
 80020dc:	bd70      	pop	{r4, r5, r6, pc}
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80020de:	2403      	movs	r4, #3
 80020e0:	f06f 051d 	mvn.w	r5, #29
 80020e4:	fb14 5403 	smlabb	r4, r4, r3, r5
 80020e8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80020ec:	f003 7e00 	and.w	lr, r3, #33554432	; 0x2000000
 80020f0:	e7cf      	b.n	8002092 <RCM_RegisterRegConv+0xee>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80020f2:	2804      	cmp	r0, #4
 80020f4:	d917      	bls.n	8002126 <RCM_RegisterRegConv+0x182>
 80020f6:	68dc      	ldr	r4, [r3, #12]
 80020f8:	b114      	cbz	r4, 8002100 <RCM_RegisterRegConv+0x15c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020fa:	7922      	ldrb	r2, [r4, #4]
 80020fc:	4594      	cmp	ip, r2
 80020fe:	d01c      	beq.n	800213a <RCM_RegisterRegConv+0x196>
 8002100:	680a      	ldr	r2, [r1, #0]
 8002102:	e799      	b.n	8002038 <RCM_RegisterRegConv+0x94>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002104:	2804      	cmp	r0, #4
 8002106:	680a      	ldr	r2, [r1, #0]
 8002108:	d999      	bls.n	800203e <RCM_RegisterRegConv+0x9a>
      i++;
 800210a:	2003      	movs	r0, #3
 800210c:	e797      	b.n	800203e <RCM_RegisterRegConv+0x9a>
 800210e:	680a      	ldr	r2, [r1, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002110:	6824      	ldr	r4, [r4, #0]
 8002112:	4294      	cmp	r4, r2
 8002114:	f47f af69 	bne.w	8001fea <RCM_RegisterRegConv+0x46>
 8002118:	e7f7      	b.n	800210a <RCM_RegisterRegConv+0x166>
      i++;
 800211a:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800211c:	689c      	ldr	r4, [r3, #8]
 800211e:	b11c      	cbz	r4, 8002128 <RCM_RegisterRegConv+0x184>
 8002120:	f891 c004 	ldrb.w	ip, [r1, #4]
 8002124:	e756      	b.n	8001fd4 <RCM_RegisterRegConv+0x30>
 8002126:	4620      	mov	r0, r4
 8002128:	68dc      	ldr	r4, [r3, #12]
 800212a:	b124      	cbz	r4, 8002136 <RCM_RegisterRegConv+0x192>
 800212c:	f891 c004 	ldrb.w	ip, [r1, #4]
 8002130:	e757      	b.n	8001fe2 <RCM_RegisterRegConv+0x3e>
  uint8_t i=0;
 8002132:	4620      	mov	r0, r4
 8002134:	e7f2      	b.n	800211c <RCM_RegisterRegConv+0x178>
 8002136:	680a      	ldr	r2, [r1, #0]
 8002138:	e781      	b.n	800203e <RCM_RegisterRegConv+0x9a>
 800213a:	680a      	ldr	r2, [r1, #0]
      i++;
 800213c:	2002      	movs	r0, #2
 800213e:	e7e7      	b.n	8002110 <RCM_RegisterRegConv+0x16c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002140:	68dc      	ldr	r4, [r3, #12]
 8002142:	2c00      	cmp	r4, #0
 8002144:	f43f af72 	beq.w	800202c <RCM_RegisterRegConv+0x88>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002148:	7920      	ldrb	r0, [r4, #4]
 800214a:	4560      	cmp	r0, ip
      i++;
 800214c:	bf08      	it	eq
 800214e:	2001      	moveq	r0, #1
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002150:	d0de      	beq.n	8002110 <RCM_RegisterRegConv+0x16c>
 8002152:	e76b      	b.n	800202c <RCM_RegisterRegConv+0x88>
 8002154:	20000974 	.word	0x20000974
 8002158:	20000950 	.word	0x20000950

0800215c <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <RCM_ExecRegularConv+0x70>)
 800215e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002162:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	2b09      	cmp	r3, #9
 8002168:	d827      	bhi.n	80021ba <RCM_ExecRegularConv+0x5e>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800216a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800216e:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002172:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002176:	f44f 7140 	mov.w	r1, #768	; 0x300
 800217a:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800217e:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8002182:	fab1 f181 	clz	r1, r1
 8002186:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 800218a:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
 8002196:	f021 011f 	bic.w	r1, r1, #31
 800219a:	4319      	orrs	r1, r3

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 800219c:	0153      	lsls	r3, r2, #5
 800219e:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
 80021a2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80021a6:	2101      	movs	r1, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80021a8:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80021aa:	f8c3 1178 	str.w	r1, [r3, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 80021ae:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 80021b0:	079b      	lsls	r3, r3, #30
 80021b2:	d5fc      	bpl.n	80021ae <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80021b4:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 80021b6:	b280      	uxth	r0, r0
 80021b8:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80021ba:	2103      	movs	r1, #3
 80021bc:	f06f 001d 	mvn.w	r0, #29
 80021c0:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80021c4:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80021c8:	e7d5      	b.n	8002176 <RCM_ExecRegularConv+0x1a>
 80021ca:	bf00      	nop
 80021cc:	20000974 	.word	0x20000974

080021d0 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 80021d0:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 80021d2:	4c0f      	ldr	r4, [pc, #60]	; (8002210 <RCM_ExecUserConv+0x40>)
 80021d4:	7823      	ldrb	r3, [r4, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d000      	beq.n	80021dc <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 80021da:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80021dc:	4d0d      	ldr	r5, [pc, #52]	; (8002214 <RCM_ExecUserConv+0x44>)
 80021de:	7828      	ldrb	r0, [r5, #0]
 80021e0:	f7ff ffbc 	bl	800215c <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80021e4:	f895 c000 	ldrb.w	ip, [r5]
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <RCM_ExecUserConv+0x48>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80021ea:	4a0c      	ldr	r2, [pc, #48]	; (800221c <RCM_ExecUserConv+0x4c>)
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80021ec:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80021f0:	8010      	strh	r0, [r2, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 80021f2:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80021f4:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 80021f6:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80021f8:	2d00      	cmp	r5, #0
 80021fa:	d0ee      	beq.n	80021da <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80021fc:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002200:	4660      	mov	r0, ip
 8002202:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8002204:	2300      	movs	r3, #0
 8002206:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002208:	462b      	mov	r3, r5
}
 800220a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800220e:	4718      	bx	r3
 8002210:	20000971 	.word	0x20000971
 8002214:	20000970 	.word	0x20000970
 8002218:	20000950 	.word	0x20000950
 800221c:	20000972 	.word	0x20000972

08002220 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002220:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_MspInit+0x38>)
 8002224:	2100      	movs	r1, #0
 8002226:	9100      	str	r1, [sp, #0]
 8002228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800222a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800222e:	645a      	str	r2, [r3, #68]	; 0x44
 8002230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002232:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002236:	9200      	str	r2, [sp, #0]
 8002238:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800223a:	9101      	str	r1, [sp, #4]
 800223c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800223e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002242:	641a      	str	r2, [r3, #64]	; 0x40
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800224e:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002250:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002252:	f001 bad7 	b.w	8003804 <HAL_NVIC_SetPriorityGrouping>
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800

0800225c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800225c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800225e:	6803      	ldr	r3, [r0, #0]
 8002260:	4a34      	ldr	r2, [pc, #208]	; (8002334 <HAL_ADC_MspInit+0xd8>)
{
 8002262:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8002266:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800226c:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8002270:	940a      	str	r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 8002272:	d004      	beq.n	800227e <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002274:	4a30      	ldr	r2, [pc, #192]	; (8002338 <HAL_ADC_MspInit+0xdc>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d033      	beq.n	80022e2 <HAL_ADC_MspInit+0x86>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800227a:	b00c      	add	sp, #48	; 0x30
 800227c:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800227e:	4b2f      	ldr	r3, [pc, #188]	; (800233c <HAL_ADC_MspInit+0xe0>)
 8002280:	9400      	str	r4, [sp, #0]
 8002282:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002284:	482e      	ldr	r0, [pc, #184]	; (8002340 <HAL_ADC_MspInit+0xe4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800228a:	645a      	str	r2, [r3, #68]	; 0x44
 800228c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800228e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002292:	9200      	str	r2, [sp, #0]
 8002294:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002296:	9401      	str	r4, [sp, #4]
 8002298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800229a:	f042 0204 	orr.w	r2, r2, #4
 800229e:	631a      	str	r2, [r3, #48]	; 0x30
 80022a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022a2:	f002 0204 	and.w	r2, r2, #4
 80022a6:	9201      	str	r2, [sp, #4]
 80022a8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022aa:	9402      	str	r4, [sp, #8]
 80022ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 80022bc:	2207      	movs	r2, #7
 80022be:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 80022c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c6:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c8:	f001 fb56 	bl	8003978 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 80022cc:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 80022ce:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 80022d0:	481c      	ldr	r0, [pc, #112]	; (8002344 <HAL_ADC_MspInit+0xe8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 80022d4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 80022d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 80022da:	f001 fb4d 	bl	8003978 <HAL_GPIO_Init>
}
 80022de:	b00c      	add	sp, #48	; 0x30
 80022e0:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 80022e2:	4b16      	ldr	r3, [pc, #88]	; (800233c <HAL_ADC_MspInit+0xe0>)
 80022e4:	9403      	str	r4, [sp, #12]
 80022e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e8:	4815      	ldr	r0, [pc, #84]	; (8002340 <HAL_ADC_MspInit+0xe4>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 80022ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ee:	645a      	str	r2, [r3, #68]	; 0x44
 80022f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022f2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80022f6:	9203      	str	r2, [sp, #12]
 80022f8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fa:	9404      	str	r4, [sp, #16]
 80022fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022fe:	f042 0204 	orr.w	r2, r2, #4
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
 8002304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002306:	f002 0204 	and.w	r2, r2, #4
 800230a:	9204      	str	r2, [sp, #16]
 800230c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	9405      	str	r4, [sp, #20]
 8002310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8002320:	2203      	movs	r2, #3
 8002322:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002324:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8002326:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800232c:	f001 fb24 	bl	8003978 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 8002330:	2201      	movs	r2, #1
 8002332:	e7cc      	b.n	80022ce <HAL_ADC_MspInit+0x72>
 8002334:	40012000 	.word	0x40012000
 8002338:	40012100 	.word	0x40012100
 800233c:	40023800 	.word	0x40023800
 8002340:	40020800 	.word	0x40020800
 8002344:	40020000 	.word	0x40020000

08002348 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002348:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 800234a:	4a19      	ldr	r2, [pc, #100]	; (80023b0 <HAL_DAC_MspInit+0x68>)
 800234c:	6801      	ldr	r1, [r0, #0]
{
 800234e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	2300      	movs	r3, #0
  if(hdac->Instance==DAC)
 8002352:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002358:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800235c:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 800235e:	d002      	beq.n	8002366 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002360:	b009      	add	sp, #36	; 0x24
 8002362:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC_CLK_ENABLE();
 8002366:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800236e:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8002372:	6410      	str	r0, [r2, #64]	; 0x40
 8002374:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8002376:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 800237a:	9000      	str	r0, [sp, #0]
 800237c:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(DBG_DAC_CH2_GPIO_Port, &GPIO_InitStruct);
 8002382:	480c      	ldr	r0, [pc, #48]	; (80023b4 <HAL_DAC_MspInit+0x6c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = DBG_DAC_CH2_Pin;
 800238c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 80023a8 <HAL_DAC_MspInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(DBG_DAC_CH2_GPIO_Port, &GPIO_InitStruct);
 8002396:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = DBG_DAC_CH2_Pin;
 8002398:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(DBG_DAC_CH2_GPIO_Port, &GPIO_InitStruct);
 800239e:	f001 faeb 	bl	8003978 <HAL_GPIO_Init>
}
 80023a2:	b009      	add	sp, #36	; 0x24
 80023a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80023a8:	00000020 	.word	0x00000020
 80023ac:	00000003 	.word	0x00000003
 80023b0:	40007400 	.word	0x40007400
 80023b4:	40020000 	.word	0x40020000

080023b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023b8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 80023ba:	4a19      	ldr	r2, [pc, #100]	; (8002420 <HAL_TIM_Base_MspInit+0x68>)
 80023bc:	6801      	ldr	r1, [r0, #0]
{
 80023be:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 80023c2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80023c8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80023cc:	9306      	str	r3, [sp, #24]
  if(htim_base->Instance==TIM1)
 80023ce:	d001      	beq.n	80023d4 <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80023d0:	b008      	add	sp, #32
 80023d2:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023d4:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80023dc:	f040 0001 	orr.w	r0, r0, #1
 80023e0:	6450      	str	r0, [r2, #68]	; 0x44
 80023e2:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80023e4:	f000 0001 	and.w	r0, r0, #1
 80023e8:	9000      	str	r0, [sp, #0]
 80023ea:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80023f0:	480c      	ldr	r0, [pc, #48]	; (8002424 <HAL_TIM_Base_MspInit+0x6c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023f2:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f4:	4323      	orrs	r3, r4
 80023f6:	6313      	str	r3, [r2, #48]	; 0x30
 80023f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023fa:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80023fc:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8002418 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	4023      	ands	r3, r4
 8002402:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002404:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002406:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800240c:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800240e:	f001 fab3 	bl	8003978 <HAL_GPIO_Init>
}
 8002412:	b008      	add	sp, #32
 8002414:	bd10      	pop	{r4, pc}
 8002416:	bf00      	nop
 8002418:	00000040 	.word	0x00000040
 800241c:	00000002 	.word	0x00000002
 8002420:	40010000 	.word	0x40010000
 8002424:	40020000 	.word	0x40020000

08002428 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002428:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800242a:	4a17      	ldr	r2, [pc, #92]	; (8002488 <HAL_TIM_MspPostInit+0x60>)
 800242c:	6801      	ldr	r1, [r0, #0]
{
 800242e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8002432:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002438:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800243c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800243e:	d002      	beq.n	8002446 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002440:	b009      	add	sp, #36	; 0x24
 8002442:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002446:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244e:	480f      	ldr	r0, [pc, #60]	; (800248c <HAL_TIM_MspPostInit+0x64>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002458:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8002480 <HAL_TIM_MspPostInit+0x58>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002462:	2202      	movs	r2, #2
 8002464:	2302      	movs	r3, #2
 8002466:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800246c:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800246e:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002472:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002474:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002476:	f001 fa7f 	bl	8003978 <HAL_GPIO_Init>
}
 800247a:	b009      	add	sp, #36	; 0x24
 800247c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002480:	00000700 	.word	0x00000700
 8002484:	00000002 	.word	0x00000002
 8002488:	40010000 	.word	0x40010000
 800248c:	40020000 	.word	0x40020000

08002490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002490:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8002492:	4a1b      	ldr	r2, [pc, #108]	; (8002500 <HAL_UART_MspInit+0x70>)
 8002494:	6801      	ldr	r1, [r0, #0]
{
 8002496:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 800249a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80024a0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80024a4:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 80024a6:	d002      	beq.n	80024ae <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024a8:	b009      	add	sp, #36	; 0x24
 80024aa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80024ae:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80024b6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80024ba:	6410      	str	r0, [r2, #64]	; 0x40
 80024bc:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80024be:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
 80024c2:	9000      	str	r0, [sp, #0]
 80024c4:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ca:	480e      	ldr	r0, [pc, #56]	; (8002504 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80024d4:	ed9f 7b08 	vldr	d7, [pc, #32]	; 80024f8 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024de:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024e0:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80024e2:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e6:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024e8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ea:	f001 fa45 	bl	8003978 <HAL_GPIO_Init>
}
 80024ee:	b009      	add	sp, #36	; 0x24
 80024f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80024f4:	f3af 8000 	nop.w
 80024f8:	0000000c 	.word	0x0000000c
 80024fc:	00000002 	.word	0x00000002
 8002500:	40004400 	.word	0x40004400
 8002504:	40020000 	.word	0x40020000

08002508 <ADC_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC_IRQHandler(void)
{
 8002508:	b508      	push	{r3, lr}
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <ADC_IRQHandler+0x34>)
 800250c:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 800250e:	0752      	lsls	r2, r2, #29
 8002510:	d509      	bpl.n	8002526 <ADC_IRQHandler+0x1e>
  {
    // Clear Flags
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	f022 020c 	bic.w	r2, r2, #12
 8002518:	601a      	str	r2, [r3, #0]

    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 800251a:	f7fe ffc3 	bl	80014a4 <TSK_HighFrequencyTask>
  }
#endif
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800251e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 8002522:	f000 b961 	b.w	80027e8 <UI_DACUpdate>
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8002526:	4a06      	ldr	r2, [pc, #24]	; (8002540 <ADC_IRQHandler+0x38>)
 8002528:	6813      	ldr	r3, [r2, #0]
 800252a:	f023 030c 	bic.w	r3, r3, #12
 800252e:	6013      	str	r3, [r2, #0]
    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 8002530:	f7fe ffb8 	bl	80014a4 <TSK_HighFrequencyTask>
}
 8002534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 8002538:	f000 b956 	b.w	80027e8 <UI_DACUpdate>
 800253c:	40012000 	.word	0x40012000
 8002540:	40012200 	.word	0x40012200

08002544 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8002544:	4803      	ldr	r0, [pc, #12]	; (8002554 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002546:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002548:	689b      	ldr	r3, [r3, #8]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800254a:	f06f 0201 	mvn.w	r2, #1
 800254e:	611a      	str	r2, [r3, #16]
  R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8002550:	f003 b914 	b.w	800577c <R3_2_TIMx_UP_IRQHandler>
 8002554:	20000288 	.word	0x20000288

08002558 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8002558:	4807      	ldr	r0, [pc, #28]	; (8002578 <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 800255a:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 800255c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800255e:	689b      	ldr	r3, [r3, #8]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	0612      	lsls	r2, r2, #24
 8002564:	d504      	bpl.n	8002570 <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002566:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800256a:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 800256c:	f003 f962 	bl	8005834 <R3_2_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8002570:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8002574:	f7fe bf6a 	b.w	800144c <MC_Scheduler>
 8002578:	20000288 	.word	0x20000288

0800257c <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 800257c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800257e:	4c1f      	ldr	r4, [pc, #124]	; (80025fc <USART2_IRQHandler+0x80>)
 8002580:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	0691      	lsls	r1, r2, #26
{
 8002588:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800258a:	d407      	bmi.n	800259c <USART2_IRQHandler+0x20>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800258c:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800258e:	0612      	lsls	r2, r2, #24
 8002590:	d413      	bmi.n	80025ba <USART2_IRQHandler+0x3e>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002592:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002594:	071b      	lsls	r3, r3, #28
 8002596:	d418      	bmi.n	80025ca <USART2_IRQHandler+0x4e>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8002598:	b002      	add	sp, #8
 800259a:	bd10      	pop	{r4, pc}
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800259c:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 800259e:	4620      	mov	r0, r4
 80025a0:	b2c9      	uxtb	r1, r1
 80025a2:	f004 f99f 	bl	80068e4 <UFCP_RX_IRQ_Handler>
 80025a6:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d021      	beq.n	80025f0 <USART2_IRQHandler+0x74>
    if (retVal == 2)
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d01c      	beq.n	80025ea <USART2_IRQHandler+0x6e>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80025b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	0612      	lsls	r2, r2, #24
 80025b8:	d5eb      	bpl.n	8002592 <USART2_IRQHandler+0x16>
    UFCP_TX_IRQ_Handler(&pUSART);
 80025ba:	4810      	ldr	r0, [pc, #64]	; (80025fc <USART2_IRQHandler+0x80>)
 80025bc:	f004 f8fc 	bl	80067b8 <UFCP_TX_IRQ_Handler>
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80025c0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	071b      	lsls	r3, r3, #28
 80025c8:	d5e6      	bpl.n	8002598 <USART2_IRQHandler+0x1c>
    UFCP_OVR_IRQ_Handler(&pUSART);
 80025ca:	480c      	ldr	r0, [pc, #48]	; (80025fc <USART2_IRQHandler+0x80>)
 80025cc:	f004 f9ee 	bl	80069ac <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80025d0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80025d8:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80025de:	9b01      	ldr	r3, [sp, #4]
}
 80025e0:	b002      	add	sp, #8
 80025e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 80025e6:	f000 b90f 	b.w	8002808 <UI_SerialCommunicationTimeOutStop>
      UI_SerialCommunicationTimeOutStop();
 80025ea:	f000 f90d 	bl	8002808 <UI_SerialCommunicationTimeOutStop>
 80025ee:	e7df      	b.n	80025b0 <USART2_IRQHandler+0x34>
      UI_SerialCommunicationTimeOutStart();
 80025f0:	f000 f910 	bl	8002814 <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80025f4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80025f8:	e7c8      	b.n	800258c <USART2_IRQHandler+0x10>
 80025fa:	bf00      	nop
 80025fc:	200005bc 	.word	0x200005bc

08002600 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002600:	b510      	push	{r4, lr}
 8002602:	b082      	sub	sp, #8
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8002604:	f7ff f878 	bl	80016f8 <TSK_HardwareFaultTask>
 8002608:	4c1b      	ldr	r4, [pc, #108]	; (8002678 <HardFault_Handler+0x78>)

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800260a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	0712      	lsls	r2, r2, #28
 8002612:	d41d      	bmi.n	8002650 <HardFault_Handler+0x50>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002614:	681a      	ldr	r2, [r3, #0]
        UFCP_OVR_IRQ_Handler(&pUSART);
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002616:	0610      	lsls	r0, r2, #24
 8002618:	d40f      	bmi.n	800263a <HardFault_Handler+0x3a>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800261a:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800261c:	0692      	lsls	r2, r2, #26
 800261e:	d5f6      	bpl.n	800260e <HardFault_Handler+0xe>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002620:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8002622:	4620      	mov	r0, r4
 8002624:	b2c9      	uxtb	r1, r1
 8002626:	f004 f95d 	bl	80068e4 <UFCP_RX_IRQ_Handler>
 800262a:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 800262c:	2b01      	cmp	r3, #1
 800262e:	d01f      	beq.n	8002670 <HardFault_Handler+0x70>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8002630:	2b02      	cmp	r3, #2
 8002632:	d1ea      	bne.n	800260a <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 8002634:	f000 f8e8 	bl	8002808 <UI_SerialCommunicationTimeOutStop>
 8002638:	e7e7      	b.n	800260a <HardFault_Handler+0xa>
        UFCP_TX_IRQ_Handler(&pUSART);
 800263a:	4620      	mov	r0, r4
 800263c:	f004 f8bc 	bl	80067b8 <UFCP_TX_IRQ_Handler>
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002640:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	0691      	lsls	r1, r2, #26
 8002648:	d4ea      	bmi.n	8002620 <HardFault_Handler+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800264a:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800264c:	0712      	lsls	r2, r2, #28
 800264e:	d5e1      	bpl.n	8002614 <HardFault_Handler+0x14>
        UFCP_OVR_IRQ_Handler(&pUSART);
 8002650:	4620      	mov	r0, r4
 8002652:	f004 f9ab 	bl	80069ac <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002656:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800265e:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002664:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 8002666:	f000 f8cf 	bl	8002808 <UI_SerialCommunicationTimeOutStop>
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800266a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800266e:	e7d1      	b.n	8002614 <HardFault_Handler+0x14>
          UI_SerialCommunicationTimeOutStart();
 8002670:	f000 f8d0 	bl	8002814 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8002674:	e7c9      	b.n	800260a <HardFault_Handler+0xa>
 8002676:	bf00      	nop
 8002678:	200005bc 	.word	0x200005bc

0800267c <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 800267c:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 800267e:	4c0a      	ldr	r4, [pc, #40]	; (80026a8 <SysTick_Handler+0x2c>)
 8002680:	7823      	ldrb	r3, [r4, #0]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d006      	beq.n	8002694 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8002686:	3301      	adds	r3, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 800268c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002690:	f7ff b822 	b.w	80016d8 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8002694:	f000 fe66 	bl	8003364 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002698:	f001 f92e 	bl	80038f8 <HAL_SYSTICK_IRQHandler>
 800269c:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 800269e:	7023      	strb	r3, [r4, #0]
}
 80026a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80026a4:	f7ff b818 	b.w	80016d8 <MC_RunMotorControlTasks>
 80026a8:	200006fc 	.word	0x200006fc

080026ac <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <EXTI15_10_IRQHandler+0x14>)
 80026ae:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 80026b0:	0492      	lsls	r2, r2, #18
 80026b2:	d400      	bmi.n	80026b6 <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    UI_HandleStartStopButton_cb ();
  }

}
 80026b4:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80026b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026ba:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 80026bc:	f000 b8b0 	b.w	8002820 <UI_HandleStartStopButton_cb>
 80026c0:	40013c00 	.word	0x40013c00

080026c4 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 80026c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pDAC = &DAC_UI_Params;
      pDAC->_Super = UI_Params;
 80026c8:	4d2d      	ldr	r5, [pc, #180]	; (8002780 <UI_TaskInit+0xbc>)
      pDAC = &DAC_UI_Params;
 80026ca:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8002798 <UI_TaskInit+0xd4>
 80026ce:	4e2d      	ldr	r6, [pc, #180]	; (8002784 <UI_TaskInit+0xc0>)
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_I_A );
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );

    pMCP = &MCP_UI_Params;
 80026d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800279c <UI_TaskInit+0xd8>
      pDAC = &DAC_UI_Params;
 80026d4:	f8c6 e000 	str.w	lr, [r6]
{
 80026d8:	b087      	sub	sp, #28
 80026da:	4690      	mov	r8, r2
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 80026dc:	9000      	str	r0, [sp, #0]
{
 80026de:	9a10      	ldr	r2, [sp, #64]	; 0x40
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 80026e0:	9004      	str	r0, [sp, #16]
      pDAC->_Super = UI_Params;
 80026e2:	462c      	mov	r4, r5
{
 80026e4:	460f      	mov	r7, r1
 80026e6:	4699      	mov	r9, r3
 80026e8:	9205      	str	r2, [sp, #20]
      pDAC->_Super = UI_Params;
 80026ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ec:	46f4      	mov	ip, lr
 80026ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80026f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80026f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 8002700:	4670      	mov	r0, lr
 8002702:	464b      	mov	r3, r9
 8002704:	4642      	mov	r2, r8
 8002706:	4639      	mov	r1, r7
 8002708:	f000 f896 	bl	8002838 <UI_Init>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 800270c:	6830      	ldr	r0, [r6, #0]
    pMCP->_Super = UI_Params;

    UFCP_Init( & pUSART );
 800270e:	f8df b090 	ldr.w	fp, [pc, #144]	; 80027a0 <UI_TaskInit+0xdc>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 8002712:	f000 fabb 	bl	8002c8c <UI_DACInit>
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_I_A );
 8002716:	6830      	ldr	r0, [r6, #0]
 8002718:	2223      	movs	r2, #35	; 0x23
 800271a:	2100      	movs	r1, #0
 800271c:	f000 fabe 	bl	8002c9c <UI_SetDAC>
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );
 8002720:	6830      	ldr	r0, [r6, #0]
 8002722:	2224      	movs	r2, #36	; 0x24
 8002724:	2101      	movs	r1, #1
 8002726:	f000 fab9 	bl	8002c9c <UI_SetDAC>
    pMCP = &MCP_UI_Params;
 800272a:	4b17      	ldr	r3, [pc, #92]	; (8002788 <UI_TaskInit+0xc4>)
 800272c:	f8ca 3000 	str.w	r3, [sl]
    pMCP->_Super = UI_Params;
 8002730:	469c      	mov	ip, r3
 8002732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002734:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800273a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800273e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002742:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    UFCP_Init( & pUSART );
 8002746:	4658      	mov	r0, fp
 8002748:	f004 f834 	bl	80067b4 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 800274c:	6833      	ldr	r3, [r6, #0]
 800274e:	9a05      	ldr	r2, [sp, #20]
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <UI_TaskInit+0xc8>)
 8002754:	f8da 0000 	ldr.w	r0, [sl]
 8002758:	9202      	str	r2, [sp, #8]
 800275a:	4659      	mov	r1, fp
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	4a0c      	ldr	r2, [pc, #48]	; (8002790 <UI_TaskInit+0xcc>)
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <UI_TaskInit+0xd0>)
 8002762:	f7ff fbcd 	bl	8001f00 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002766:	9b04      	ldr	r3, [sp, #16]
 8002768:	f8da 0000 	ldr.w	r0, [sl]
 800276c:	9310      	str	r3, [sp, #64]	; 0x40
 800276e:	4642      	mov	r2, r8
 8002770:	464b      	mov	r3, r9
 8002772:	4639      	mov	r1, r7

}
 8002774:	b007      	add	sp, #28
 8002776:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800277a:	f000 b85d 	b.w	8002838 <UI_Init>
 800277e:	bf00      	nop
 8002780:	20000554 	.word	0x20000554
 8002784:	20000a54 	.word	0x20000a54
 8002788:	20000984 	.word	0x20000984
 800278c:	080069cd 	.word	0x080069cd
 8002790:	08006835 	.word	0x08006835
 8002794:	08006815 	.word	0x08006815
 8002798:	200000b4 	.word	0x200000b4
 800279c:	20000a58 	.word	0x20000a58
 80027a0:	200005bc 	.word	0x200005bc

080027a4 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 80027a4:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <UI_Scheduler+0x38>)
 80027a6:	8813      	ldrh	r3, [r2, #0]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	b11b      	cbz	r3, 80027b4 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 80027ac:	8813      	ldrh	r3, [r2, #0]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 80027b4:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <UI_Scheduler+0x3c>)
 80027b6:	8813      	ldrh	r3, [r2, #0]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d903      	bls.n	80027c6 <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 80027be:	8813      	ldrh	r3, [r2, #0]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 80027c6:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <UI_Scheduler+0x40>)
 80027c8:	8813      	ldrh	r3, [r2, #0]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d903      	bls.n	80027d8 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 80027d0:	8813      	ldrh	r3, [r2, #0]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	8013      	strh	r3, [r2, #0]
  }
}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000a52 	.word	0x20000a52
 80027e0:	20000a50 	.word	0x20000a50
 80027e4:	200006fe 	.word	0x200006fe

080027e8 <UI_DACUpdate>:

__weak void UI_DACUpdate(uint8_t bMotorNbr)
{
 80027e8:	b538      	push	{r3, r4, r5, lr}
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 80027ea:	4d06      	ldr	r5, [pc, #24]	; (8002804 <UI_DACUpdate+0x1c>)
{
 80027ec:	4604      	mov	r4, r0
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 80027ee:	6828      	ldr	r0, [r5, #0]
 80027f0:	f000 f834 	bl	800285c <UI_GetSelectedMC>
 80027f4:	42a0      	cmp	r0, r4
 80027f6:	d000      	beq.n	80027fa <UI_DACUpdate+0x12>
  {
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
  }
}
 80027f8:	bd38      	pop	{r3, r4, r5, pc}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 80027fa:	6828      	ldr	r0, [r5, #0]
}
 80027fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 8002800:	f000 ba48 	b.w	8002c94 <UI_DACExec>
 8002804:	20000a54 	.word	0x20000a54

08002808 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002808:	4b01      	ldr	r3, [pc, #4]	; (8002810 <UI_SerialCommunicationTimeOutStop+0x8>)
 800280a:	2200      	movs	r2, #0
 800280c:	801a      	strh	r2, [r3, #0]
}
 800280e:	4770      	bx	lr
 8002810:	20000a50 	.word	0x20000a50

08002814 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002814:	4b01      	ldr	r3, [pc, #4]	; (800281c <UI_SerialCommunicationTimeOutStart+0x8>)
 8002816:	224f      	movs	r2, #79	; 0x4f
 8002818:	801a      	strh	r2, [r3, #0]
}
 800281a:	4770      	bx	lr
 800281c:	20000a50 	.word	0x20000a50

08002820 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002820:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 8002822:	f7fe f93f 	bl	8000aa4 <MC_GetSTMStateMotor1>
 8002826:	b918      	cbnz	r0, 8002830 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002828:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 800282c:	f7fe b92e 	b.w	8000a8c <MC_StartMotor1>
}
 8002830:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8002834:	f7fe b930 	b.w	8000a98 <MC_StopMotor1>

08002838 <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 8002838:	e9c0 2308 	strd	r2, r3, [r0, #32]
  pHandle->bDriveNum = bMCNum;
 800283c:	7701      	strb	r1, [r0, #28]
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 800283e:	9b00      	ldr	r3, [sp, #0]
 8002840:	6283      	str	r3, [r0, #40]	; 0x28
  pHandle->bSelectedDrive = 0u;
 8002842:	2100      	movs	r1, #0
 8002844:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop

0800284c <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 800284c:	7f03      	ldrb	r3, [r0, #28]
 800284e:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002850:	bf86      	itte	hi
 8002852:	f880 102c 	strbhi.w	r1, [r0, #44]	; 0x2c
  bool retVal = true;
 8002856:	2001      	movhi	r0, #1
    retVal = false;
 8002858:	2000      	movls	r0, #0
  }
  return retVal;
}
 800285a:	4770      	bx	lr

0800285c <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 800285c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop

08002864 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002864:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002866:	6a04      	ldr	r4, [r0, #32]
 8002868:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800286c:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 8002870:	4614      	mov	r4, r2
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002872:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
 8002874:	b083      	sub	sp, #12
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002876:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 800287a:	295b      	cmp	r1, #91	; 0x5b
 800287c:	d85d      	bhi.n	800293a <UI_SetReg+0xd6>
 800287e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002882:	011c      	.short	0x011c
 8002884:	005c005c 	.word	0x005c005c
 8002888:	005c010c 	.word	0x005c010c
 800288c:	01000106 	.word	0x01000106
 8002890:	0120012c 	.word	0x0120012c
 8002894:	00b600bc 	.word	0x00b600bc
 8002898:	00ce00da 	.word	0x00ce00da
 800289c:	00c200c8 	.word	0x00c200c8
 80028a0:	00e000fa 	.word	0x00e000fa
 80028a4:	005c009b 	.word	0x005c009b
 80028a8:	0080005c 	.word	0x0080005c
 80028ac:	005c0071 	.word	0x005c0071
 80028b0:	005c005c 	.word	0x005c005c
 80028b4:	005c005c 	.word	0x005c005c
 80028b8:	005c005c 	.word	0x005c005c
 80028bc:	005c005c 	.word	0x005c005c
 80028c0:	005c005c 	.word	0x005c005c
 80028c4:	005c005c 	.word	0x005c005c
 80028c8:	005c005c 	.word	0x005c005c
 80028cc:	005c005c 	.word	0x005c005c
 80028d0:	005c005c 	.word	0x005c005c
 80028d4:	005c005c 	.word	0x005c005c
 80028d8:	005c005c 	.word	0x005c005c
 80028dc:	005c005c 	.word	0x005c005c
 80028e0:	005c005c 	.word	0x005c005c
 80028e4:	005c005c 	.word	0x005c005c
 80028e8:	005c005c 	.word	0x005c005c
 80028ec:	005c005c 	.word	0x005c005c
 80028f0:	005c005c 	.word	0x005c005c
 80028f4:	005c005c 	.word	0x005c005c
 80028f8:	005c005c 	.word	0x005c005c
 80028fc:	005c005c 	.word	0x005c005c
 8002900:	005c005c 	.word	0x005c005c
 8002904:	005c006b 	.word	0x005c006b
 8002908:	005c005c 	.word	0x005c005c
 800290c:	005c005c 	.word	0x005c005c
 8002910:	005c005c 	.word	0x005c005c
 8002914:	005c005c 	.word	0x005c005c
 8002918:	005c005c 	.word	0x005c005c
 800291c:	005c005c 	.word	0x005c005c
 8002920:	005c005c 	.word	0x005c005c
 8002924:	005c005c 	.word	0x005c005c
 8002928:	005c005c 	.word	0x005c005c
 800292c:	005c005c 	.word	0x005c005c
 8002930:	005c005c 	.word	0x005c005c
 8002934:	005c005c 	.word	0x005c005c
 8002938:	005f      	.short	0x005f
 800293a:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 800293c:	b003      	add	sp, #12
 800293e:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002940:	497f      	ldr	r1, [pc, #508]	; (8002b40 <UI_SetReg+0x2dc>)
 8002942:	fb81 3104 	smull	r3, r1, r1, r4
 8002946:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 800294a:	4628      	mov	r0, r5
 800294c:	2200      	movs	r2, #0
 800294e:	b209      	sxth	r1, r1
 8002950:	f7fe f8bc 	bl	8000acc <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002954:	2001      	movs	r0, #1
    break;
 8002956:	e7f1      	b.n	800293c <UI_SetReg+0xd8>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8002958:	4628      	mov	r0, r5
 800295a:	b221      	sxth	r1, r4
 800295c:	f7fe f9be 	bl	8000cdc <MCI_SetIdref>
  bool retVal = true;
 8002960:	2001      	movs	r0, #1
    break;
 8002962:	e7eb      	b.n	800293c <UI_SetReg+0xd8>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002964:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002966:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800296a:	0f19      	lsrs	r1, r3, #28
 800296c:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800296e:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002972:	f000 80d7 	beq.w	8002b24 <UI_SetReg+0x2c0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002976:	2b09      	cmp	r3, #9
 8002978:	f000 80c3 	beq.w	8002b02 <UI_SetReg+0x29e>
  bool retVal = true;
 800297c:	2001      	movs	r0, #1
}
 800297e:	b003      	add	sp, #12
 8002980:	bd30      	pop	{r4, r5, pc}
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002982:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002984:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002988:	0f19      	lsrs	r1, r3, #28
 800298a:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800298c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002990:	f000 80b2 	beq.w	8002af8 <UI_SetReg+0x294>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002994:	2b09      	cmp	r3, #9
 8002996:	d1f1      	bne.n	800297c <UI_SetReg+0x118>
        pSPD = pMCT->pSpeedSensorAux;
 8002998:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 800299a:	2d00      	cmp	r5, #0
 800299c:	d0ee      	beq.n	800297c <UI_SetReg+0x118>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800299e:	aa01      	add	r2, sp, #4
 80029a0:	f10d 0102 	add.w	r1, sp, #2
 80029a4:	4628      	mov	r0, r5
 80029a6:	f003 fec3 	bl	8006730 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 80029aa:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80029ae:	b222      	sxth	r2, r4
 80029b0:	4628      	mov	r0, r5
 80029b2:	f003 fecb 	bl	800674c <STO_SetPLLGains>
    break;
 80029b6:	e7e1      	b.n	800297c <UI_SetReg+0x118>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80029b8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80029ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029be:	0f19      	lsrs	r1, r3, #28
 80029c0:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029c2:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029c6:	f000 8092 	beq.w	8002aee <UI_SetReg+0x28a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029ca:	2b09      	cmp	r3, #9
 80029cc:	d1d6      	bne.n	800297c <UI_SetReg+0x118>
        pSPD = pMCT->pSpeedSensorAux;
 80029ce:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 80029d0:	2d00      	cmp	r5, #0
 80029d2:	d0d3      	beq.n	800297c <UI_SetReg+0x118>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80029d4:	aa01      	add	r2, sp, #4
 80029d6:	f10d 0102 	add.w	r1, sp, #2
 80029da:	4628      	mov	r0, r5
 80029dc:	f003 fe9c 	bl	8006718 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 80029e0:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80029e4:	b222      	sxth	r2, r4
 80029e6:	4628      	mov	r0, r5
 80029e8:	f003 fe9e 	bl	8006728 <STO_PLL_SetObserverGains>
    break;
 80029ec:	e7c6      	b.n	800297c <UI_SetReg+0x118>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 80029ee:	6850      	ldr	r0, [r2, #4]
 80029f0:	b221      	sxth	r1, r4
 80029f2:	f002 f8ef 	bl	8004bd4 <PID_SetKI>
  bool retVal = true;
 80029f6:	2001      	movs	r0, #1
    break;
 80029f8:	e7a0      	b.n	800293c <UI_SetReg+0xd8>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 80029fa:	6850      	ldr	r0, [r2, #4]
 80029fc:	b221      	sxth	r1, r4
 80029fe:	f002 f8e7 	bl	8004bd0 <PID_SetKP>
  bool retVal = true;
 8002a02:	2001      	movs	r0, #1
    break;
 8002a04:	e79a      	b.n	800293c <UI_SetReg+0xd8>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8002a06:	6890      	ldr	r0, [r2, #8]
 8002a08:	b221      	sxth	r1, r4
 8002a0a:	f002 f8e3 	bl	8004bd4 <PID_SetKI>
  bool retVal = true;
 8002a0e:	2001      	movs	r0, #1
    break;
 8002a10:	e794      	b.n	800293c <UI_SetReg+0xd8>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002a12:	6890      	ldr	r0, [r2, #8]
 8002a14:	b221      	sxth	r1, r4
 8002a16:	f002 f8db 	bl	8004bd0 <PID_SetKP>
  bool retVal = true;
 8002a1a:	2001      	movs	r0, #1
    break;
 8002a1c:	e78e      	b.n	800293c <UI_SetReg+0xd8>
      currComp = MCI_GetIqdref(pMCI);
 8002a1e:	4628      	mov	r0, r5
 8002a20:	f7fe f92e 	bl	8000c80 <MCI_GetIqdref>
 8002a24:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8002a26:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002a2a:	4628      	mov	r0, r5
 8002a2c:	9901      	ldr	r1, [sp, #4]
 8002a2e:	f7fe f861 	bl	8000af4 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002a32:	2001      	movs	r0, #1
    break;
 8002a34:	e782      	b.n	800293c <UI_SetReg+0xd8>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002a36:	6850      	ldr	r0, [r2, #4]
 8002a38:	b221      	sxth	r1, r4
 8002a3a:	f002 f8db 	bl	8004bf4 <PID_SetKD>
  bool retVal = true;
 8002a3e:	2001      	movs	r0, #1
    break;
 8002a40:	e77c      	b.n	800293c <UI_SetReg+0xd8>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002a42:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002a44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a48:	0f19      	lsrs	r1, r3, #28
 8002a4a:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a4c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a50:	d049      	beq.n	8002ae6 <UI_SetReg+0x282>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a52:	2b09      	cmp	r3, #9
 8002a54:	d192      	bne.n	800297c <UI_SetReg+0x118>
        pSPD = pMCT->pSpeedSensorAux;
 8002a56:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002a58:	2d00      	cmp	r5, #0
 8002a5a:	d08f      	beq.n	800297c <UI_SetReg+0x118>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002a5c:	aa01      	add	r2, sp, #4
 8002a5e:	f10d 0102 	add.w	r1, sp, #2
 8002a62:	4628      	mov	r0, r5
 8002a64:	f003 fe58 	bl	8006718 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 8002a68:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002a6c:	b221      	sxth	r1, r4
 8002a6e:	4628      	mov	r0, r5
 8002a70:	f003 fe5a 	bl	8006728 <STO_PLL_SetObserverGains>
    break;
 8002a74:	e782      	b.n	800297c <UI_SetReg+0x118>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8002a76:	6890      	ldr	r0, [r2, #8]
 8002a78:	b221      	sxth	r1, r4
 8002a7a:	f002 f8bb 	bl	8004bf4 <PID_SetKD>
  bool retVal = true;
 8002a7e:	2001      	movs	r0, #1
    break;
 8002a80:	e75c      	b.n	800293c <UI_SetReg+0xd8>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002a82:	6810      	ldr	r0, [r2, #0]
 8002a84:	b221      	sxth	r1, r4
 8002a86:	f002 f8a5 	bl	8004bd4 <PID_SetKI>
  bool retVal = true;
 8002a8a:	2001      	movs	r0, #1
    break;
 8002a8c:	e756      	b.n	800293c <UI_SetReg+0xd8>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002a8e:	6810      	ldr	r0, [r2, #0]
 8002a90:	b221      	sxth	r1, r4
 8002a92:	f002 f89d 	bl	8004bd0 <PID_SetKP>
  bool retVal = true;
 8002a96:	2001      	movs	r0, #1
    break;
 8002a98:	e750      	b.n	800293c <UI_SetReg+0xd8>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002a9a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002a9e:	d045      	beq.n	8002b2c <UI_SetReg+0x2c8>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002aa0:	2c01      	cmp	r4, #1
 8002aa2:	f47f af6b 	bne.w	800297c <UI_SetReg+0x118>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	f7fe f8bc 	bl	8000c24 <MCI_GetMecSpeedRefUnit>
 8002aac:	2200      	movs	r2, #0
 8002aae:	4601      	mov	r1, r0
 8002ab0:	4628      	mov	r0, r5
 8002ab2:	f7fe f80b 	bl	8000acc <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	e740      	b.n	800293c <UI_SetReg+0xd8>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002aba:	b2e1      	uxtb	r1, r4
 8002abc:	f7ff fec6 	bl	800284c <UI_SelectMC>
    break;
 8002ac0:	e73c      	b.n	800293c <UI_SetReg+0xd8>
      currComp = MCI_GetIqdref(pMCI);
 8002ac2:	4628      	mov	r0, r5
 8002ac4:	f7fe f8dc 	bl	8000c80 <MCI_GetIqdref>
 8002ac8:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002aca:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002ace:	4628      	mov	r0, r5
 8002ad0:	9901      	ldr	r1, [sp, #4]
 8002ad2:	f7fe f80f 	bl	8000af4 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002ad6:	2001      	movs	r0, #1
    break;
 8002ad8:	e730      	b.n	800293c <UI_SetReg+0xd8>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002ada:	6810      	ldr	r0, [r2, #0]
 8002adc:	b221      	sxth	r1, r4
 8002ade:	f002 f889 	bl	8004bf4 <PID_SetKD>
  bool retVal = true;
 8002ae2:	2001      	movs	r0, #1
    break;
 8002ae4:	e72a      	b.n	800293c <UI_SetReg+0xd8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ae6:	2b09      	cmp	r3, #9
 8002ae8:	d0b5      	beq.n	8002a56 <UI_SetReg+0x1f2>
        pSPD = pMCT->pSpeedSensorMain;
 8002aea:	6995      	ldr	r5, [r2, #24]
 8002aec:	e7b4      	b.n	8002a58 <UI_SetReg+0x1f4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002aee:	2b09      	cmp	r3, #9
 8002af0:	f43f af6d 	beq.w	80029ce <UI_SetReg+0x16a>
        pSPD = pMCT->pSpeedSensorMain;
 8002af4:	6995      	ldr	r5, [r2, #24]
 8002af6:	e76b      	b.n	80029d0 <UI_SetReg+0x16c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002af8:	2b09      	cmp	r3, #9
 8002afa:	f43f af4d 	beq.w	8002998 <UI_SetReg+0x134>
        pSPD = pMCT->pSpeedSensorMain;
 8002afe:	6995      	ldr	r5, [r2, #24]
 8002b00:	e74b      	b.n	800299a <UI_SetReg+0x136>
        pSPD = pMCT->pSpeedSensorAux;
 8002b02:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002b04:	2d00      	cmp	r5, #0
 8002b06:	f43f af39 	beq.w	800297c <UI_SetReg+0x118>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002b0a:	aa01      	add	r2, sp, #4
 8002b0c:	f10d 0102 	add.w	r1, sp, #2
 8002b10:	4628      	mov	r0, r5
 8002b12:	f003 fe0d 	bl	8006730 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 8002b16:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002b1a:	b221      	sxth	r1, r4
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	f003 fe15 	bl	800674c <STO_SetPLLGains>
    break;
 8002b22:	e72b      	b.n	800297c <UI_SetReg+0x118>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b24:	2b09      	cmp	r3, #9
 8002b26:	d0ec      	beq.n	8002b02 <UI_SetReg+0x29e>
        pSPD = pMCT->pSpeedSensorMain;
 8002b28:	6995      	ldr	r5, [r2, #24]
 8002b2a:	e7eb      	b.n	8002b04 <UI_SetReg+0x2a0>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002b2c:	4628      	mov	r0, r5
 8002b2e:	f7fe f8d1 	bl	8000cd4 <MCI_GetTeref>
 8002b32:	4622      	mov	r2, r4
 8002b34:	4601      	mov	r1, r0
 8002b36:	4628      	mov	r0, r5
 8002b38:	f7fd ffd2 	bl	8000ae0 <MCI_ExecTorqueRamp>
  bool retVal = true;
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	e6fd      	b.n	800293c <UI_SetReg+0xd8>
 8002b40:	2aaaaaab 	.word	0x2aaaaaab

08002b44 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8002b44:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002b46:	6a03      	ldr	r3, [r0, #32]
 8002b48:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c

  switch (bCmdID)
 8002b4c:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002b4e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8002b52:	290d      	cmp	r1, #13
 8002b54:	d808      	bhi.n	8002b68 <UI_ExecCmd+0x24>
 8002b56:	e8df f001 	tbb	[pc, r1]
 8002b5a:	1419      	.short	0x1419
 8002b5c:	100e0e09 	.word	0x100e0e09
 8002b60:	0728231e 	.word	0x0728231e
 8002b64:	14070707 	.word	0x14070707
 8002b68:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8002b6a:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f7fe f81d 	bl	8000bac <MCI_GetSTMState>
 8002b72:	2806      	cmp	r0, #6
 8002b74:	d01e      	beq.n	8002bb4 <UI_ExecCmd+0x70>
  bool retVal = true;
 8002b76:	2001      	movs	r0, #1
}
 8002b78:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f7fe f816 	bl	8000bac <MCI_GetSTMState>
 8002b80:	b120      	cbz	r0, 8002b8c <UI_ExecCmd+0x48>
        MCI_StopMotor(pMCI);
 8002b82:	4620      	mov	r0, r4
 8002b84:	f7fd ffca 	bl	8000b1c <MCI_StopMotor>
  bool retVal = true;
 8002b88:	2001      	movs	r0, #1
}
 8002b8a:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7fd ffbb 	bl	8000b08 <MCI_StartMotor>
  bool retVal = true;
 8002b92:	2001      	movs	r0, #1
}
 8002b94:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8002b96:	4620      	mov	r0, r4
 8002b98:	f7fd ffc4 	bl	8000b24 <MCI_FaultAcknowledged>
  bool retVal = true;
 8002b9c:	2001      	movs	r0, #1
}
 8002b9e:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f7fd ffc3 	bl	8000b2c <MCI_EncoderAlign>
  bool retVal = true;
 8002ba6:	2001      	movs	r0, #1
}
 8002ba8:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8002baa:	4620      	mov	r0, r4
 8002bac:	f7fe f8a0 	bl	8000cf0 <MCI_Clear_Iqdref>
  bool retVal = true;
 8002bb0:	2001      	movs	r0, #1
}
 8002bb2:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f7fe f829 	bl	8000c0c <MCI_StopRamp>
  bool retVal = true;
 8002bba:	2001      	movs	r0, #1
}
 8002bbc:	bd10      	pop	{r4, pc}
 8002bbe:	bf00      	nop

08002bc0 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8002bc0:	b508      	push	{r3, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002bc4:	f890 c02c 	ldrb.w	ip, [r0, #44]	; 0x2c
 8002bc8:	6a00      	ldr	r0, [r0, #32]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002bca:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 8002bce:	fb83 c301 	smull	ip, r3, r3, r1
 8002bd2:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002bd6:	b209      	sxth	r1, r1
 8002bd8:	f7fd ff78 	bl	8000acc <MCI_ExecSpeedRamp>
  return true;
}
 8002bdc:	2001      	movs	r0, #1
 8002bde:	bd08      	pop	{r3, pc}
 8002be0:	2aaaaaab 	.word	0x2aaaaaab

08002be4 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8002be4:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002be6:	6a03      	ldr	r3, [r0, #32]
 8002be8:	f890 c02c 	ldrb.w	ip, [r0, #44]	; 0x2c

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8002bec:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8002bf0:	f7fd ff76 	bl	8000ae0 <MCI_ExecTorqueRamp>
  return true;
}
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	bd08      	pop	{r3, pc}

08002bf8 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	4617      	mov	r7, r2
 8002bfc:	461e      	mov	r6, r3
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002bfe:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8002c02:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c08:	695c      	ldr	r4, [r3, #20]
  if (pRevupCtrl)
 8002c0a:	b18c      	cbz	r4, 8002c30 <UI_GetRevupData+0x38>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	460d      	mov	r5, r1
 8002c10:	f003 f90e 	bl	8005e30 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002c14:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002c16:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f003 f90f 	bl	8005e3c <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002c1e:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002c20:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002c22:	4620      	mov	r0, r4
 8002c24:	f003 f912 	bl	8005e4c <RUC_GetPhaseFinalTorque>
 8002c28:	9b06      	ldr	r3, [sp, #24]
 8002c2a:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 8002c2c:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8002c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 8002c30:	4620      	mov	r0, r4
}
 8002c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c34 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8002c34:	b570      	push	{r4, r5, r6, lr}
 8002c36:	461d      	mov	r5, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002c38:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8002c3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002c3e:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002c40:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
{
 8002c44:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002c48:	6958      	ldr	r0, [r3, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002c4a:	9001      	str	r0, [sp, #4]
{
 8002c4c:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002c4e:	f003 f8dd 	bl	8005e0c <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8002c52:	9801      	ldr	r0, [sp, #4]
 8002c54:	462a      	mov	r2, r5
 8002c56:	4621      	mov	r1, r4
 8002c58:	f003 f8de 	bl	8005e18 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002c5c:	9801      	ldr	r0, [sp, #4]
 8002c5e:	4632      	mov	r2, r6
 8002c60:	4621      	mov	r1, r4
 8002c62:	f003 f8df 	bl	8005e24 <RUC_SetPhaseFinalTorque>
  return true;
}
 8002c66:	2001      	movs	r0, #1
 8002c68:	b002      	add	sp, #8
 8002c6a:	bd70      	pop	{r4, r5, r6, pc}

08002c6c <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8002c6c:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c6e:	f890 c02c 	ldrb.w	ip, [r0, #44]	; 0x2c
 8002c72:	6a03      	ldr	r3, [r0, #32]
  qd_t currComp;
  currComp.q = hIqRef;
 8002c74:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8002c78:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002c7c:	9901      	ldr	r1, [sp, #4]
 8002c7e:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
}
 8002c82:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 8002c84:	f7fd bf36 	b.w	8000af4 <MCI_SetCurrentReferences>

08002c88 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002c88:	2000      	movs	r0, #0
 8002c8a:	4770      	bx	lr

08002c8c <UI_DACInit>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
__weak void UI_DACInit(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACInit)
 8002c8c:	6943      	ldr	r3, [r0, #20]
 8002c8e:	b103      	cbz	r3, 8002c92 <UI_DACInit+0x6>
  {
	  pHandle->pFct_DACInit(pHandle);
 8002c90:	4718      	bx	r3
  }
}
 8002c92:	4770      	bx	lr

08002c94 <UI_DACExec>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
void UI_DACExec(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACExec)
 8002c94:	6983      	ldr	r3, [r0, #24]
 8002c96:	b103      	cbz	r3, 8002c9a <UI_DACExec+0x6>
  {
    pHandle->pFct_DACExec(pHandle);
 8002c98:	4718      	bx	r3
  }
}
 8002c9a:	4770      	bx	lr

08002c9c <UI_SetDAC>:
  * @retval none.
  */
void UI_SetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                         MC_Protocol_REG_t bVariable)
{
  if (pHandle->pFctDACSetChannelConfig)
 8002c9c:	6843      	ldr	r3, [r0, #4]
 8002c9e:	b103      	cbz	r3, 8002ca2 <UI_SetDAC+0x6>
  {
	  pHandle->pFctDACSetChannelConfig(pHandle, bChannel, bVariable);
 8002ca0:	4718      	bx	r3
  }
}
 8002ca2:	4770      	bx	lr

08002ca4 <UI_GetDAC>:
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t UI_GetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
  if (pHandle->pFctDACGetChannelConfig)
 8002ca4:	6883      	ldr	r3, [r0, #8]
 8002ca6:	b103      	cbz	r3, 8002caa <UI_GetDAC+0x6>
  {
    retVal = pHandle->pFctDACGetChannelConfig(pHandle, bChannel);
 8002ca8:	4718      	bx	r3
  }
  return retVal;
}
 8002caa:	2089      	movs	r0, #137	; 0x89
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop

08002cb0 <UI_GetReg>:
{
 8002cb0:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002cb2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002cb4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002cb8:	6a05      	ldr	r5, [r0, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002cba:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002cbe:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
{
 8002cc2:	b091      	sub	sp, #68	; 0x44
  if ( success != (bool *) 0 )
 8002cc4:	2a00      	cmp	r2, #0
 8002cc6:	f000 808b 	beq.w	8002de0 <UI_GetReg+0x130>
    *success = true;
 8002cca:	f04f 0c01 	mov.w	ip, #1
 8002cce:	f882 c000 	strb.w	ip, [r2]
  switch (bRegID)
 8002cd2:	2981      	cmp	r1, #129	; 0x81
 8002cd4:	f200 80ff 	bhi.w	8002ed6 <UI_GetReg+0x226>
 8002cd8:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002cdc:	02130219 	.word	0x02130219
 8002ce0:	029b029f 	.word	0x029b029f
 8002ce4:	02900294 	.word	0x02900294
 8002ce8:	02a302a7 	.word	0x02a302a7
 8002cec:	01500105 	.word	0x01500105
 8002cf0:	019c01a0 	.word	0x019c01a0
 8002cf4:	01540100 	.word	0x01540100
 8002cf8:	01a401a8 	.word	0x01a401a8
 8002cfc:	024b0266 	.word	0x024b0266
 8002d00:	00fd00fd 	.word	0x00fd00fd
 8002d04:	022e023c 	.word	0x022e023c
 8002d08:	00fd00fd 	.word	0x00fd00fd
 8002d0c:	022a00fd 	.word	0x022a00fd
 8002d10:	02220226 	.word	0x02220226
 8002d14:	025d021e 	.word	0x025d021e
 8002d18:	010f027f 	.word	0x010f027f
 8002d1c:	00fd010a 	.word	0x00fd010a
 8002d20:	028b01ef 	.word	0x028b01ef
 8002d24:	02610286 	.word	0x02610286
 8002d28:	010f014b 	.word	0x010f014b
 8002d2c:	0105010a 	.word	0x0105010a
 8002d30:	027a0100 	.word	0x027a0100
 8002d34:	01fb0158 	.word	0x01fb0158
 8002d38:	00fd01f6 	.word	0x00fd01f6
 8002d3c:	020000fd 	.word	0x020000fd
 8002d40:	0128013a 	.word	0x0128013a
 8002d44:	01c701db 	.word	0x01c701db
 8002d48:	00fd01b3 	.word	0x00fd01b3
 8002d4c:	00fd00fd 	.word	0x00fd00fd
 8002d50:	00fd00fd 	.word	0x00fd00fd
 8002d54:	01ac00fd 	.word	0x01ac00fd
 8002d58:	011b0122 	.word	0x011b0122
 8002d5c:	01000114 	.word	0x01000114
 8002d60:	01740188 	.word	0x01740188
 8002d64:	00fd00fd 	.word	0x00fd00fd
 8002d68:	00fd00fd 	.word	0x00fd00fd
 8002d6c:	00fd00fd 	.word	0x00fd00fd
 8002d70:	00fd00fd 	.word	0x00fd00fd
 8002d74:	00fd00fd 	.word	0x00fd00fd
 8002d78:	00fd00fd 	.word	0x00fd00fd
 8002d7c:	00fd00fd 	.word	0x00fd00fd
 8002d80:	00fd00fd 	.word	0x00fd00fd
 8002d84:	00fd00fd 	.word	0x00fd00fd
 8002d88:	00fd00fd 	.word	0x00fd00fd
 8002d8c:	00fd00fd 	.word	0x00fd00fd
 8002d90:	016700fd 	.word	0x016700fd
 8002d94:	00fd00fd 	.word	0x00fd00fd
 8002d98:	00fd00fd 	.word	0x00fd00fd
 8002d9c:	00fd00fd 	.word	0x00fd00fd
 8002da0:	00fd00fd 	.word	0x00fd00fd
 8002da4:	00fd00fd 	.word	0x00fd00fd
 8002da8:	00fd00fd 	.word	0x00fd00fd
 8002dac:	00fd00fd 	.word	0x00fd00fd
 8002db0:	00fd00fd 	.word	0x00fd00fd
 8002db4:	00fd00fd 	.word	0x00fd00fd
 8002db8:	015f0163 	.word	0x015f0163
 8002dbc:	00fd015d 	.word	0x00fd015d
 8002dc0:	0278021c 	.word	0x0278021c
 8002dc4:	00fd00fd 	.word	0x00fd00fd
 8002dc8:	00fd00fd 	.word	0x00fd00fd
 8002dcc:	00fd00fd 	.word	0x00fd00fd
 8002dd0:	00fd00fd 	.word	0x00fd00fd
 8002dd4:	00fd00fd 	.word	0x00fd00fd
 8002dd8:	00fd00fd 	.word	0x00fd00fd
 8002ddc:	00fa00fd 	.word	0x00fa00fd
 8002de0:	2973      	cmp	r1, #115	; 0x73
 8002de2:	d875      	bhi.n	8002ed0 <UI_GetReg+0x220>
 8002de4:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002de8:	018d0193 	.word	0x018d0193
 8002dec:	02150219 	.word	0x02150219
 8002df0:	020a020e 	.word	0x020a020e
 8002df4:	021d0221 	.word	0x021d0221
 8002df8:	00ca007f 	.word	0x00ca007f
 8002dfc:	0116011a 	.word	0x0116011a
 8002e00:	00ce007a 	.word	0x00ce007a
 8002e04:	011e0122 	.word	0x011e0122
 8002e08:	01c501e0 	.word	0x01c501e0
 8002e0c:	00740074 	.word	0x00740074
 8002e10:	01a801b6 	.word	0x01a801b6
 8002e14:	00740074 	.word	0x00740074
 8002e18:	01a40074 	.word	0x01a40074
 8002e1c:	019c01a0 	.word	0x019c01a0
 8002e20:	01d70198 	.word	0x01d70198
 8002e24:	008901f9 	.word	0x008901f9
 8002e28:	00740084 	.word	0x00740084
 8002e2c:	02050169 	.word	0x02050169
 8002e30:	01db0200 	.word	0x01db0200
 8002e34:	008900c5 	.word	0x008900c5
 8002e38:	007f0084 	.word	0x007f0084
 8002e3c:	01f4007a 	.word	0x01f4007a
 8002e40:	017500d2 	.word	0x017500d2
 8002e44:	00740170 	.word	0x00740170
 8002e48:	017a0074 	.word	0x017a0074
 8002e4c:	00a200b4 	.word	0x00a200b4
 8002e50:	01410155 	.word	0x01410155
 8002e54:	0074012d 	.word	0x0074012d
 8002e58:	00740074 	.word	0x00740074
 8002e5c:	00740074 	.word	0x00740074
 8002e60:	01260074 	.word	0x01260074
 8002e64:	0095009c 	.word	0x0095009c
 8002e68:	007a008e 	.word	0x007a008e
 8002e6c:	00ee0102 	.word	0x00ee0102
 8002e70:	00740074 	.word	0x00740074
 8002e74:	00740074 	.word	0x00740074
 8002e78:	00740074 	.word	0x00740074
 8002e7c:	00740074 	.word	0x00740074
 8002e80:	00740074 	.word	0x00740074
 8002e84:	00740074 	.word	0x00740074
 8002e88:	00740074 	.word	0x00740074
 8002e8c:	00740074 	.word	0x00740074
 8002e90:	00740074 	.word	0x00740074
 8002e94:	00740074 	.word	0x00740074
 8002e98:	00740074 	.word	0x00740074
 8002e9c:	00e10074 	.word	0x00e10074
 8002ea0:	00740074 	.word	0x00740074
 8002ea4:	00740074 	.word	0x00740074
 8002ea8:	00740074 	.word	0x00740074
 8002eac:	00740074 	.word	0x00740074
 8002eb0:	00740074 	.word	0x00740074
 8002eb4:	00740074 	.word	0x00740074
 8002eb8:	00740074 	.word	0x00740074
 8002ebc:	00740074 	.word	0x00740074
 8002ec0:	00740074 	.word	0x00740074
 8002ec4:	00d900dd 	.word	0x00d900dd
 8002ec8:	007400d7 	.word	0x007400d7
 8002ecc:	01f20196 	.word	0x01f20196
  int32_t bRetVal = 0;
 8002ed0:	2000      	movs	r0, #0
}
 8002ed2:	b011      	add	sp, #68	; 0x44
 8002ed4:	bd30      	pop	{r4, r5, pc}
        *success = false;
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 8002eda:	e7fa      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = MCI_GetIqdref(pMCI).d;
 8002edc:	4628      	mov	r0, r5
 8002ede:	f7fd fecf 	bl	8000c80 <MCI_GetIqdref>
 8002ee2:	1400      	asrs	r0, r0, #16
    break;
 8002ee4:	e7f5      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8002ee6:	4628      	mov	r0, r5
 8002ee8:	f7fd feca 	bl	8000c80 <MCI_GetIqdref>
 8002eec:	b200      	sxth	r0, r0
    break;
 8002eee:	e7f0      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = MCI_GetIqd(pMCI).d;
 8002ef0:	4628      	mov	r0, r5
 8002ef2:	f7fd feb7 	bl	8000c64 <MCI_GetIqd>
 8002ef6:	1400      	asrs	r0, r0, #16
    break;
 8002ef8:	e7eb      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = MCI_GetIqd(pMCI).q;
 8002efa:	4628      	mov	r0, r5
 8002efc:	f7fd feb2 	bl	8000c64 <MCI_GetIqd>
 8002f00:	b200      	sxth	r0, r0
    break;
 8002f02:	e7e6      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8002f04:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002f06:	f003 f8ab 	bl	8006060 <STC_GetMinAppNegativeMecSpeedUnit>
 8002f0a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002f0e:	0040      	lsls	r0, r0, #1
    break;
 8002f10:	e7df      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8002f12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002f14:	f003 f8a2 	bl	800605c <STC_GetMaxAppPositiveMecSpeedUnit>
 8002f18:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002f1c:	0040      	lsls	r0, r0, #1
    break;
 8002f1e:	e7d8      	b.n	8002ed2 <UI_GetReg+0x222>
      if (pHandle->pFctDACGetUserChannelValue)
 8002f20:	6903      	ldr	r3, [r0, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0d4      	beq.n	8002ed0 <UI_GetReg+0x220>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 1);
 8002f26:	2101      	movs	r1, #1
 8002f28:	4798      	blx	r3
 8002f2a:	e7d2      	b.n	8002ed2 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002f2c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f32:	0f1a      	lsrs	r2, r3, #28
 8002f34:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f36:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f3a:	f000 81c6 	beq.w	80032ca <UI_GetReg+0x61a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f3e:	2b09      	cmp	r3, #9
 8002f40:	d1c6      	bne.n	8002ed0 <UI_GetReg+0x220>
        pSPD = pMCT->pSpeedSensorAux;
 8002f42:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8002f44:	2800      	cmp	r0, #0
 8002f46:	d0c3      	beq.n	8002ed0 <UI_GetReg+0x220>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 8002f48:	f003 fbd2 	bl	80066f0 <STO_PLL_GetEstimatedCurrent>
 8002f4c:	b200      	sxth	r0, r0
 8002f4e:	e7c0      	b.n	8002ed2 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002f50:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f56:	0f1a      	lsrs	r2, r3, #28
 8002f58:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f5a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f5e:	f000 8185 	beq.w	800326c <UI_GetReg+0x5bc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f62:	2b09      	cmp	r3, #9
 8002f64:	d1b4      	bne.n	8002ed0 <UI_GetReg+0x220>
        pSPD = pMCT->pSpeedSensorAux;
 8002f66:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	d0b1      	beq.n	8002ed0 <UI_GetReg+0x220>
        bRetVal = SPD_GetS16Speed(pSPD);
 8002f6c:	f002 ffb4 	bl	8005ed8 <SPD_GetS16Speed>
 8002f70:	e7af      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8002f72:	4628      	mov	r0, r5
 8002f74:	f7fd fe68 	bl	8000c48 <MCI_GetIalphabeta>
 8002f78:	1400      	asrs	r0, r0, #16
    break;
 8002f7a:	e7aa      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8002f7c:	6860      	ldr	r0, [r4, #4]
 8002f7e:	f001 fe2b 	bl	8004bd8 <PID_GetKP>
    break;
 8002f82:	e7a6      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8002f84:	68a0      	ldr	r0, [r4, #8]
 8002f86:	f001 fe27 	bl	8004bd8 <PID_GetKP>
    break;
 8002f8a:	e7a2      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = MCI_GetVqd(pMCI).d;
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	f7fd fe85 	bl	8000c9c <MCI_GetVqd>
 8002f92:	1400      	asrs	r0, r0, #16
    break;
 8002f94:	e79d      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)(MC_UID);
 8002f96:	48b4      	ldr	r0, [pc, #720]	; (8003268 <UI_GetReg+0x5b8>)
 8002f98:	e79b      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8002f9a:	6820      	ldr	r0, [r4, #0]
 8002f9c:	f001 fe28 	bl	8004bf0 <PID_GetKIDivisor>
    break;
 8002fa0:	e797      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8002fa2:	6820      	ldr	r0, [r4, #0]
 8002fa4:	f001 fe22 	bl	8004bec <PID_GetKPDivisor>
    break;
 8002fa8:	e793      	b.n	8002ed2 <UI_GetReg+0x222>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002faa:	4628      	mov	r0, r5
 8002fac:	f7fd fe02 	bl	8000bb4 <MCI_GetControlMode>
 8002fb0:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002fb2:	4628      	mov	r0, r5
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002fb4:	f000 8179 	beq.w	80032aa <UI_GetReg+0x5fa>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8002fb8:	f7fd fe34 	bl	8000c24 <MCI_GetMecSpeedRefUnit>
 8002fbc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002fc0:	0040      	lsls	r0, r0, #1
 8002fc2:	e786      	b.n	8002ed2 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002fc4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002fca:	0f1a      	lsrs	r2, r3, #28
 8002fcc:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002fce:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002fd2:	f000 8170 	beq.w	80032b6 <UI_GetReg+0x606>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002fd6:	2b09      	cmp	r3, #9
 8002fd8:	f47f af7a 	bne.w	8002ed0 <UI_GetReg+0x220>
        pSPD = pMCT->pSpeedSensorAux;
 8002fdc:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	f43f af76 	beq.w	8002ed0 <UI_GetReg+0x220>
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8002fe4:	f003 fbce 	bl	8006784 <STO_PLL_GetObservedBemfLevel>
 8002fe8:	1400      	asrs	r0, r0, #16
 8002fea:	e772      	b.n	8002ed2 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002fec:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ff2:	0f1a      	lsrs	r2, r3, #28
 8002ff4:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ff6:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ffa:	f000 8161 	beq.w	80032c0 <UI_GetReg+0x610>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ffe:	2b09      	cmp	r3, #9
 8003000:	f47f af66 	bne.w	8002ed0 <UI_GetReg+0x220>
        pSPD = pMCT->pSpeedSensorAux;
 8003004:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003006:	2800      	cmp	r0, #0
 8003008:	f43f af62 	beq.w	8002ed0 <UI_GetReg+0x220>
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 800300c:	f003 fbb6 	bl	800677c <STO_PLL_GetEstimatedBemfLevel>
 8003010:	1400      	asrs	r0, r0, #16
 8003012:	e75e      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8003014:	6860      	ldr	r0, [r4, #4]
 8003016:	f001 fdef 	bl	8004bf8 <PID_GetKD>
    break;
 800301a:	e75a      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 800301c:	6860      	ldr	r0, [r4, #4]
 800301e:	f001 fddf 	bl	8004be0 <PID_GetKI>
    break;
 8003022:	e756      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8003024:	68a0      	ldr	r0, [r4, #8]
 8003026:	f001 fde7 	bl	8004bf8 <PID_GetKD>
    break;
 800302a:	e752      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 800302c:	68a0      	ldr	r0, [r4, #8]
 800302e:	f001 fdd7 	bl	8004be0 <PID_GetKI>
    break;
 8003032:	e74e      	b.n	8002ed2 <UI_GetReg+0x222>
      if (pHandle->pFctDACGetUserChannelValue)
 8003034:	6903      	ldr	r3, [r0, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	f43f af4a 	beq.w	8002ed0 <UI_GetReg+0x220>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 0);
 800303c:	2100      	movs	r1, #0
 800303e:	4798      	blx	r3
 8003040:	e747      	b.n	8002ed2 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003042:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003048:	0f1a      	lsrs	r2, r3, #28
 800304a:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800304c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003050:	f000 8100 	beq.w	8003254 <UI_GetReg+0x5a4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003054:	2b09      	cmp	r3, #9
 8003056:	f47f af3b 	bne.w	8002ed0 <UI_GetReg+0x220>
        pSPD = pMCT->pSpeedSensorAux;
 800305a:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800305c:	2800      	cmp	r0, #0
 800305e:	f43f af37 	beq.w	8002ed0 <UI_GetReg+0x220>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 8003062:	f003 fb39 	bl	80066d8 <STO_PLL_GetEstimatedBemf>
 8003066:	1400      	asrs	r0, r0, #16
 8003068:	e733      	b.n	8002ed2 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800306a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800306c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003070:	0f1a      	lsrs	r2, r3, #28
 8003072:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003074:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003078:	f000 80f1 	beq.w	800325e <UI_GetReg+0x5ae>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800307c:	2b09      	cmp	r3, #9
 800307e:	f47f af27 	bne.w	8002ed0 <UI_GetReg+0x220>
        pSPD =  pMCT->pSpeedSensorAux;
 8003082:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003084:	2800      	cmp	r0, #0
 8003086:	f43f af23 	beq.w	8002ed0 <UI_GetReg+0x220>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 800308a:	f003 fb25 	bl	80066d8 <STO_PLL_GetEstimatedBemf>
 800308e:	b200      	sxth	r0, r0
 8003090:	e71f      	b.n	8002ed2 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003092:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003098:	0f1a      	lsrs	r2, r3, #28
 800309a:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800309c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030a0:	f000 80c7 	beq.w	8003232 <UI_GetReg+0x582>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030a4:	2b09      	cmp	r3, #9
 80030a6:	f47f af13 	bne.w	8002ed0 <UI_GetReg+0x220>
        pSPD = pMCT->pSpeedSensorAux;
 80030aa:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80030ac:	2800      	cmp	r0, #0
 80030ae:	f43f af0f 	beq.w	8002ed0 <UI_GetReg+0x220>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 80030b2:	f003 fb1d 	bl	80066f0 <STO_PLL_GetEstimatedCurrent>
 80030b6:	1400      	asrs	r0, r0, #16
 80030b8:	e70b      	b.n	8002ed2 <UI_GetReg+0x222>
      if (pMCT->pRevupCtrl)
 80030ba:	6960      	ldr	r0, [r4, #20]
 80030bc:	2800      	cmp	r0, #0
 80030be:	f43f af07 	beq.w	8002ed0 <UI_GetReg+0x220>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 80030c2:	f002 fecb 	bl	8005e5c <RUC_GetNumberOfPhases>
 80030c6:	e704      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 80030c8:	4628      	mov	r0, r5
 80030ca:	f7fd fdf5 	bl	8000cb8 <MCI_GetValphabeta>
 80030ce:	1400      	asrs	r0, r0, #16
    break;
 80030d0:	e6ff      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 80030d2:	4628      	mov	r0, r5
 80030d4:	f7fd fdf0 	bl	8000cb8 <MCI_GetValphabeta>
 80030d8:	b200      	sxth	r0, r0
    break;
 80030da:	e6fa      	b.n	8002ed2 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80030dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80030de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030e2:	0f1a      	lsrs	r2, r3, #28
 80030e4:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030e6:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030ea:	f000 80cc 	beq.w	8003286 <UI_GetReg+0x5d6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030ee:	2b09      	cmp	r3, #9
 80030f0:	f47f aeee 	bne.w	8002ed0 <UI_GetReg+0x220>
        pSPD = pMCT->pSpeedSensorAux;
 80030f4:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80030f6:	2800      	cmp	r0, #0
 80030f8:	f43f aeea 	beq.w	8002ed0 <UI_GetReg+0x220>
        bRetVal = SPD_GetElAngle(pSPD);
 80030fc:	f002 feb2 	bl	8005e64 <SPD_GetElAngle>
 8003100:	e6e7      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003102:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 8003104:	b011      	add	sp, #68	; 0x44
 8003106:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 800310a:	f003 b86f 	b.w	80061ec <STM_GetFaultState>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 800310e:	f7ff fba5 	bl	800285c <UI_GetSelectedMC>
    break;
 8003112:	e6de      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = CTRBDID;
 8003114:	2011      	movs	r0, #17
 8003116:	e6dc      	b.n	8002ed2 <UI_GetReg+0x222>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH0);
 8003118:	2100      	movs	r1, #0
 800311a:	f7ff fdc3 	bl	8002ca4 <UI_GetDAC>
    break;
 800311e:	e6d8      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8003120:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003122:	f001 fcf3 	bl	8004b0c <MPM_GetAvrgElMotorPowerW>
    break;
 8003126:	e6d4      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8003128:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800312a:	f001 fd33 	bl	8004b94 <NTC_GetAvTemp_C>
    break;
 800312e:	e6d0      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8003130:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003132:	f001 fc43 	bl	80049bc <VBS_GetAvBusVoltage_V>
    break;
 8003136:	e6cc      	b.n	8002ed2 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003138:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800313a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800313e:	0f1a      	lsrs	r2, r3, #28
 8003140:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003142:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003146:	f000 8081 	beq.w	800324c <UI_GetReg+0x59c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800314a:	2b09      	cmp	r3, #9
 800314c:	d076      	beq.n	800323c <UI_GetReg+0x58c>
      bRetVal = (int32_t)hPgain;
 800314e:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
    break;
 8003152:	e6be      	b.n	8002ed2 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003154:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800315a:	0f1a      	lsrs	r2, r3, #28
 800315c:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800315e:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003162:	f000 809e 	beq.w	80032a2 <UI_GetReg+0x5f2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003166:	2b09      	cmp	r3, #9
 8003168:	f000 8092 	beq.w	8003290 <UI_GetReg+0x5e0>
      bRetVal = (int32_t)hIgain;
 800316c:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
    break;
 8003170:	e6af      	b.n	8002ed2 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003172:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003178:	0f1a      	lsrs	r2, r3, #28
 800317a:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800317c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003180:	d079      	beq.n	8003276 <UI_GetReg+0x5c6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003182:	2b09      	cmp	r3, #9
 8003184:	d1f2      	bne.n	800316c <UI_GetReg+0x4bc>
        pSPD = pMCT->pSpeedSensorAux;
 8003186:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003188:	2800      	cmp	r0, #0
 800318a:	d0ef      	beq.n	800316c <UI_GetReg+0x4bc>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 800318c:	aa0f      	add	r2, sp, #60	; 0x3c
 800318e:	a90e      	add	r1, sp, #56	; 0x38
 8003190:	f003 fac2 	bl	8006718 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC2;
 8003194:	e7ea      	b.n	800316c <UI_GetReg+0x4bc>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH1);
 8003196:	2101      	movs	r1, #1
 8003198:	f7ff fd84 	bl	8002ca4 <UI_GetDAC>
    break;
 800319c:	e699      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 800319e:	4628      	mov	r0, r5
 80031a0:	f7fd fd52 	bl	8000c48 <MCI_GetIalphabeta>
 80031a4:	b200      	sxth	r0, r0
    break;
 80031a6:	e694      	b.n	8002ed2 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80031a8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80031aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031ae:	0f1a      	lsrs	r2, r3, #28
 80031b0:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031b2:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031b6:	d062      	beq.n	800327e <UI_GetReg+0x5ce>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031b8:	2b09      	cmp	r3, #9
 80031ba:	d1c8      	bne.n	800314e <UI_GetReg+0x49e>
        pSPD = pMCT->pSpeedSensorAux;
 80031bc:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80031be:	2800      	cmp	r0, #0
 80031c0:	d0c5      	beq.n	800314e <UI_GetReg+0x49e>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80031c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80031c4:	a90e      	add	r1, sp, #56	; 0x38
 80031c6:	f003 faa7 	bl	8006718 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC1;
 80031ca:	e7c0      	b.n	800314e <UI_GetReg+0x49e>
      bRetVal = PWBDID;
 80031cc:	2002      	movs	r0, #2
 80031ce:	e680      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = MCI_GetVqd(pMCI).q;
 80031d0:	4628      	mov	r0, r5
 80031d2:	f7fd fd63 	bl	8000c9c <MCI_GetVqd>
 80031d6:	b200      	sxth	r0, r0
    break;
 80031d8:	e67b      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 80031da:	4628      	mov	r0, r5
 80031dc:	f7fd fd1a 	bl	8000c14 <MCI_GetAvrgMecSpeedUnit>
 80031e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80031e4:	0040      	lsls	r0, r0, #1
    break;
 80031e6:	e674      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = MCI_GetIab(pMCI).b;
 80031e8:	4628      	mov	r0, r5
 80031ea:	f7fd fd1f 	bl	8000c2c <MCI_GetIab>
 80031ee:	1400      	asrs	r0, r0, #16
    break;
 80031f0:	e66f      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = MCI_GetIab(pMCI).a;
 80031f2:	4628      	mov	r0, r5
 80031f4:	f7fd fd1a 	bl	8000c2c <MCI_GetIab>
 80031f8:	b200      	sxth	r0, r0
    break;
 80031fa:	e66a      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 80031fc:	6820      	ldr	r0, [r4, #0]
 80031fe:	f001 fceb 	bl	8004bd8 <PID_GetKP>
    break;
 8003202:	e666      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8003204:	4628      	mov	r0, r5
 8003206:	f7fd fd0d 	bl	8000c24 <MCI_GetMecSpeedRefUnit>
 800320a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800320e:	0040      	lsls	r0, r0, #1
    break;
 8003210:	e65f      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8003212:	4628      	mov	r0, r5
 8003214:	f7fd fcce 	bl	8000bb4 <MCI_GetControlMode>
    break;
 8003218:	e65b      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 800321a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800321c:	f002 ffd8 	bl	80061d0 <STM_GetState>
	break;
 8003220:	e657      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8003222:	6820      	ldr	r0, [r4, #0]
 8003224:	f001 fce8 	bl	8004bf8 <PID_GetKD>
    break;
 8003228:	e653      	b.n	8002ed2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 800322a:	6820      	ldr	r0, [r4, #0]
 800322c:	f001 fcd8 	bl	8004be0 <PID_GetKI>
    break;
 8003230:	e64f      	b.n	8002ed2 <UI_GetReg+0x222>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003232:	2b09      	cmp	r3, #9
 8003234:	f43f af39 	beq.w	80030aa <UI_GetReg+0x3fa>
        pSPD = pMCT->pSpeedSensorMain;
 8003238:	69a0      	ldr	r0, [r4, #24]
 800323a:	e737      	b.n	80030ac <UI_GetReg+0x3fc>
        pSPD = pMCT->pSpeedSensorAux;
 800323c:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800323e:	2800      	cmp	r0, #0
 8003240:	d085      	beq.n	800314e <UI_GetReg+0x49e>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8003242:	aa0f      	add	r2, sp, #60	; 0x3c
 8003244:	a90e      	add	r1, sp, #56	; 0x38
 8003246:	f003 fa73 	bl	8006730 <STO_GetPLLGains>
 800324a:	e780      	b.n	800314e <UI_GetReg+0x49e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800324c:	2b09      	cmp	r3, #9
 800324e:	d0f5      	beq.n	800323c <UI_GetReg+0x58c>
        pSPD = pMCT->pSpeedSensorMain;
 8003250:	69a0      	ldr	r0, [r4, #24]
 8003252:	e7f4      	b.n	800323e <UI_GetReg+0x58e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003254:	2b09      	cmp	r3, #9
 8003256:	f43f af00 	beq.w	800305a <UI_GetReg+0x3aa>
       pSPD = pMCT->pSpeedSensorMain;
 800325a:	69a0      	ldr	r0, [r4, #24]
 800325c:	e6fe      	b.n	800305c <UI_GetReg+0x3ac>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800325e:	2b09      	cmp	r3, #9
 8003260:	f43f af0f 	beq.w	8003082 <UI_GetReg+0x3d2>
        pSPD = pMCT->pSpeedSensorMain;
 8003264:	69a0      	ldr	r0, [r4, #24]
 8003266:	e70d      	b.n	8003084 <UI_GetReg+0x3d4>
 8003268:	34a6847a 	.word	0x34a6847a
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800326c:	2b09      	cmp	r3, #9
 800326e:	f43f ae7a 	beq.w	8002f66 <UI_GetReg+0x2b6>
        pSPD = pMCT->pSpeedSensorMain;
 8003272:	69a0      	ldr	r0, [r4, #24]
 8003274:	e678      	b.n	8002f68 <UI_GetReg+0x2b8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003276:	2b09      	cmp	r3, #9
 8003278:	d085      	beq.n	8003186 <UI_GetReg+0x4d6>
        pSPD = pMCT->pSpeedSensorMain;
 800327a:	69a0      	ldr	r0, [r4, #24]
 800327c:	e784      	b.n	8003188 <UI_GetReg+0x4d8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800327e:	2b09      	cmp	r3, #9
 8003280:	d09c      	beq.n	80031bc <UI_GetReg+0x50c>
        pSPD = pMCT->pSpeedSensorMain;
 8003282:	69a0      	ldr	r0, [r4, #24]
 8003284:	e79b      	b.n	80031be <UI_GetReg+0x50e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003286:	2b09      	cmp	r3, #9
 8003288:	f43f af34 	beq.w	80030f4 <UI_GetReg+0x444>
        pSPD = pMCT->pSpeedSensorMain;
 800328c:	69a0      	ldr	r0, [r4, #24]
 800328e:	e732      	b.n	80030f6 <UI_GetReg+0x446>
        pSPD = pMCT->pSpeedSensorAux;
 8003290:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003292:	2800      	cmp	r0, #0
 8003294:	f43f af6a 	beq.w	800316c <UI_GetReg+0x4bc>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8003298:	aa0f      	add	r2, sp, #60	; 0x3c
 800329a:	a90e      	add	r1, sp, #56	; 0x38
 800329c:	f003 fa48 	bl	8006730 <STO_GetPLLGains>
 80032a0:	e764      	b.n	800316c <UI_GetReg+0x4bc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032a2:	2b09      	cmp	r3, #9
 80032a4:	d0f4      	beq.n	8003290 <UI_GetReg+0x5e0>
        pSPD = pMCT->pSpeedSensorMain;
 80032a6:	69a0      	ldr	r0, [r4, #24]
 80032a8:	e7f3      	b.n	8003292 <UI_GetReg+0x5e2>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80032aa:	f7fd fca7 	bl	8000bfc <MCI_GetLastRampFinalSpeed>
 80032ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80032b2:	0040      	lsls	r0, r0, #1
 80032b4:	e60d      	b.n	8002ed2 <UI_GetReg+0x222>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032b6:	2b09      	cmp	r3, #9
 80032b8:	f43f ae90 	beq.w	8002fdc <UI_GetReg+0x32c>
        pSPD = pMCT->pSpeedSensorMain;
 80032bc:	69a0      	ldr	r0, [r4, #24]
 80032be:	e68e      	b.n	8002fde <UI_GetReg+0x32e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032c0:	2b09      	cmp	r3, #9
 80032c2:	f43f ae9f 	beq.w	8003004 <UI_GetReg+0x354>
        pSPD = pMCT->pSpeedSensorMain;
 80032c6:	69a0      	ldr	r0, [r4, #24]
 80032c8:	e69d      	b.n	8003006 <UI_GetReg+0x356>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032ca:	2b09      	cmp	r3, #9
 80032cc:	f43f ae39 	beq.w	8002f42 <UI_GetReg+0x292>
        pSPD = pMCT->pSpeedSensorMain;
 80032d0:	69a0      	ldr	r0, [r4, #24]
 80032d2:	e637      	b.n	8002f44 <UI_GetReg+0x294>

080032d4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032d4:	4a03      	ldr	r2, [pc, #12]	; (80032e4 <SystemInit+0x10>)
 80032d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80032da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032e2:	4770      	bx	lr
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032ea:	4a0e      	ldr	r2, [pc, #56]	; (8003324 <HAL_InitTick+0x3c>)
 80032ec:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <HAL_InitTick+0x40>)
 80032ee:	7812      	ldrb	r2, [r2, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
{
 80032f2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032f8:	fbb0 f0f2 	udiv	r0, r0, r2
 80032fc:	fbb3 f0f0 	udiv	r0, r3, r0
 8003300:	f000 fade 	bl	80038c0 <HAL_SYSTICK_Config>
 8003304:	b908      	cbnz	r0, 800330a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003306:	2d0f      	cmp	r5, #15
 8003308:	d901      	bls.n	800330e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800330a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800330c:	bd38      	pop	{r3, r4, r5, pc}
 800330e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003310:	4602      	mov	r2, r0
 8003312:	4629      	mov	r1, r5
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	f000 fa86 	bl	8003828 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_InitTick+0x44>)
 800331e:	4620      	mov	r0, r4
 8003320:	601d      	str	r5, [r3, #0]
}
 8003322:	bd38      	pop	{r3, r4, r5, pc}
 8003324:	20000704 	.word	0x20000704
 8003328:	20000700 	.word	0x20000700
 800332c:	20000708 	.word	0x20000708

08003330 <HAL_Init>:
{
 8003330:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_Init+0x30>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003342:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800334a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800334c:	2003      	movs	r0, #3
 800334e:	f000 fa59 	bl	8003804 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003352:	2004      	movs	r0, #4
 8003354:	f7ff ffc8 	bl	80032e8 <HAL_InitTick>
  HAL_MspInit();
 8003358:	f7fe ff62 	bl	8002220 <HAL_MspInit>
}
 800335c:	2000      	movs	r0, #0
 800335e:	bd08      	pop	{r3, pc}
 8003360:	40023c00 	.word	0x40023c00

08003364 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003364:	4a03      	ldr	r2, [pc, #12]	; (8003374 <HAL_IncTick+0x10>)
 8003366:	4b04      	ldr	r3, [pc, #16]	; (8003378 <HAL_IncTick+0x14>)
 8003368:	6811      	ldr	r1, [r2, #0]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	440b      	add	r3, r1
 800336e:	6013      	str	r3, [r2, #0]
}
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000a5c 	.word	0x20000a5c
 8003378:	20000704 	.word	0x20000704

0800337c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800337c:	4b01      	ldr	r3, [pc, #4]	; (8003384 <HAL_GetTick+0x8>)
 800337e:	6818      	ldr	r0, [r3, #0]
}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	20000a5c 	.word	0x20000a5c

08003388 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003388:	2800      	cmp	r0, #0
 800338a:	f000 809e 	beq.w	80034ca <HAL_ADC_Init+0x142>
{
 800338e:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003390:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003392:	4604      	mov	r4, r0
 8003394:	b13d      	cbz	r5, 80033a6 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003396:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003398:	06db      	lsls	r3, r3, #27
 800339a:	d50c      	bpl.n	80033b6 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800339c:	2300      	movs	r3, #0
 800339e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 80033a2:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 80033a4:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 80033a6:	f7fe ff59 	bl	800225c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80033aa:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 80033ae:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033b2:	06db      	lsls	r3, r3, #27
 80033b4:	d4f2      	bmi.n	800339c <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 80033b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033b8:	4a47      	ldr	r2, [pc, #284]	; (80034d8 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 80033ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033be:	f023 0302 	bic.w	r3, r3, #2
 80033c2:	f043 0302 	orr.w	r3, r3, #2
 80033c6:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033c8:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033ca:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033cc:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80033d0:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033d2:	6851      	ldr	r1, [r2, #4]
 80033d4:	6860      	ldr	r0, [r4, #4]
 80033d6:	4301      	orrs	r1, r0
 80033d8:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033da:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033dc:	6920      	ldr	r0, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033de:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80033ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033ee:	685a      	ldr	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033f0:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033f2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033f6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033fe:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003400:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003406:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	4302      	orrs	r2, r0
 800340c:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800340e:	4a33      	ldr	r2, [pc, #204]	; (80034dc <HAL_ADC_Init+0x154>)
 8003410:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003412:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003414:	d051      	beq.n	80034ba <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003416:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800341a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800341c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	4311      	orrs	r1, r2
 8003422:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800342a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	4302      	orrs	r2, r0
 8003430:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	f022 0202 	bic.w	r2, r2, #2
 8003438:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	7e21      	ldrb	r1, [r4, #24]
 800343e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003442:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003444:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003448:	2a00      	cmp	r2, #0
 800344a:	d040      	beq.n	80034ce <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800344c:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800344e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003454:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800345c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	3901      	subs	r1, #1
 8003462:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003466:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800346a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800346c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003470:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003474:	3901      	subs	r1, #1
 8003476:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800347a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800347c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800347e:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003480:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003484:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 800348c:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 8003490:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003498:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800349a:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800349c:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800349e:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80034a2:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80034a4:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80034a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034a8:	f023 0303 	bic.w	r3, r3, #3
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80034b2:	2300      	movs	r3, #0
 80034b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80034b8:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	e7b3      	b.n	8003432 <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 80034ca:	2001      	movs	r0, #1
}
 80034cc:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	e7c7      	b.n	8003468 <HAL_ADC_Init+0xe0>
 80034d8:	40012300 	.word	0x40012300
 80034dc:	0f000001 	.word	0x0f000001

080034e0 <HAL_ADC_ConfigChannel>:
{
 80034e0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 80034e2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80034e6:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 80034e8:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80034ea:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80034ec:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80034ee:	f000 809a 	beq.w	8003626 <HAL_ADC_ConfigChannel+0x146>
 80034f2:	2301      	movs	r3, #1
 80034f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034f8:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034fa:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034fc:	2c09      	cmp	r4, #9
 80034fe:	d82c      	bhi.n	800355a <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8003506:	f04f 0c07 	mov.w	ip, #7
 800350a:	fa0c fc05 	lsl.w	ip, ip, r5
 800350e:	ea22 020c 	bic.w	r2, r2, ip
 8003512:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003514:	688a      	ldr	r2, [r1, #8]
 8003516:	40aa      	lsls	r2, r5
 8003518:	691d      	ldr	r5, [r3, #16]
 800351a:	432a      	orrs	r2, r5
 800351c:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 800351e:	684a      	ldr	r2, [r1, #4]
 8003520:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003522:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 8003524:	d82f      	bhi.n	8003586 <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003526:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800352a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800352c:	3a05      	subs	r2, #5
 800352e:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003532:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003536:	fa0e f202 	lsl.w	r2, lr, r2
 800353a:	ea21 0202 	bic.w	r2, r1, r2
 800353e:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003542:	ea4c 0202 	orr.w	r2, ip, r2
 8003546:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003548:	4a3e      	ldr	r2, [pc, #248]	; (8003644 <HAL_ADC_ConfigChannel+0x164>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d030      	beq.n	80035b0 <HAL_ADC_ConfigChannel+0xd0>
  __HAL_UNLOCK(hadc);
 800354e:	2300      	movs	r3, #0
 8003550:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003554:	4618      	mov	r0, r3
}
 8003556:	b003      	add	sp, #12
 8003558:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800355a:	fa1f fc84 	uxth.w	ip, r4
 800355e:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	f1ae 0e1e 	sub.w	lr, lr, #30
 8003568:	2507      	movs	r5, #7
 800356a:	fa05 f50e 	lsl.w	r5, r5, lr
 800356e:	ea22 0205 	bic.w	r2, r2, r5
 8003572:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003574:	688a      	ldr	r2, [r1, #8]
 8003576:	68dd      	ldr	r5, [r3, #12]
 8003578:	fa02 f20e 	lsl.w	r2, r2, lr
 800357c:	432a      	orrs	r2, r5
 800357e:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8003580:	684a      	ldr	r2, [r1, #4]
 8003582:	2a06      	cmp	r2, #6
 8003584:	d9cf      	bls.n	8003526 <HAL_ADC_ConfigChannel+0x46>
  else if (sConfig->Rank < 13U)
 8003586:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003588:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 800358c:	d832      	bhi.n	80035f4 <HAL_ADC_ConfigChannel+0x114>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800358e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003590:	3a23      	subs	r2, #35	; 0x23
 8003592:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003594:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003598:	fa05 f202 	lsl.w	r2, r5, r2
 800359c:	ea21 0202 	bic.w	r2, r1, r2
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a4:	ea4c 0202 	orr.w	r2, ip, r2
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035aa:	4a26      	ldr	r2, [pc, #152]	; (8003644 <HAL_ADC_ConfigChannel+0x164>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d1ce      	bne.n	800354e <HAL_ADC_ConfigChannel+0x6e>
 80035b0:	2c12      	cmp	r4, #18
 80035b2:	d02e      	beq.n	8003612 <HAL_ADC_ConfigChannel+0x132>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035b4:	4b24      	ldr	r3, [pc, #144]	; (8003648 <HAL_ADC_ConfigChannel+0x168>)
 80035b6:	429c      	cmp	r4, r3
 80035b8:	d138      	bne.n	800362c <HAL_ADC_ConfigChannel+0x14c>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80035ba:	4b24      	ldr	r3, [pc, #144]	; (800364c <HAL_ADC_ConfigChannel+0x16c>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035bc:	4c24      	ldr	r4, [pc, #144]	; (8003650 <HAL_ADC_ConfigChannel+0x170>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80035be:	685a      	ldr	r2, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035c0:	4924      	ldr	r1, [pc, #144]	; (8003654 <HAL_ADC_ConfigChannel+0x174>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80035c2:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80035c6:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80035ce:	605a      	str	r2, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	fba1 1303 	umull	r1, r3, r1, r3
 80035d6:	0c9b      	lsrs	r3, r3, #18
 80035d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80035e0:	9b01      	ldr	r3, [sp, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0b3      	beq.n	800354e <HAL_ADC_ConfigChannel+0x6e>
        counter--;
 80035e6:	9b01      	ldr	r3, [sp, #4]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80035ec:	9b01      	ldr	r3, [sp, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f9      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x106>
 80035f2:	e7ac      	b.n	800354e <HAL_ADC_ConfigChannel+0x6e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035f6:	3a41      	subs	r2, #65	; 0x41
 80035f8:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035fa:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035fe:	fa05 f202 	lsl.w	r2, r5, r2
 8003602:	ea21 0202 	bic.w	r2, r1, r2
 8003606:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360a:	ea4c 0202 	orr.w	r2, ip, r2
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003610:	e79a      	b.n	8003548 <HAL_ADC_ConfigChannel+0x68>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003612:	4b0e      	ldr	r3, [pc, #56]	; (800364c <HAL_ADC_ConfigChannel+0x16c>)
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800361a:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003622:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003624:	e793      	b.n	800354e <HAL_ADC_ConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 8003626:	2002      	movs	r0, #2
}
 8003628:	b003      	add	sp, #12
 800362a:	bd30      	pop	{r4, r5, pc}
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800362c:	2c11      	cmp	r4, #17
 800362e:	d18e      	bne.n	800354e <HAL_ADC_ConfigChannel+0x6e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <HAL_ADC_ConfigChannel+0x16c>)
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8003638:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003640:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003642:	e784      	b.n	800354e <HAL_ADC_ConfigChannel+0x6e>
 8003644:	40012000 	.word	0x40012000
 8003648:	10000012 	.word	0x10000012
 800364c:	40012300 	.word	0x40012300
 8003650:	20000700 	.word	0x20000700
 8003654:	431bde83 	.word	0x431bde83

08003658 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8003658:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800365a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800365e:	698e      	ldr	r6, [r1, #24]
  __HAL_LOCK(hadc);
 8003660:	2b01      	cmp	r3, #1
 8003662:	f000 80c5 	beq.w	80037f0 <HAL_ADCEx_InjectedConfigChannel+0x198>
 8003666:	2301      	movs	r3, #1
 8003668:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 800366c:	680d      	ldr	r5, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800366e:	6803      	ldr	r3, [r0, #0]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003670:	2d09      	cmp	r5, #9
 8003672:	d864      	bhi.n	800373e <HAL_ADCEx_InjectedConfigChannel+0xe6>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 800367a:	2407      	movs	r4, #7
 800367c:	40bc      	lsls	r4, r7
 800367e:	ea22 0204 	bic.w	r2, r2, r4
 8003682:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003684:	688a      	ldr	r2, [r1, #8]
 8003686:	691c      	ldr	r4, [r3, #16]
 8003688:	40ba      	lsls	r2, r7
 800368a:	4322      	orrs	r2, r4
 800368c:	611a      	str	r2, [r3, #16]
 800368e:	46ac      	mov	ip, r5
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003692:	690f      	ldr	r7, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003694:	684c      	ldr	r4, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003696:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800369c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800369e:	f107 3eff 	add.w	lr, r7, #4294967295
 80036a2:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 80036a6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80036a8:	1ce2      	adds	r2, r4, #3
 80036aa:	1bd2      	subs	r2, r2, r7
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80036b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80036b4:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80036b8:	fa0c fc02 	lsl.w	ip, ip, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80036bc:	fa0e f202 	lsl.w	r2, lr, r2
 80036c0:	ea27 0202 	bic.w	r2, r7, r2
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80036c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036c8:	ea4c 0202 	orr.w	r2, ip, r2
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80036ce:	4a49      	ldr	r2, [pc, #292]	; (80037f4 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 80036d0:	4296      	cmp	r6, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80036d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80036da:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80036dc:	d067      	beq.n	80037ae <HAL_ADCEx_InjectedConfigChannel+0x156>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80036de:	4316      	orrs	r6, r2
 80036e0:	609e      	str	r6, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80036e2:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80036e4:	69ce      	ldr	r6, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80036e6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80036ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	4332      	orrs	r2, r6
 80036f0:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80036f2:	7d4a      	ldrb	r2, [r1, #21]
 80036f4:	2a00      	cmp	r2, #0
 80036f6:	d033      	beq.n	8003760 <HAL_ADCEx_InjectedConfigChannel+0x108>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036fe:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003700:	7d0a      	ldrb	r2, [r1, #20]
 8003702:	2a00      	cmp	r2, #0
 8003704:	d033      	beq.n	800376e <HAL_ADCEx_InjectedConfigChannel+0x116>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8003706:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8003708:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800370a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800370e:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003710:	d033      	beq.n	800377a <HAL_ADCEx_InjectedConfigChannel+0x122>
 8003712:	2c03      	cmp	r4, #3
 8003714:	d05a      	beq.n	80037cc <HAL_ADCEx_InjectedConfigChannel+0x174>
 8003716:	2c01      	cmp	r4, #1
 8003718:	d04d      	beq.n	80037b6 <HAL_ADCEx_InjectedConfigChannel+0x15e>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800371a:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800371c:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800371e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003722:	f022 020f 	bic.w	r2, r2, #15
 8003726:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8003728:	6a1a      	ldr	r2, [r3, #32]
 800372a:	430a      	orrs	r2, r1
 800372c:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800372e:	4a32      	ldr	r2, [pc, #200]	; (80037f8 <HAL_ADCEx_InjectedConfigChannel+0x1a0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d02f      	beq.n	8003794 <HAL_ADCEx_InjectedConfigChannel+0x13c>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003734:	2300      	movs	r3, #0
 8003736:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800373a:	4618      	mov	r0, r3
}
 800373c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800373e:	fa1f fc85 	uxth.w	ip, r5
 8003742:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	3c1e      	subs	r4, #30
 800374a:	2707      	movs	r7, #7
 800374c:	40a7      	lsls	r7, r4
 800374e:	ea22 0207 	bic.w	r2, r2, r7
 8003752:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003754:	688a      	ldr	r2, [r1, #8]
 8003756:	40a2      	lsls	r2, r4
 8003758:	68dc      	ldr	r4, [r3, #12]
 800375a:	4322      	orrs	r2, r4
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	e797      	b.n	8003690 <HAL_ADCEx_InjectedConfigChannel+0x38>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003766:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003768:	7d0a      	ldrb	r2, [r1, #20]
 800376a:	2a00      	cmp	r2, #0
 800376c:	d1cb      	bne.n	8003706 <HAL_ADCEx_InjectedConfigChannel+0xae>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800376e:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003770:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8003772:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003776:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003778:	d1cb      	bne.n	8003712 <HAL_ADCEx_InjectedConfigChannel+0xba>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800377a:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800377c:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800377e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003782:	f022 020f 	bic.w	r2, r2, #15
 8003786:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	430a      	orrs	r2, r1
 800378c:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800378e:	4a1a      	ldr	r2, [pc, #104]	; (80037f8 <HAL_ADCEx_InjectedConfigChannel+0x1a0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d1cf      	bne.n	8003734 <HAL_ADCEx_InjectedConfigChannel+0xdc>
 8003794:	2d12      	cmp	r5, #18
 8003796:	d024      	beq.n	80037e2 <HAL_ADCEx_InjectedConfigChannel+0x18a>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003798:	4b18      	ldr	r3, [pc, #96]	; (80037fc <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 800379a:	429d      	cmp	r5, r3
 800379c:	d001      	beq.n	80037a2 <HAL_ADCEx_InjectedConfigChannel+0x14a>
 800379e:	2d11      	cmp	r5, #17
 80037a0:	d1c8      	bne.n	8003734 <HAL_ADCEx_InjectedConfigChannel+0xdc>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80037a2:	4a17      	ldr	r2, [pc, #92]	; (8003800 <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 80037a4:	6853      	ldr	r3, [r2, #4]
 80037a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037aa:	6053      	str	r3, [r2, #4]
 80037ac:	e7c2      	b.n	8003734 <HAL_ADCEx_InjectedConfigChannel+0xdc>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80037ae:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	e79d      	b.n	80036f2 <HAL_ADCEx_InjectedConfigChannel+0x9a>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80037b6:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80037b8:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80037ba:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80037be:	f022 020f 	bic.w	r2, r2, #15
 80037c2:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80037c4:	695a      	ldr	r2, [r3, #20]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	615a      	str	r2, [r3, #20]
      break;
 80037ca:	e7b0      	b.n	800372e <HAL_ADCEx_InjectedConfigChannel+0xd6>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80037cc:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80037ce:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80037d0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80037d4:	f022 020f 	bic.w	r2, r2, #15
 80037d8:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80037da:	69da      	ldr	r2, [r3, #28]
 80037dc:	430a      	orrs	r2, r1
 80037de:	61da      	str	r2, [r3, #28]
      break;
 80037e0:	e7a5      	b.n	800372e <HAL_ADCEx_InjectedConfigChannel+0xd6>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037e2:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80037e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037ea:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80037ee:	e7a1      	b.n	8003734 <HAL_ADCEx_InjectedConfigChannel+0xdc>
  __HAL_LOCK(hadc);
 80037f0:	2002      	movs	r0, #2
}
 80037f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037f4:	000f0001 	.word	0x000f0001
 80037f8:	40012000 	.word	0x40012000
 80037fc:	10000012 	.word	0x10000012
 8003800:	40012300 	.word	0x40012300

08003804 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003804:	4907      	ldr	r1, [pc, #28]	; (8003824 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003806:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003808:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800380a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800380e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003812:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003814:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003816:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800381a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800381e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003828:	4b1c      	ldr	r3, [pc, #112]	; (800389c <HAL_NVIC_SetPriority+0x74>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003830:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003832:	f1c3 0e07 	rsb	lr, r3, #7
 8003836:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800383a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800383e:	bf28      	it	cs
 8003840:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003844:	f1bc 0f06 	cmp.w	ip, #6
 8003848:	d91b      	bls.n	8003882 <HAL_NVIC_SetPriority+0x5a>
 800384a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800384c:	f04f 3cff 	mov.w	ip, #4294967295
 8003850:	fa0c fc03 	lsl.w	ip, ip, r3
 8003854:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003858:	f04f 3cff 	mov.w	ip, #4294967295
 800385c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003860:	ea21 010c 	bic.w	r1, r1, ip
 8003864:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003866:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003868:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800386c:	db0c      	blt.n	8003888 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003872:	0109      	lsls	r1, r1, #4
 8003874:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003878:	b2c9      	uxtb	r1, r1
 800387a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800387e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003882:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003884:	4613      	mov	r3, r2
 8003886:	e7e7      	b.n	8003858 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003888:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_NVIC_SetPriority+0x78>)
 800388a:	f000 000f 	and.w	r0, r0, #15
 800388e:	0109      	lsls	r1, r1, #4
 8003890:	4403      	add	r3, r0
 8003892:	b2c9      	uxtb	r1, r1
 8003894:	7619      	strb	r1, [r3, #24]
 8003896:	f85d fb04 	ldr.w	pc, [sp], #4
 800389a:	bf00      	nop
 800389c:	e000ed00 	.word	0xe000ed00
 80038a0:	e000ecfc 	.word	0xe000ecfc

080038a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80038a4:	2800      	cmp	r0, #0
 80038a6:	db07      	blt.n	80038b8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038a8:	0941      	lsrs	r1, r0, #5
 80038aa:	4a04      	ldr	r2, [pc, #16]	; (80038bc <HAL_NVIC_EnableIRQ+0x18>)
 80038ac:	f000 001f 	and.w	r0, r0, #31
 80038b0:	2301      	movs	r3, #1
 80038b2:	4083      	lsls	r3, r0
 80038b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	e000e100 	.word	0xe000e100

080038c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c0:	3801      	subs	r0, #1
 80038c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80038c6:	d210      	bcs.n	80038ea <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038c8:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ce:	4c08      	ldr	r4, [pc, #32]	; (80038f0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038d0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d2:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80038d6:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038da:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038dc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038de:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e0:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80038e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e6:	6119      	str	r1, [r3, #16]
 80038e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80038ea:	2001      	movs	r0, #1
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	e000ed00 	.word	0xe000ed00

080038f4 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop

080038f8 <HAL_SYSTICK_IRQHandler>:
{
 80038f8:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80038fa:	f7ff fffb 	bl	80038f4 <HAL_SYSTICK_Callback>
}
 80038fe:	bd08      	pop	{r3, pc}

08003900 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8003900:	b188      	cbz	r0, 8003926 <HAL_DAC_Init+0x26>
{
 8003902:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003904:	7903      	ldrb	r3, [r0, #4]
 8003906:	4604      	mov	r4, r0
 8003908:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800390c:	b13b      	cbz	r3, 800391e <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800390e:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8003910:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003912:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8003914:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003916:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8003918:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800391a:	4618      	mov	r0, r3
}
 800391c:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800391e:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003920:	f7fe fd12 	bl	8002348 <HAL_DAC_MspInit>
 8003924:	e7f3      	b.n	800390e <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8003926:	2001      	movs	r0, #1
}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop

0800392c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800392c:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800392e:	7940      	ldrb	r0, [r0, #5]
 8003930:	2801      	cmp	r0, #1
 8003932:	d01f      	beq.n	8003974 <HAL_DAC_ConfigChannel+0x48>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003934:	2002      	movs	r0, #2
{
 8003936:	b430      	push	{r4, r5}
  hdac->State = HAL_DAC_STATE_BUSY;
 8003938:	7118      	strb	r0, [r3, #4]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800393a:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 = hdac->Instance->CR;
 800393e:	681c      	ldr	r4, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003940:	f002 0210 	and.w	r2, r2, #16
  tmpreg1 = hdac->Instance->CR;
 8003944:	6825      	ldr	r5, [r4, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003946:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003948:	f640 70fe 	movw	r0, #4094	; 0xffe
 800394c:	4090      	lsls	r0, r2
 800394e:	ea25 0000 	bic.w	r0, r5, r0
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003952:	4091      	lsls	r1, r2
 8003954:	4301      	orrs	r1, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003956:	6021      	str	r1, [r4, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003958:	6821      	ldr	r1, [r4, #0]
 800395a:	20c0      	movs	r0, #192	; 0xc0
 800395c:	fa00 f202 	lsl.w	r2, r0, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003960:	2500      	movs	r5, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003962:	ea21 0202 	bic.w	r2, r1, r2
  hdac->State = HAL_DAC_STATE_READY;
 8003966:	2101      	movs	r1, #1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003968:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800396a:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 800396c:	715d      	strb	r5, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800396e:	4628      	mov	r0, r5
}
 8003970:	bc30      	pop	{r4, r5}
 8003972:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8003974:	2002      	movs	r0, #2
}
 8003976:	4770      	bx	lr

08003978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800397c:	2200      	movs	r2, #0
 800397e:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003980:	f8df a218 	ldr.w	sl, [pc, #536]	; 8003b9c <HAL_GPIO_Init+0x224>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003984:	4e7e      	ldr	r6, [pc, #504]	; (8003b80 <HAL_GPIO_Init+0x208>)
{
 8003986:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003988:	4613      	mov	r3, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800398a:	4689      	mov	r9, r1
 800398c:	e005      	b.n	800399a <HAL_GPIO_Init+0x22>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800398e:	3301      	adds	r3, #1
 8003990:	2b10      	cmp	r3, #16
 8003992:	f102 0202 	add.w	r2, r2, #2
 8003996:	f000 8085 	beq.w	8003aa4 <HAL_GPIO_Init+0x12c>
    ioposition = 0x01U << position;
 800399a:	2101      	movs	r1, #1
 800399c:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800399e:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 80039a2:	43a1      	bics	r1, r4
 80039a4:	d1f3      	bne.n	800398e <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039a6:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80039aa:	f00c 0103 	and.w	r1, ip, #3
 80039ae:	1e4d      	subs	r5, r1, #1
 80039b0:	2d01      	cmp	r5, #1
 80039b2:	d97a      	bls.n	8003aaa <HAL_GPIO_Init+0x132>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039b4:	2903      	cmp	r1, #3
 80039b6:	f040 80bb 	bne.w	8003b30 <HAL_GPIO_Init+0x1b8>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039ba:	4091      	lsls	r1, r2
 80039bc:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 80039be:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039c0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039c2:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039c4:	f01c 5f80 	tst.w	ip, #268435456	; 0x10000000
      GPIOx->MODER = temp;
 80039c8:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039ca:	d0e0      	beq.n	800398e <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039cc:	2100      	movs	r1, #0
 80039ce:	9103      	str	r1, [sp, #12]
 80039d0:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 80039d4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80039d8:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 80039dc:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 80039e0:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80039e4:	9103      	str	r1, [sp, #12]
 80039e6:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80039e8:	f023 0103 	bic.w	r1, r3, #3
 80039ec:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80039f0:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039f4:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80039f8:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039fa:	00bf      	lsls	r7, r7, #2
 80039fc:	f04f 0e0f 	mov.w	lr, #15
 8003a00:	fa0e fe07 	lsl.w	lr, lr, r7
 8003a04:	ea25 080e 	bic.w	r8, r5, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a08:	4d5e      	ldr	r5, [pc, #376]	; (8003b84 <HAL_GPIO_Init+0x20c>)
 8003a0a:	42a8      	cmp	r0, r5
 8003a0c:	d01f      	beq.n	8003a4e <HAL_GPIO_Init+0xd6>
 8003a0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a12:	42a8      	cmp	r0, r5
 8003a14:	f000 8090 	beq.w	8003b38 <HAL_GPIO_Init+0x1c0>
 8003a18:	4d5b      	ldr	r5, [pc, #364]	; (8003b88 <HAL_GPIO_Init+0x210>)
 8003a1a:	42a8      	cmp	r0, r5
 8003a1c:	f000 8093 	beq.w	8003b46 <HAL_GPIO_Init+0x1ce>
 8003a20:	4d5a      	ldr	r5, [pc, #360]	; (8003b8c <HAL_GPIO_Init+0x214>)
 8003a22:	42a8      	cmp	r0, r5
 8003a24:	f000 8096 	beq.w	8003b54 <HAL_GPIO_Init+0x1dc>
 8003a28:	4d59      	ldr	r5, [pc, #356]	; (8003b90 <HAL_GPIO_Init+0x218>)
 8003a2a:	42a8      	cmp	r0, r5
 8003a2c:	f000 8099 	beq.w	8003b62 <HAL_GPIO_Init+0x1ea>
 8003a30:	4d58      	ldr	r5, [pc, #352]	; (8003b94 <HAL_GPIO_Init+0x21c>)
 8003a32:	42a8      	cmp	r0, r5
 8003a34:	f000 809c 	beq.w	8003b70 <HAL_GPIO_Init+0x1f8>
 8003a38:	4d57      	ldr	r5, [pc, #348]	; (8003b98 <HAL_GPIO_Init+0x220>)
 8003a3a:	42a8      	cmp	r0, r5
 8003a3c:	bf0c      	ite	eq
 8003a3e:	f04f 0e06 	moveq.w	lr, #6
 8003a42:	f04f 0e07 	movne.w	lr, #7
 8003a46:	fa0e f707 	lsl.w	r7, lr, r7
 8003a4a:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a4e:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->IMR;
 8003a52:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8003a54:	ea6f 050b 	mvn.w	r5, fp
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a58:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8003a5c:	bf0c      	ite	eq
 8003a5e:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 8003a60:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->IMR = temp;
 8003a64:	6031      	str	r1, [r6, #0]

        temp = EXTI->EMR;
 8003a66:	6871      	ldr	r1, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a68:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8003a6c:	bf0c      	ite	eq
 8003a6e:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 8003a70:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->EMR = temp;
 8003a74:	6071      	str	r1, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a76:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a78:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8003a7c:	bf0c      	ite	eq
 8003a7e:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 8003a80:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8003a84:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8003a86:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a88:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a8c:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8003a90:	bf0c      	ite	eq
 8003a92:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 8003a94:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a98:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8003a9a:	60f1      	str	r1, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a9c:	f102 0202 	add.w	r2, r2, #2
 8003aa0:	f47f af7b 	bne.w	800399a <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 8003aa4:	b005      	add	sp, #20
 8003aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aaa:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8003aae:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ab2:	fa05 f702 	lsl.w	r7, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ab6:	2503      	movs	r5, #3
 8003ab8:	fa05 f802 	lsl.w	r8, r5, r2
 8003abc:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ac0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8003ac4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003ac6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ac8:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003acc:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8003ad0:	409f      	lsls	r7, r3
 8003ad2:	ea47 070e 	orr.w	r7, r7, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ad6:	ea6f 0508 	mvn.w	r5, r8
        GPIOx->OTYPER = temp;
 8003ada:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003adc:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ade:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ae2:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8003ae6:	4097      	lsls	r7, r2
 8003ae8:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aec:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8003aee:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af0:	fa01 f102 	lsl.w	r1, r1, r2
 8003af4:	f47f af63 	bne.w	80039be <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 8003af8:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003afc:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b00:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003b04:	f8de 7020 	ldr.w	r7, [lr, #32]
 8003b08:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b0a:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b0e:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b12:	fa07 f708 	lsl.w	r7, r7, r8
 8003b16:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b18:	270f      	movs	r7, #15
 8003b1a:	fa07 f808 	lsl.w	r8, r7, r8
 8003b1e:	9f00      	ldr	r7, [sp, #0]
 8003b20:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b24:	9f01      	ldr	r7, [sp, #4]
 8003b26:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8003b2a:	f8ce 7020 	str.w	r7, [lr, #32]
 8003b2e:	e746      	b.n	80039be <HAL_GPIO_Init+0x46>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b30:	2503      	movs	r5, #3
 8003b32:	4095      	lsls	r5, r2
 8003b34:	43ed      	mvns	r5, r5
 8003b36:	e7d1      	b.n	8003adc <HAL_GPIO_Init+0x164>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b38:	f04f 0e01 	mov.w	lr, #1
 8003b3c:	fa0e f707 	lsl.w	r7, lr, r7
 8003b40:	ea48 0807 	orr.w	r8, r8, r7
 8003b44:	e783      	b.n	8003a4e <HAL_GPIO_Init+0xd6>
 8003b46:	f04f 0e02 	mov.w	lr, #2
 8003b4a:	fa0e f707 	lsl.w	r7, lr, r7
 8003b4e:	ea48 0807 	orr.w	r8, r8, r7
 8003b52:	e77c      	b.n	8003a4e <HAL_GPIO_Init+0xd6>
 8003b54:	f04f 0e03 	mov.w	lr, #3
 8003b58:	fa0e f707 	lsl.w	r7, lr, r7
 8003b5c:	ea48 0807 	orr.w	r8, r8, r7
 8003b60:	e775      	b.n	8003a4e <HAL_GPIO_Init+0xd6>
 8003b62:	f04f 0e04 	mov.w	lr, #4
 8003b66:	fa0e f707 	lsl.w	r7, lr, r7
 8003b6a:	ea48 0807 	orr.w	r8, r8, r7
 8003b6e:	e76e      	b.n	8003a4e <HAL_GPIO_Init+0xd6>
 8003b70:	f04f 0e05 	mov.w	lr, #5
 8003b74:	fa0e f707 	lsl.w	r7, lr, r7
 8003b78:	ea48 0807 	orr.w	r8, r8, r7
 8003b7c:	e767      	b.n	8003a4e <HAL_GPIO_Init+0xd6>
 8003b7e:	bf00      	nop
 8003b80:	40013c00 	.word	0x40013c00
 8003b84:	40020000 	.word	0x40020000
 8003b88:	40020800 	.word	0x40020800
 8003b8c:	40020c00 	.word	0x40020c00
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40021400 	.word	0x40021400
 8003b98:	40021800 	.word	0x40021800
 8003b9c:	40023800 	.word	0x40023800

08003ba0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba0:	b902      	cbnz	r2, 8003ba4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ba2:	0409      	lsls	r1, r1, #16
 8003ba4:	6181      	str	r1, [r0, #24]
  }
}
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ba8:	b530      	push	{r4, r5, lr}
 8003baa:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bac:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bae:	491a      	ldr	r1, [pc, #104]	; (8003c18 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bb0:	4d1a      	ldr	r5, [pc, #104]	; (8003c1c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	9201      	str	r2, [sp, #4]
 8003bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bb8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bc6:	2201      	movs	r2, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bc8:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bca:	640a      	str	r2, [r1, #64]	; 0x40
  tickstart = HAL_GetTick();
 8003bcc:	f7ff fbd6 	bl	800337c <HAL_GetTick>
 8003bd0:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bd2:	e005      	b.n	8003be0 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bd4:	f7ff fbd2 	bl	800337c <HAL_GetTick>
 8003bd8:	1b00      	subs	r0, r0, r4
 8003bda:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003bde:	d816      	bhi.n	8003c0e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003be0:	686b      	ldr	r3, [r5, #4]
 8003be2:	03da      	lsls	r2, r3, #15
 8003be4:	d5f6      	bpl.n	8003bd4 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003be6:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003be8:	4d0c      	ldr	r5, [pc, #48]	; (8003c1c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003bea:	2201      	movs	r2, #1
 8003bec:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8003bee:	f7ff fbc5 	bl	800337c <HAL_GetTick>
 8003bf2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bf4:	e005      	b.n	8003c02 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bf6:	f7ff fbc1 	bl	800337c <HAL_GetTick>
 8003bfa:	1b00      	subs	r0, r0, r4
 8003bfc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003c00:	d805      	bhi.n	8003c0e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c02:	686b      	ldr	r3, [r5, #4]
 8003c04:	039b      	lsls	r3, r3, #14
 8003c06:	d5f6      	bpl.n	8003bf6 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003c08:	2000      	movs	r0, #0
}
 8003c0a:	b003      	add	sp, #12
 8003c0c:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8003c0e:	2003      	movs	r0, #3
}
 8003c10:	b003      	add	sp, #12
 8003c12:	bd30      	pop	{r4, r5, pc}
 8003c14:	40023800 	.word	0x40023800
 8003c18:	420e0000 	.word	0x420e0000
 8003c1c:	40007000 	.word	0x40007000

08003c20 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c20:	2800      	cmp	r0, #0
 8003c22:	f000 8087 	beq.w	8003d34 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c26:	4a48      	ldr	r2, [pc, #288]	; (8003d48 <HAL_RCC_ClockConfig+0x128>)
 8003c28:	6813      	ldr	r3, [r2, #0]
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	428b      	cmp	r3, r1
{
 8003c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c34:	460d      	mov	r5, r1
 8003c36:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c38:	d209      	bcs.n	8003c4e <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3a:	b2cb      	uxtb	r3, r1
 8003c3c:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3e:	6813      	ldr	r3, [r2, #0]
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	428b      	cmp	r3, r1
 8003c46:	d002      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003c48:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8003c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	0798      	lsls	r0, r3, #30
 8003c52:	d514      	bpl.n	8003c7e <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	0759      	lsls	r1, r3, #29
 8003c56:	d504      	bpl.n	8003c62 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c58:	493c      	ldr	r1, [pc, #240]	; (8003d4c <HAL_RCC_ClockConfig+0x12c>)
 8003c5a:	688a      	ldr	r2, [r1, #8]
 8003c5c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003c60:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c62:	071a      	lsls	r2, r3, #28
 8003c64:	d504      	bpl.n	8003c70 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c66:	4939      	ldr	r1, [pc, #228]	; (8003d4c <HAL_RCC_ClockConfig+0x12c>)
 8003c68:	688a      	ldr	r2, [r1, #8]
 8003c6a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003c6e:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c70:	4936      	ldr	r1, [pc, #216]	; (8003d4c <HAL_RCC_ClockConfig+0x12c>)
 8003c72:	68a0      	ldr	r0, [r4, #8]
 8003c74:	688a      	ldr	r2, [r1, #8]
 8003c76:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c7a:	4302      	orrs	r2, r0
 8003c7c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c7e:	07df      	lsls	r7, r3, #31
 8003c80:	d521      	bpl.n	8003cc6 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c82:	6862      	ldr	r2, [r4, #4]
 8003c84:	2a01      	cmp	r2, #1
 8003c86:	d057      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c88:	1e93      	subs	r3, r2, #2
 8003c8a:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8c:	4b2f      	ldr	r3, [pc, #188]	; (8003d4c <HAL_RCC_ClockConfig+0x12c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c90:	d94d      	bls.n	8003d2e <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c92:	0799      	lsls	r1, r3, #30
 8003c94:	d5d8      	bpl.n	8003c48 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c96:	4e2d      	ldr	r6, [pc, #180]	; (8003d4c <HAL_RCC_ClockConfig+0x12c>)
 8003c98:	68b3      	ldr	r3, [r6, #8]
 8003c9a:	f023 0303 	bic.w	r3, r3, #3
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003ca2:	f7ff fb6b 	bl	800337c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003caa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cac:	e004      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cae:	f7ff fb65 	bl	800337c <HAL_GetTick>
 8003cb2:	1bc0      	subs	r0, r0, r7
 8003cb4:	4540      	cmp	r0, r8
 8003cb6:	d844      	bhi.n	8003d42 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb8:	68b3      	ldr	r3, [r6, #8]
 8003cba:	6862      	ldr	r2, [r4, #4]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003cc4:	d1f3      	bne.n	8003cae <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc6:	4a20      	ldr	r2, [pc, #128]	; (8003d48 <HAL_RCC_ClockConfig+0x128>)
 8003cc8:	6813      	ldr	r3, [r2, #0]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	42ab      	cmp	r3, r5
 8003cd0:	d906      	bls.n	8003ce0 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd2:	b2eb      	uxtb	r3, r5
 8003cd4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd6:	6813      	ldr	r3, [r2, #0]
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	42ab      	cmp	r3, r5
 8003cde:	d1b3      	bne.n	8003c48 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	075a      	lsls	r2, r3, #29
 8003ce4:	d506      	bpl.n	8003cf4 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce6:	4919      	ldr	r1, [pc, #100]	; (8003d4c <HAL_RCC_ClockConfig+0x12c>)
 8003ce8:	68e0      	ldr	r0, [r4, #12]
 8003cea:	688a      	ldr	r2, [r1, #8]
 8003cec:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003cf0:	4302      	orrs	r2, r0
 8003cf2:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf4:	071b      	lsls	r3, r3, #28
 8003cf6:	d507      	bpl.n	8003d08 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cf8:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <HAL_RCC_ClockConfig+0x12c>)
 8003cfa:	6921      	ldr	r1, [r4, #16]
 8003cfc:	6893      	ldr	r3, [r2, #8]
 8003cfe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003d02:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003d06:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d08:	f000 f84e 	bl	8003da8 <HAL_RCC_GetSysClockFreq>
 8003d0c:	4a0f      	ldr	r2, [pc, #60]	; (8003d4c <HAL_RCC_ClockConfig+0x12c>)
 8003d0e:	4c10      	ldr	r4, [pc, #64]	; (8003d50 <HAL_RCC_ClockConfig+0x130>)
 8003d10:	6892      	ldr	r2, [r2, #8]
 8003d12:	4910      	ldr	r1, [pc, #64]	; (8003d54 <HAL_RCC_ClockConfig+0x134>)
 8003d14:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003d18:	4603      	mov	r3, r0
 8003d1a:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8003d1c:	480e      	ldr	r0, [pc, #56]	; (8003d58 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d1e:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8003d20:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d22:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8003d24:	f7ff fae0 	bl	80032e8 <HAL_InitTick>
  return HAL_OK;
 8003d28:	2000      	movs	r0, #0
}
 8003d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2e:	0198      	lsls	r0, r3, #6
 8003d30:	d4b1      	bmi.n	8003c96 <HAL_RCC_ClockConfig+0x76>
 8003d32:	e789      	b.n	8003c48 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003d34:	2001      	movs	r0, #1
}
 8003d36:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <HAL_RCC_ClockConfig+0x12c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	039e      	lsls	r6, r3, #14
 8003d3e:	d4aa      	bmi.n	8003c96 <HAL_RCC_ClockConfig+0x76>
 8003d40:	e782      	b.n	8003c48 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8003d42:	2003      	movs	r0, #3
 8003d44:	e781      	b.n	8003c4a <HAL_RCC_ClockConfig+0x2a>
 8003d46:	bf00      	nop
 8003d48:	40023c00 	.word	0x40023c00
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	08006f08 	.word	0x08006f08
 8003d54:	20000700 	.word	0x20000700
 8003d58:	20000708 	.word	0x20000708

08003d5c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003d5c:	4b01      	ldr	r3, [pc, #4]	; (8003d64 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000700 	.word	0x20000700

08003d68 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d68:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8003d6a:	4905      	ldr	r1, [pc, #20]	; (8003d80 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	4a05      	ldr	r2, [pc, #20]	; (8003d84 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003d70:	6808      	ldr	r0, [r1, #0]
 8003d72:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003d76:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d78:	40d8      	lsrs	r0, r3
 8003d7a:	4770      	bx	lr
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	20000700 	.word	0x20000700
 8003d84:	08006f18 	.word	0x08006f18

08003d88 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8003d8a:	4905      	ldr	r1, [pc, #20]	; (8003da0 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	4a05      	ldr	r2, [pc, #20]	; (8003da4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003d90:	6808      	ldr	r0, [r1, #0]
 8003d92:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003d96:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d98:	40d8      	lsrs	r0, r3
 8003d9a:	4770      	bx	lr
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	20000700 	.word	0x20000700
 8003da4:	08006f18 	.word	0x08006f18

08003da8 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003da8:	4927      	ldr	r1, [pc, #156]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xa0>)
{
 8003daa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dac:	688b      	ldr	r3, [r1, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d007      	beq.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x1e>
 8003db6:	2b0c      	cmp	r3, #12
 8003db8:	d01d      	beq.n	8003df6 <HAL_RCC_GetSysClockFreq+0x4e>
 8003dba:	4a24      	ldr	r2, [pc, #144]	; (8003e4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003dbc:	4824      	ldr	r0, [pc, #144]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	bf08      	it	eq
 8003dc2:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003dc4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dc6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dc8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dca:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dcc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dd0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dd4:	d12e      	bne.n	8003e34 <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd6:	481e      	ldr	r0, [pc, #120]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003dd8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003ddc:	fba1 0100 	umull	r0, r1, r1, r0
 8003de0:	f7fc fa12 	bl	8000208 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003de4:	4b18      	ldr	r3, [pc, #96]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003dec:	3301      	adds	r3, #1
 8003dee:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003df0:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003df4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003df6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003df8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dfa:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dfc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e00:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e04:	d10d      	bne.n	8003e22 <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e06:	4812      	ldr	r0, [pc, #72]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003e08:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003e0c:	fba1 0100 	umull	r0, r1, r1, r0
 8003e10:	f7fc f9fa 	bl	8000208 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e14:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8003e1c:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003e20:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e22:	480a      	ldr	r0, [pc, #40]	; (8003e4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e24:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003e28:	2300      	movs	r3, #0
 8003e2a:	fba1 0100 	umull	r0, r1, r1, r0
 8003e2e:	f7fc f9eb 	bl	8000208 <__aeabi_uldivmod>
 8003e32:	e7ef      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e34:	4805      	ldr	r0, [pc, #20]	; (8003e4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e36:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	fba1 0100 	umull	r0, r1, r1, r0
 8003e40:	f7fc f9e2 	bl	8000208 <__aeabi_uldivmod>
 8003e44:	e7ce      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x3c>
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	007a1200 	.word	0x007a1200
 8003e50:	00f42400 	.word	0x00f42400

08003e54 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e54:	2800      	cmp	r0, #0
 8003e56:	f000 81b3 	beq.w	80041c0 <HAL_RCC_OscConfig+0x36c>
{
 8003e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e5e:	6803      	ldr	r3, [r0, #0]
 8003e60:	07da      	lsls	r2, r3, #31
{
 8003e62:	b082      	sub	sp, #8
 8003e64:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e66:	d536      	bpl.n	8003ed6 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e68:	49a2      	ldr	r1, [pc, #648]	; (80040f4 <HAL_RCC_OscConfig+0x2a0>)
 8003e6a:	688a      	ldr	r2, [r1, #8]
 8003e6c:	f002 020c 	and.w	r2, r2, #12
 8003e70:	2a04      	cmp	r2, #4
 8003e72:	f000 80df 	beq.w	8004034 <HAL_RCC_OscConfig+0x1e0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e76:	688a      	ldr	r2, [r1, #8]
 8003e78:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e7c:	2a08      	cmp	r2, #8
 8003e7e:	f000 80d5 	beq.w	800402c <HAL_RCC_OscConfig+0x1d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e82:	499c      	ldr	r1, [pc, #624]	; (80040f4 <HAL_RCC_OscConfig+0x2a0>)
 8003e84:	688a      	ldr	r2, [r1, #8]
 8003e86:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e8a:	2a0c      	cmp	r2, #12
 8003e8c:	f000 8105 	beq.w	800409a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e90:	6863      	ldr	r3, [r4, #4]
 8003e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e96:	f000 8119 	beq.w	80040cc <HAL_RCC_OscConfig+0x278>
 8003e9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e9e:	f000 8196 	beq.w	80041ce <HAL_RCC_OscConfig+0x37a>
 8003ea2:	4d94      	ldr	r5, [pc, #592]	; (80040f4 <HAL_RCC_OscConfig+0x2a0>)
 8003ea4:	682a      	ldr	r2, [r5, #0]
 8003ea6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003eaa:	602a      	str	r2, [r5, #0]
 8003eac:	682a      	ldr	r2, [r5, #0]
 8003eae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003eb2:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f040 810e 	bne.w	80040d6 <HAL_RCC_OscConfig+0x282>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eba:	f7ff fa5f 	bl	800337c <HAL_GetTick>
 8003ebe:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec0:	e005      	b.n	8003ece <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec2:	f7ff fa5b 	bl	800337c <HAL_GetTick>
 8003ec6:	1b80      	subs	r0, r0, r6
 8003ec8:	2864      	cmp	r0, #100	; 0x64
 8003eca:	f200 80fb 	bhi.w	80040c4 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ece:	682b      	ldr	r3, [r5, #0]
 8003ed0:	0399      	lsls	r1, r3, #14
 8003ed2:	d4f6      	bmi.n	8003ec2 <HAL_RCC_OscConfig+0x6e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	079a      	lsls	r2, r3, #30
 8003ed8:	d52f      	bpl.n	8003f3a <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003eda:	4a86      	ldr	r2, [pc, #536]	; (80040f4 <HAL_RCC_OscConfig+0x2a0>)
 8003edc:	6891      	ldr	r1, [r2, #8]
 8003ede:	f011 0f0c 	tst.w	r1, #12
 8003ee2:	f000 8098 	beq.w	8004016 <HAL_RCC_OscConfig+0x1c2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ee6:	6891      	ldr	r1, [r2, #8]
 8003ee8:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003eec:	2908      	cmp	r1, #8
 8003eee:	f000 808e 	beq.w	800400e <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef2:	4980      	ldr	r1, [pc, #512]	; (80040f4 <HAL_RCC_OscConfig+0x2a0>)
 8003ef4:	688a      	ldr	r2, [r1, #8]
 8003ef6:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003efa:	2a0c      	cmp	r2, #12
 8003efc:	f000 8162 	beq.w	80041c4 <HAL_RCC_OscConfig+0x370>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f00:	68e3      	ldr	r3, [r4, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 8114 	beq.w	8004130 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f08:	4b7b      	ldr	r3, [pc, #492]	; (80040f8 <HAL_RCC_OscConfig+0x2a4>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0a:	4e7a      	ldr	r6, [pc, #488]	; (80040f4 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_ENABLE();
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003f10:	f7ff fa34 	bl	800337c <HAL_GetTick>
 8003f14:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f16:	e005      	b.n	8003f24 <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f18:	f7ff fa30 	bl	800337c <HAL_GetTick>
 8003f1c:	1b40      	subs	r0, r0, r5
 8003f1e:	2802      	cmp	r0, #2
 8003f20:	f200 80d0 	bhi.w	80040c4 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f24:	6833      	ldr	r3, [r6, #0]
 8003f26:	0798      	lsls	r0, r3, #30
 8003f28:	d5f6      	bpl.n	8003f18 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2a:	6833      	ldr	r3, [r6, #0]
 8003f2c:	6922      	ldr	r2, [r4, #16]
 8003f2e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003f32:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003f36:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	071a      	lsls	r2, r3, #28
 8003f3c:	d451      	bmi.n	8003fe2 <HAL_RCC_OscConfig+0x18e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f3e:	0758      	lsls	r0, r3, #29
 8003f40:	d530      	bpl.n	8003fa4 <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f42:	4a6c      	ldr	r2, [pc, #432]	; (80040f4 <HAL_RCC_OscConfig+0x2a0>)
 8003f44:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003f46:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	f000 809a 	beq.w	8004082 <HAL_RCC_OscConfig+0x22e>
    FlagStatus       pwrclkchanged = RESET;
 8003f4e:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f50:	4e6a      	ldr	r6, [pc, #424]	; (80040fc <HAL_RCC_OscConfig+0x2a8>)
 8003f52:	6833      	ldr	r3, [r6, #0]
 8003f54:	05d9      	lsls	r1, r3, #23
 8003f56:	f140 80a5 	bpl.w	80040a4 <HAL_RCC_OscConfig+0x250>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f5a:	68a3      	ldr	r3, [r4, #8]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	f000 80cf 	beq.w	8004100 <HAL_RCC_OscConfig+0x2ac>
 8003f62:	2b05      	cmp	r3, #5
 8003f64:	f000 813d 	beq.w	80041e2 <HAL_RCC_OscConfig+0x38e>
 8003f68:	4e62      	ldr	r6, [pc, #392]	; (80040f4 <HAL_RCC_OscConfig+0x2a0>)
 8003f6a:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003f6c:	f022 0201 	bic.w	r2, r2, #1
 8003f70:	6732      	str	r2, [r6, #112]	; 0x70
 8003f72:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003f74:	f022 0204 	bic.w	r2, r2, #4
 8003f78:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f040 80c5 	bne.w	800410a <HAL_RCC_OscConfig+0x2b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f80:	f7ff f9fc 	bl	800337c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f84:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003f88:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8a:	e005      	b.n	8003f98 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f8c:	f7ff f9f6 	bl	800337c <HAL_GetTick>
 8003f90:	1bc0      	subs	r0, r0, r7
 8003f92:	4540      	cmp	r0, r8
 8003f94:	f200 8096 	bhi.w	80040c4 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f98:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003f9a:	0798      	lsls	r0, r3, #30
 8003f9c:	d4f6      	bmi.n	8003f8c <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f9e:	2d00      	cmp	r5, #0
 8003fa0:	f040 8108 	bne.w	80041b4 <HAL_RCC_OscConfig+0x360>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fa4:	69a0      	ldr	r0, [r4, #24]
 8003fa6:	b1c0      	cbz	r0, 8003fda <HAL_RCC_OscConfig+0x186>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fa8:	4d52      	ldr	r5, [pc, #328]	; (80040f4 <HAL_RCC_OscConfig+0x2a0>)
 8003faa:	68ab      	ldr	r3, [r5, #8]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	f000 80ce 	beq.w	8004152 <HAL_RCC_OscConfig+0x2fe>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb6:	4b50      	ldr	r3, [pc, #320]	; (80040f8 <HAL_RCC_OscConfig+0x2a4>)
 8003fb8:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fba:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003fbc:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fbe:	f000 811a 	beq.w	80041f6 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc2:	f7ff f9db 	bl	800337c <HAL_GetTick>
 8003fc6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc8:	e004      	b.n	8003fd4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fca:	f7ff f9d7 	bl	800337c <HAL_GetTick>
 8003fce:	1b00      	subs	r0, r0, r4
 8003fd0:	2802      	cmp	r0, #2
 8003fd2:	d877      	bhi.n	80040c4 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd4:	682b      	ldr	r3, [r5, #0]
 8003fd6:	019b      	lsls	r3, r3, #6
 8003fd8:	d4f7      	bmi.n	8003fca <HAL_RCC_OscConfig+0x176>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003fda:	2000      	movs	r0, #0
}
 8003fdc:	b002      	add	sp, #8
 8003fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fe2:	6963      	ldr	r3, [r4, #20]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d02f      	beq.n	8004048 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_LSI_ENABLE();
 8003fe8:	4b43      	ldr	r3, [pc, #268]	; (80040f8 <HAL_RCC_OscConfig+0x2a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fea:	4e42      	ldr	r6, [pc, #264]	; (80040f4 <HAL_RCC_OscConfig+0x2a0>)
      __HAL_RCC_LSI_ENABLE();
 8003fec:	2201      	movs	r2, #1
 8003fee:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003ff2:	f7ff f9c3 	bl	800337c <HAL_GetTick>
 8003ff6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff8:	e004      	b.n	8004004 <HAL_RCC_OscConfig+0x1b0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ffa:	f7ff f9bf 	bl	800337c <HAL_GetTick>
 8003ffe:	1b40      	subs	r0, r0, r5
 8004000:	2802      	cmp	r0, #2
 8004002:	d85f      	bhi.n	80040c4 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004004:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004006:	079b      	lsls	r3, r3, #30
 8004008:	d5f7      	bpl.n	8003ffa <HAL_RCC_OscConfig+0x1a6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	e797      	b.n	8003f3e <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800400e:	6852      	ldr	r2, [r2, #4]
 8004010:	0257      	lsls	r7, r2, #9
 8004012:	f53f af6e 	bmi.w	8003ef2 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004016:	4a37      	ldr	r2, [pc, #220]	; (80040f4 <HAL_RCC_OscConfig+0x2a0>)
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	0795      	lsls	r5, r2, #30
 800401c:	d525      	bpl.n	800406a <HAL_RCC_OscConfig+0x216>
 800401e:	68e2      	ldr	r2, [r4, #12]
 8004020:	2a01      	cmp	r2, #1
 8004022:	d022      	beq.n	800406a <HAL_RCC_OscConfig+0x216>
        return HAL_ERROR;
 8004024:	2001      	movs	r0, #1
}
 8004026:	b002      	add	sp, #8
 8004028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800402c:	684a      	ldr	r2, [r1, #4]
 800402e:	0257      	lsls	r7, r2, #9
 8004030:	f57f af27 	bpl.w	8003e82 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004034:	4a2f      	ldr	r2, [pc, #188]	; (80040f4 <HAL_RCC_OscConfig+0x2a0>)
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	0395      	lsls	r5, r2, #14
 800403a:	f57f af4c 	bpl.w	8003ed6 <HAL_RCC_OscConfig+0x82>
 800403e:	6862      	ldr	r2, [r4, #4]
 8004040:	2a00      	cmp	r2, #0
 8004042:	f47f af48 	bne.w	8003ed6 <HAL_RCC_OscConfig+0x82>
 8004046:	e7ed      	b.n	8004024 <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_LSI_DISABLE();
 8004048:	4a2b      	ldr	r2, [pc, #172]	; (80040f8 <HAL_RCC_OscConfig+0x2a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800404a:	4e2a      	ldr	r6, [pc, #168]	; (80040f4 <HAL_RCC_OscConfig+0x2a0>)
      __HAL_RCC_LSI_DISABLE();
 800404c:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004050:	f7ff f994 	bl	800337c <HAL_GetTick>
 8004054:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004056:	e004      	b.n	8004062 <HAL_RCC_OscConfig+0x20e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004058:	f7ff f990 	bl	800337c <HAL_GetTick>
 800405c:	1b40      	subs	r0, r0, r5
 800405e:	2802      	cmp	r0, #2
 8004060:	d830      	bhi.n	80040c4 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004062:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004064:	079f      	lsls	r7, r3, #30
 8004066:	d4f7      	bmi.n	8004058 <HAL_RCC_OscConfig+0x204>
 8004068:	e7cf      	b.n	800400a <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406a:	4922      	ldr	r1, [pc, #136]	; (80040f4 <HAL_RCC_OscConfig+0x2a0>)
 800406c:	6920      	ldr	r0, [r4, #16]
 800406e:	680a      	ldr	r2, [r1, #0]
 8004070:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004074:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004078:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800407a:	071a      	lsls	r2, r3, #28
 800407c:	f57f af5f 	bpl.w	8003f3e <HAL_RCC_OscConfig+0xea>
 8004080:	e7af      	b.n	8003fe2 <HAL_RCC_OscConfig+0x18e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408a:	6413      	str	r3, [r2, #64]	; 0x40
 800408c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800408e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004096:	2501      	movs	r5, #1
 8004098:	e75a      	b.n	8003f50 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800409a:	684a      	ldr	r2, [r1, #4]
 800409c:	0256      	lsls	r6, r2, #9
 800409e:	f57f aef7 	bpl.w	8003e90 <HAL_RCC_OscConfig+0x3c>
 80040a2:	e7c7      	b.n	8004034 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040a4:	6833      	ldr	r3, [r6, #0]
 80040a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040aa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80040ac:	f7ff f966 	bl	800337c <HAL_GetTick>
 80040b0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b2:	6833      	ldr	r3, [r6, #0]
 80040b4:	05da      	lsls	r2, r3, #23
 80040b6:	f53f af50 	bmi.w	8003f5a <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ba:	f7ff f95f 	bl	800337c <HAL_GetTick>
 80040be:	1bc0      	subs	r0, r0, r7
 80040c0:	2802      	cmp	r0, #2
 80040c2:	d9f6      	bls.n	80040b2 <HAL_RCC_OscConfig+0x25e>
            return HAL_TIMEOUT;
 80040c4:	2003      	movs	r0, #3
}
 80040c6:	b002      	add	sp, #8
 80040c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040cc:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <HAL_RCC_OscConfig+0x2a0>)
 80040ce:	6813      	ldr	r3, [r2, #0]
 80040d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80040d6:	f7ff f951 	bl	800337c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040da:	4e06      	ldr	r6, [pc, #24]	; (80040f4 <HAL_RCC_OscConfig+0x2a0>)
        tickstart = HAL_GetTick();
 80040dc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040de:	e004      	b.n	80040ea <HAL_RCC_OscConfig+0x296>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e0:	f7ff f94c 	bl	800337c <HAL_GetTick>
 80040e4:	1b40      	subs	r0, r0, r5
 80040e6:	2864      	cmp	r0, #100	; 0x64
 80040e8:	d8ec      	bhi.n	80040c4 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ea:	6833      	ldr	r3, [r6, #0]
 80040ec:	0398      	lsls	r0, r3, #14
 80040ee:	d5f7      	bpl.n	80040e0 <HAL_RCC_OscConfig+0x28c>
 80040f0:	e6f0      	b.n	8003ed4 <HAL_RCC_OscConfig+0x80>
 80040f2:	bf00      	nop
 80040f4:	40023800 	.word	0x40023800
 80040f8:	42470000 	.word	0x42470000
 80040fc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004100:	4a55      	ldr	r2, [pc, #340]	; (8004258 <HAL_RCC_OscConfig+0x404>)
 8004102:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800410a:	f7ff f937 	bl	800337c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410e:	4f52      	ldr	r7, [pc, #328]	; (8004258 <HAL_RCC_OscConfig+0x404>)
      tickstart = HAL_GetTick();
 8004110:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004112:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004116:	e004      	b.n	8004122 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004118:	f7ff f930 	bl	800337c <HAL_GetTick>
 800411c:	1b80      	subs	r0, r0, r6
 800411e:	4540      	cmp	r0, r8
 8004120:	d8d0      	bhi.n	80040c4 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004124:	079b      	lsls	r3, r3, #30
 8004126:	d5f7      	bpl.n	8004118 <HAL_RCC_OscConfig+0x2c4>
    if(pwrclkchanged == SET)
 8004128:	2d00      	cmp	r5, #0
 800412a:	f43f af3b 	beq.w	8003fa4 <HAL_RCC_OscConfig+0x150>
 800412e:	e041      	b.n	80041b4 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_DISABLE();
 8004130:	4a4a      	ldr	r2, [pc, #296]	; (800425c <HAL_RCC_OscConfig+0x408>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004132:	4e49      	ldr	r6, [pc, #292]	; (8004258 <HAL_RCC_OscConfig+0x404>)
        __HAL_RCC_HSI_DISABLE();
 8004134:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004136:	f7ff f921 	bl	800337c <HAL_GetTick>
 800413a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413c:	e004      	b.n	8004148 <HAL_RCC_OscConfig+0x2f4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800413e:	f7ff f91d 	bl	800337c <HAL_GetTick>
 8004142:	1b40      	subs	r0, r0, r5
 8004144:	2802      	cmp	r0, #2
 8004146:	d8bd      	bhi.n	80040c4 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004148:	6833      	ldr	r3, [r6, #0]
 800414a:	0799      	lsls	r1, r3, #30
 800414c:	d4f7      	bmi.n	800413e <HAL_RCC_OscConfig+0x2ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	e6f3      	b.n	8003f3a <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004152:	2801      	cmp	r0, #1
 8004154:	f43f af42 	beq.w	8003fdc <HAL_RCC_OscConfig+0x188>
        pll_config = RCC->PLLCFGR;
 8004158:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800415a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004160:	4291      	cmp	r1, r2
 8004162:	f47f af5f 	bne.w	8004024 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004168:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800416c:	4291      	cmp	r1, r2
 800416e:	f47f af59 	bne.w	8004024 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004172:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004174:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004178:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800417a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800417e:	f47f af51 	bne.w	8004024 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004182:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004184:	0852      	lsrs	r2, r2, #1
 8004186:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800418a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800418c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004190:	f47f af48 	bne.w	8004024 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004194:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004196:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800419a:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800419e:	f47f af41 	bne.w	8004024 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80041a4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041a8:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
    return HAL_ERROR;
 80041ac:	bf14      	ite	ne
 80041ae:	2001      	movne	r0, #1
 80041b0:	2000      	moveq	r0, #0
 80041b2:	e713      	b.n	8003fdc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b4:	4a28      	ldr	r2, [pc, #160]	; (8004258 <HAL_RCC_OscConfig+0x404>)
 80041b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80041b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041bc:	6413      	str	r3, [r2, #64]	; 0x40
 80041be:	e6f1      	b.n	8003fa4 <HAL_RCC_OscConfig+0x150>
    return HAL_ERROR;
 80041c0:	2001      	movs	r0, #1
}
 80041c2:	4770      	bx	lr
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c4:	684a      	ldr	r2, [r1, #4]
 80041c6:	0256      	lsls	r6, r2, #9
 80041c8:	f53f ae9a 	bmi.w	8003f00 <HAL_RCC_OscConfig+0xac>
 80041cc:	e723      	b.n	8004016 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ce:	4b22      	ldr	r3, [pc, #136]	; (8004258 <HAL_RCC_OscConfig+0x404>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80041de:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041e0:	e779      	b.n	80040d6 <HAL_RCC_OscConfig+0x282>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e2:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <HAL_RCC_OscConfig+0x404>)
 80041e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041e6:	f042 0204 	orr.w	r2, r2, #4
 80041ea:	671a      	str	r2, [r3, #112]	; 0x70
 80041ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041f4:	e789      	b.n	800410a <HAL_RCC_OscConfig+0x2b6>
        tickstart = HAL_GetTick();
 80041f6:	f7ff f8c1 	bl	800337c <HAL_GetTick>
 80041fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fc:	e005      	b.n	800420a <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fe:	f7ff f8bd 	bl	800337c <HAL_GetTick>
 8004202:	1b80      	subs	r0, r0, r6
 8004204:	2802      	cmp	r0, #2
 8004206:	f63f af5d 	bhi.w	80040c4 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420a:	682b      	ldr	r3, [r5, #0]
 800420c:	0199      	lsls	r1, r3, #6
 800420e:	d4f6      	bmi.n	80041fe <HAL_RCC_OscConfig+0x3aa>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004210:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8004214:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004216:	430b      	orrs	r3, r1
 8004218:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800421c:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 8004220:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004222:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004226:	0852      	lsrs	r2, r2, #1
 8004228:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800422c:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800422e:	490b      	ldr	r1, [pc, #44]	; (800425c <HAL_RCC_OscConfig+0x408>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004230:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004234:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004236:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004238:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800423a:	f7ff f89f 	bl	800337c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800423e:	4d06      	ldr	r5, [pc, #24]	; (8004258 <HAL_RCC_OscConfig+0x404>)
        tickstart = HAL_GetTick();
 8004240:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004242:	e005      	b.n	8004250 <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004244:	f7ff f89a 	bl	800337c <HAL_GetTick>
 8004248:	1b00      	subs	r0, r0, r4
 800424a:	2802      	cmp	r0, #2
 800424c:	f63f af3a 	bhi.w	80040c4 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004250:	682b      	ldr	r3, [r5, #0]
 8004252:	019a      	lsls	r2, r3, #6
 8004254:	d5f6      	bpl.n	8004244 <HAL_RCC_OscConfig+0x3f0>
 8004256:	e6c0      	b.n	8003fda <HAL_RCC_OscConfig+0x186>
 8004258:	40023800 	.word	0x40023800
 800425c:	42470000 	.word	0x42470000

08004260 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004260:	2800      	cmp	r0, #0
 8004262:	f000 8087 	beq.w	8004374 <HAL_TIM_Base_Init+0x114>
{
 8004266:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004268:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800426c:	4604      	mov	r4, r0
 800426e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004272:	2b00      	cmp	r3, #0
 8004274:	d079      	beq.n	800436a <HAL_TIM_Base_Init+0x10a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004276:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004278:	493f      	ldr	r1, [pc, #252]	; (8004378 <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 800427a:	2302      	movs	r3, #2
 800427c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004280:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004282:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004284:	d05d      	beq.n	8004342 <HAL_TIM_Base_Init+0xe2>
 8004286:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800428a:	d031      	beq.n	80042f0 <HAL_TIM_Base_Init+0x90>
 800428c:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8004290:	428a      	cmp	r2, r1
 8004292:	d02d      	beq.n	80042f0 <HAL_TIM_Base_Init+0x90>
 8004294:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004298:	428a      	cmp	r2, r1
 800429a:	d029      	beq.n	80042f0 <HAL_TIM_Base_Init+0x90>
 800429c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80042a0:	428a      	cmp	r2, r1
 80042a2:	d025      	beq.n	80042f0 <HAL_TIM_Base_Init+0x90>
 80042a4:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80042a8:	428a      	cmp	r2, r1
 80042aa:	d04a      	beq.n	8004342 <HAL_TIM_Base_Init+0xe2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ac:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80042b0:	428a      	cmp	r2, r1
 80042b2:	d021      	beq.n	80042f8 <HAL_TIM_Base_Init+0x98>
 80042b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80042b8:	428a      	cmp	r2, r1
 80042ba:	d01d      	beq.n	80042f8 <HAL_TIM_Base_Init+0x98>
 80042bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80042c0:	428a      	cmp	r2, r1
 80042c2:	d019      	beq.n	80042f8 <HAL_TIM_Base_Init+0x98>
 80042c4:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80042c8:	428a      	cmp	r2, r1
 80042ca:	d015      	beq.n	80042f8 <HAL_TIM_Base_Init+0x98>
 80042cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80042d0:	428a      	cmp	r2, r1
 80042d2:	d011      	beq.n	80042f8 <HAL_TIM_Base_Init+0x98>
 80042d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80042d8:	428a      	cmp	r2, r1
 80042da:	d00d      	beq.n	80042f8 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042dc:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042de:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e4:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80042e6:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042e8:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042ea:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80042ec:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042ee:	e010      	b.n	8004312 <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 80042f0:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80042f6:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042f8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042fa:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80042fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004300:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004306:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004308:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800430a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800430c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800430e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004310:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004312:	2301      	movs	r3, #1
 8004314:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004316:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800431e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004322:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004326:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800432a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800432e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004332:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800433a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800433e:	2000      	movs	r0, #0
}
 8004340:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8004342:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004344:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800434a:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800434c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004350:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004352:	69a1      	ldr	r1, [r4, #24]
 8004354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004358:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800435a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800435c:	68e3      	ldr	r3, [r4, #12]
 800435e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004360:	6863      	ldr	r3, [r4, #4]
 8004362:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004364:	6963      	ldr	r3, [r4, #20]
 8004366:	6313      	str	r3, [r2, #48]	; 0x30
 8004368:	e7d3      	b.n	8004312 <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 800436a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800436e:	f7fe f823 	bl	80023b8 <HAL_TIM_Base_MspInit>
 8004372:	e780      	b.n	8004276 <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 8004374:	2001      	movs	r0, #1
}
 8004376:	4770      	bx	lr
 8004378:	40010000 	.word	0x40010000

0800437c <HAL_TIM_PWM_MspInit>:
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop

08004380 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004380:	2800      	cmp	r0, #0
 8004382:	f000 8087 	beq.w	8004494 <HAL_TIM_PWM_Init+0x114>
{
 8004386:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004388:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800438c:	4604      	mov	r4, r0
 800438e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004392:	2b00      	cmp	r3, #0
 8004394:	d079      	beq.n	800448a <HAL_TIM_PWM_Init+0x10a>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004396:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004398:	493f      	ldr	r1, [pc, #252]	; (8004498 <HAL_TIM_PWM_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 800439a:	2302      	movs	r3, #2
 800439c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043a0:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80043a2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043a4:	d05d      	beq.n	8004462 <HAL_TIM_PWM_Init+0xe2>
 80043a6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80043aa:	d031      	beq.n	8004410 <HAL_TIM_PWM_Init+0x90>
 80043ac:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80043b0:	428a      	cmp	r2, r1
 80043b2:	d02d      	beq.n	8004410 <HAL_TIM_PWM_Init+0x90>
 80043b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80043b8:	428a      	cmp	r2, r1
 80043ba:	d029      	beq.n	8004410 <HAL_TIM_PWM_Init+0x90>
 80043bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80043c0:	428a      	cmp	r2, r1
 80043c2:	d025      	beq.n	8004410 <HAL_TIM_PWM_Init+0x90>
 80043c4:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80043c8:	428a      	cmp	r2, r1
 80043ca:	d04a      	beq.n	8004462 <HAL_TIM_PWM_Init+0xe2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043cc:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80043d0:	428a      	cmp	r2, r1
 80043d2:	d021      	beq.n	8004418 <HAL_TIM_PWM_Init+0x98>
 80043d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80043d8:	428a      	cmp	r2, r1
 80043da:	d01d      	beq.n	8004418 <HAL_TIM_PWM_Init+0x98>
 80043dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80043e0:	428a      	cmp	r2, r1
 80043e2:	d019      	beq.n	8004418 <HAL_TIM_PWM_Init+0x98>
 80043e4:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80043e8:	428a      	cmp	r2, r1
 80043ea:	d015      	beq.n	8004418 <HAL_TIM_PWM_Init+0x98>
 80043ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80043f0:	428a      	cmp	r2, r1
 80043f2:	d011      	beq.n	8004418 <HAL_TIM_PWM_Init+0x98>
 80043f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80043f8:	428a      	cmp	r2, r1
 80043fa:	d00d      	beq.n	8004418 <HAL_TIM_PWM_Init+0x98>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043fc:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043fe:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004404:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004406:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8004408:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800440a:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800440c:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800440e:	e010      	b.n	8004432 <HAL_TIM_PWM_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8004410:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004416:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004418:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800441a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800441c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004420:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004426:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004428:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800442a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800442c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800442e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004430:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004432:	2301      	movs	r3, #1
 8004434:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004436:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800443a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800443e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004442:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004446:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800444a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800444e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004452:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004456:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800445a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800445e:	2000      	movs	r0, #0
}
 8004460:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8004462:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004464:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800446a:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800446c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004470:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004472:	69a1      	ldr	r1, [r4, #24]
 8004474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004478:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800447a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800447c:	68e3      	ldr	r3, [r4, #12]
 800447e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004480:	6863      	ldr	r3, [r4, #4]
 8004482:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004484:	6963      	ldr	r3, [r4, #20]
 8004486:	6313      	str	r3, [r2, #48]	; 0x30
 8004488:	e7d3      	b.n	8004432 <HAL_TIM_PWM_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 800448a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800448e:	f7ff ff75 	bl	800437c <HAL_TIM_PWM_MspInit>
 8004492:	e780      	b.n	8004396 <HAL_TIM_PWM_Init+0x16>
    return HAL_ERROR;
 8004494:	2001      	movs	r0, #1
}
 8004496:	4770      	bx	lr
 8004498:	40010000 	.word	0x40010000

0800449c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800449c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	f000 80d2 	beq.w	800464a <HAL_TIM_PWM_ConfigChannel+0x1ae>
 80044a6:	2301      	movs	r3, #1
{
 80044a8:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 80044aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80044ae:	2a0c      	cmp	r2, #12
 80044b0:	d832      	bhi.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x7c>
 80044b2:	e8df f002 	tbb	[pc, r2]
 80044b6:	3107      	.short	0x3107
 80044b8:	316a3131 	.word	0x316a3131
 80044bc:	319b3131 	.word	0x319b3131
 80044c0:	3131      	.short	0x3131
 80044c2:	37          	.byte	0x37
 80044c3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044c4:	6803      	ldr	r3, [r0, #0]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044c6:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044c8:	6a1a      	ldr	r2, [r3, #32]
 80044ca:	f022 0201 	bic.w	r2, r2, #1
 80044ce:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80044d0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80044d2:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80044d4:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044d6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80044da:	4334      	orrs	r4, r6

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044dc:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80044de:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 80044e2:	4332      	orrs	r2, r6

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044e4:	4e74      	ldr	r6, [pc, #464]	; (80046b8 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 80044e6:	42b3      	cmp	r3, r6
 80044e8:	f000 80b1 	beq.w	800464e <HAL_TIM_PWM_ConfigChannel+0x1b2>
 80044ec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80044f0:	42b3      	cmp	r3, r6
 80044f2:	f000 80ac 	beq.w	800464e <HAL_TIM_PWM_ConfigChannel+0x1b2>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f6:	605d      	str	r5, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044f8:	619c      	str	r4, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044fa:	684c      	ldr	r4, [r1, #4]
 80044fc:	635c      	str	r4, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fe:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004500:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004502:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004504:	f042 0208 	orr.w	r2, r2, #8
 8004508:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800450a:	699a      	ldr	r2, [r3, #24]
 800450c:	f022 0204 	bic.w	r2, r2, #4
 8004510:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004512:	699a      	ldr	r2, [r3, #24]
 8004514:	430a      	orrs	r2, r1
 8004516:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004518:	2300      	movs	r3, #0
 800451a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800451e:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004520:	4618      	mov	r0, r3
}
 8004522:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004524:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004526:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004528:	6a1a      	ldr	r2, [r3, #32]
 800452a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800452e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004530:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004532:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004534:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004536:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800453a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800453e:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004540:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004544:	ea42 3206 	orr.w	r2, r2, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004548:	4e5b      	ldr	r6, [pc, #364]	; (80046b8 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800454a:	42b3      	cmp	r3, r6
 800454c:	f000 809e 	beq.w	800468c <HAL_TIM_PWM_ConfigChannel+0x1f0>
 8004550:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004554:	42b3      	cmp	r3, r6
 8004556:	f000 8099 	beq.w	800468c <HAL_TIM_PWM_ConfigChannel+0x1f0>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455a:	605d      	str	r5, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800455c:	61dc      	str	r4, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800455e:	684c      	ldr	r4, [r1, #4]
 8004560:	641c      	str	r4, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004562:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004564:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004566:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004568:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800456c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800457c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800457e:	2300      	movs	r3, #0
 8004580:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004584:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004586:	4618      	mov	r0, r3
}
 8004588:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800458a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800458c:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800458e:	6a1a      	ldr	r2, [r3, #32]
 8004590:	f022 0210 	bic.w	r2, r2, #16
 8004594:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004596:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004598:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800459a:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800459c:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045a0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045a4:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80045a6:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045aa:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045ae:	4e42      	ldr	r6, [pc, #264]	; (80046b8 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 80045b0:	42b3      	cmp	r3, r6
 80045b2:	d05b      	beq.n	800466c <HAL_TIM_PWM_ConfigChannel+0x1d0>
 80045b4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80045b8:	42b3      	cmp	r3, r6
 80045ba:	d057      	beq.n	800466c <HAL_TIM_PWM_ConfigChannel+0x1d0>
  TIMx->CR2 = tmpcr2;
 80045bc:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80045be:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80045c0:	684c      	ldr	r4, [r1, #4]
 80045c2:	639c      	str	r4, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80045c4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045c6:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045c8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80045de:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80045e0:	2300      	movs	r3, #0
 80045e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80045e6:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80045e8:	4618      	mov	r0, r3
}
 80045ea:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045ec:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80045ee:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045f0:	6a1a      	ldr	r2, [r3, #32]
 80045f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045f6:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80045f8:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80045fa:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80045fc:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045fe:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004602:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004604:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004606:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800460a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800460e:	4e2a      	ldr	r6, [pc, #168]	; (80046b8 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8004610:	42b3      	cmp	r3, r6
 8004612:	d041      	beq.n	8004698 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8004614:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004618:	42b3      	cmp	r3, r6
 800461a:	d03d      	beq.n	8004698 <HAL_TIM_PWM_ConfigChannel+0x1fc>
  TIMx->CR2 = tmpcr2;
 800461c:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800461e:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004620:	684c      	ldr	r4, [r1, #4]
 8004622:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004624:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004626:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004628:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800462a:	f042 0208 	orr.w	r2, r2, #8
 800462e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004630:	69da      	ldr	r2, [r3, #28]
 8004632:	f022 0204 	bic.w	r2, r2, #4
 8004636:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004638:	69da      	ldr	r2, [r3, #28]
 800463a:	430a      	orrs	r2, r1
 800463c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800463e:	2300      	movs	r3, #0
 8004640:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004644:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004646:	4618      	mov	r0, r3
}
 8004648:	4770      	bx	lr
  __HAL_LOCK(htim);
 800464a:	2002      	movs	r0, #2
}
 800464c:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 800464e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004650:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004654:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8004656:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800465a:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800465e:	ea47 0c06 	orr.w	ip, r7, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004662:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004666:	ea4c 0505 	orr.w	r5, ip, r5
 800466a:	e744      	b.n	80044f6 <HAL_TIM_PWM_ConfigChannel+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800466c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800466e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004672:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004676:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800467a:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800467e:	ea47 0c06 	orr.w	ip, r7, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004686:	ea45 058c 	orr.w	r5, r5, ip, lsl #2
 800468a:	e797      	b.n	80045bc <HAL_TIM_PWM_ConfigChannel+0x120>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800468c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800468e:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004692:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8004696:	e760      	b.n	800455a <HAL_TIM_PWM_ConfigChannel+0xbe>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004698:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800469a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800469e:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046a2:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046a6:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046aa:	ea47 0c06 	orr.w	ip, r7, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046b2:	ea45 150c 	orr.w	r5, r5, ip, lsl #4
 80046b6:	e7b1      	b.n	800461c <HAL_TIM_PWM_ConfigChannel+0x180>
 80046b8:	40010000 	.word	0x40010000

080046bc <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80046bc:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80046c0:	2a01      	cmp	r2, #1
 80046c2:	d049      	beq.n	8004758 <HAL_TIM_SlaveConfigSynchro+0x9c>
 80046c4:	4603      	mov	r3, r0
{
 80046c6:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	2202      	movs	r2, #2
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046ca:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 80046d0:	2001      	movs	r0, #1
 80046d2:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80046d6:	68a2      	ldr	r2, [r4, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80046d8:	684d      	ldr	r5, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80046da:	680e      	ldr	r6, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 80046dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80046e0:	432a      	orrs	r2, r5
  tmpsmcr &= ~TIM_SMCR_SMS;
 80046e2:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80046e6:	4332      	orrs	r2, r6

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80046e8:	2d60      	cmp	r5, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 80046ea:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80046ec:	d04d      	beq.n	800478a <HAL_TIM_SlaveConfigSynchro+0xce>
 80046ee:	d825      	bhi.n	800473c <HAL_TIM_SlaveConfigSynchro+0x80>
 80046f0:	2d40      	cmp	r5, #64	; 0x40
 80046f2:	d033      	beq.n	800475c <HAL_TIM_SlaveConfigSynchro+0xa0>
 80046f4:	2d50      	cmp	r5, #80	; 0x50
 80046f6:	d110      	bne.n	800471a <HAL_TIM_SlaveConfigSynchro+0x5e>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f8:	688a      	ldr	r2, [r1, #8]
 80046fa:	6908      	ldr	r0, [r1, #16]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046fc:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046fe:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004702:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004704:	6a22      	ldr	r2, [r4, #32]
 8004706:	f022 0201 	bic.w	r2, r2, #1
 800470a:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800470c:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800470e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004712:	ea42 1200 	orr.w	r2, r2, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004716:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8004718:	6221      	str	r1, [r4, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800471a:	68e2      	ldr	r2, [r4, #12]
 800471c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004720:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004722:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 8004724:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8004726:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004728:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800472c:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 800472e:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004732:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 8004736:	4608      	mov	r0, r1
}
 8004738:	bc70      	pop	{r4, r5, r6}
 800473a:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800473c:	2d70      	cmp	r5, #112	; 0x70
 800473e:	d1ec      	bne.n	800471a <HAL_TIM_SlaveConfigSynchro+0x5e>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004740:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8004744:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004746:	432a      	orrs	r2, r5
 8004748:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800474a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800474e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004752:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004754:	60a2      	str	r2, [r4, #8]
 8004756:	e7e0      	b.n	800471a <HAL_TIM_SlaveConfigSynchro+0x5e>
  __HAL_LOCK(htim);
 8004758:	2002      	movs	r0, #2
}
 800475a:	4770      	bx	lr
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800475c:	2e05      	cmp	r6, #5
 800475e:	d00d      	beq.n	800477c <HAL_TIM_SlaveConfigSynchro+0xc0>
      tmpccer = htim->Instance->CCER;
 8004760:	6a20      	ldr	r0, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004762:	6a22      	ldr	r2, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004764:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	6222      	str	r2, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800476c:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800476e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004772:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8004776:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8004778:	6220      	str	r0, [r4, #32]
      break;
 800477a:	e7ce      	b.n	800471a <HAL_TIM_SlaveConfigSynchro+0x5e>
    __HAL_UNLOCK(htim);
 800477c:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 800477e:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004786:	bc70      	pop	{r4, r5, r6}
 8004788:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800478a:	6a22      	ldr	r2, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800478c:	6888      	ldr	r0, [r1, #8]
 800478e:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004790:	f022 0210 	bic.w	r2, r2, #16
 8004794:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004796:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8004798:	6a22      	ldr	r2, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800479a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800479e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047a2:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80047a6:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80047aa:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80047ac:	6222      	str	r2, [r4, #32]
 80047ae:	e7b4      	b.n	800471a <HAL_TIM_SlaveConfigSynchro+0x5e>

080047b0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d037      	beq.n	8004828 <HAL_TIMEx_MasterConfigSynchronization+0x78>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047b8:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80047ba:	2202      	movs	r2, #2
{
 80047bc:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80047be:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80047c2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047c4:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80047c6:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80047c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047cc:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d0:	4a16      	ldr	r2, [pc, #88]	; (800482c <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d01a      	beq.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80047d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047da:	d017      	beq.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80047dc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d013      	beq.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80047e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00f      	beq.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80047ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00b      	beq.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80047f4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d007      	beq.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80047fc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004800:	4293      	cmp	r3, r2
 8004802:	d003      	beq.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004804:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004808:	4293      	cmp	r3, r2
 800480a:	d104      	bne.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0x66>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800480c:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800480e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004812:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004814:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004816:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004818:	2201      	movs	r2, #1
 800481a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800481e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004822:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8004824:	4618      	mov	r0, r3
}
 8004826:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004828:	2002      	movs	r0, #2
}
 800482a:	4770      	bx	lr
 800482c:	40010000 	.word	0x40010000

08004830 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004830:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d023      	beq.n	8004880 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 8004838:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800483a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800483e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004842:	4602      	mov	r2, r0
 8004844:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004846:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004848:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800484a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800484e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004850:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004854:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004856:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800485c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800485e:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004860:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004862:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004866:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800486c:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 800486e:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004870:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8004872:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8004874:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8004878:	4608      	mov	r0, r1
}
 800487a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800487e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004880:	2002      	movs	r0, #2
}
 8004882:	4770      	bx	lr

08004884 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004884:	2800      	cmp	r0, #0
 8004886:	f000 808f 	beq.w	80049a8 <HAL_UART_Init+0x124>
{
 800488a:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800488c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004890:	4604      	mov	r4, r0
 8004892:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 8081 	beq.w	800499e <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800489c:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800489e:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 80048a0:	2224      	movs	r2, #36	; 0x24
 80048a2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ac:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048ae:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048b0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048b2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80048b6:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048b8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048ba:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048bc:	4302      	orrs	r2, r0
 80048be:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80048c0:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048c2:	4302      	orrs	r2, r0
 80048c4:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 80048c6:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80048ca:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048ce:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80048d0:	430a      	orrs	r2, r1
 80048d2:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048d4:	695a      	ldr	r2, [r3, #20]
 80048d6:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048d8:	4934      	ldr	r1, [pc, #208]	; (80049ac <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80048de:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048e0:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048e2:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048e4:	d035      	beq.n	8004952 <HAL_UART_Init+0xce>
 80048e6:	4a32      	ldr	r2, [pc, #200]	; (80049b0 <HAL_UART_Init+0x12c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d032      	beq.n	8004952 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ec:	f7ff fa3c 	bl	8003d68 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048f0:	69e3      	ldr	r3, [r4, #28]
 80048f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f6:	d032      	beq.n	800495e <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048f8:	6863      	ldr	r3, [r4, #4]
 80048fa:	2119      	movs	r1, #25
 80048fc:	009a      	lsls	r2, r3, #2
 80048fe:	fba0 0101 	umull	r0, r1, r0, r1
 8004902:	0f9b      	lsrs	r3, r3, #30
 8004904:	f7fb fc80 	bl	8000208 <__aeabi_uldivmod>
 8004908:	492a      	ldr	r1, [pc, #168]	; (80049b4 <HAL_UART_Init+0x130>)
 800490a:	fba1 3200 	umull	r3, r2, r1, r0
 800490e:	0952      	lsrs	r2, r2, #5
 8004910:	2564      	movs	r5, #100	; 0x64
 8004912:	fb05 0012 	mls	r0, r5, r2, r0
 8004916:	0100      	lsls	r0, r0, #4
 8004918:	3032      	adds	r0, #50	; 0x32
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	fba1 1000 	umull	r1, r0, r1, r0
 8004920:	0112      	lsls	r2, r2, #4
 8004922:	eb02 1250 	add.w	r2, r2, r0, lsr #5
 8004926:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800492e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004930:	695a      	ldr	r2, [r3, #20]
 8004932:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004936:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004938:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493a:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800493c:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 800493e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004942:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004944:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004946:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800494a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 800494e:	4628      	mov	r0, r5
}
 8004950:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8004952:	f7ff fa19 	bl	8003d88 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004956:	69e3      	ldr	r3, [r4, #28]
 8004958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800495c:	d1cc      	bne.n	80048f8 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800495e:	6862      	ldr	r2, [r4, #4]
 8004960:	2119      	movs	r1, #25
 8004962:	1892      	adds	r2, r2, r2
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	415b      	adcs	r3, r3
 800496a:	fba0 0101 	umull	r0, r1, r0, r1
 800496e:	f7fb fc4b 	bl	8000208 <__aeabi_uldivmod>
 8004972:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <HAL_UART_Init+0x130>)
 8004974:	fba3 2500 	umull	r2, r5, r3, r0
 8004978:	096d      	lsrs	r5, r5, #5
 800497a:	2264      	movs	r2, #100	; 0x64
 800497c:	fb02 0215 	mls	r2, r2, r5, r0
 8004980:	00d2      	lsls	r2, r2, #3
 8004982:	3232      	adds	r2, #50	; 0x32
 8004984:	fba3 3202 	umull	r3, r2, r3, r2
 8004988:	f3c2 1142 	ubfx	r1, r2, #5, #3
 800498c:	0912      	lsrs	r2, r2, #4
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8004994:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8004998:	440a      	add	r2, r1
 800499a:	609a      	str	r2, [r3, #8]
 800499c:	e7c4      	b.n	8004928 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 800499e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80049a2:	f7fd fd75 	bl	8002490 <HAL_UART_MspInit>
 80049a6:	e779      	b.n	800489c <HAL_UART_Init+0x18>
    return HAL_ERROR;
 80049a8:	2001      	movs	r0, #1
}
 80049aa:	4770      	bx	lr
 80049ac:	40011000 	.word	0x40011000
 80049b0:	40011400 	.word	0x40011400
 80049b4:	51eb851f 	.word	0x51eb851f

080049b8 <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 80049b8:	88c0      	ldrh	r0, [r0, #6]
 80049ba:	4770      	bx	lr

080049bc <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80049bc:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80049be:	8840      	ldrh	r0, [r0, #2]
 80049c0:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 80049c4:	0c00      	lsrs	r0, r0, #16
 80049c6:	4770      	bx	lr

080049c8 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 80049c8:	b500      	push	{lr}
 80049ca:	140a      	asrs	r2, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80049cc:	f8b0 c000 	ldrh.w	ip, [r0]
{
 80049d0:	460b      	mov	r3, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 80049d2:	fb02 fe02 	mul.w	lr, r2, r2
 80049d6:	b209      	sxth	r1, r1
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80049d8:	fb0c fc0c 	mul.w	ip, ip, ip
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80049dc:	fb01 ee01 	mla	lr, r1, r1, lr
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80049e0:	45e6      	cmp	lr, ip
{
 80049e2:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80049e4:	d91e      	bls.n	8004a24 <Circle_Limitation+0x5c>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 80049e6:	f890 30b2 	ldrb.w	r3, [r0, #178]	; 0xb2
 80049ea:	ebc3 631e 	rsb	r3, r3, lr, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80049f4:	2300      	movs	r3, #0

    sw_temp = Vqd.q * ( int32_t )table_element;
 80049f6:	8880      	ldrh	r0, [r0, #4]
 80049f8:	fb00 f101 	mul.w	r1, r0, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80049fc:	4299      	cmp	r1, r3

    sw_temp = Vqd.d * ( int32_t )( table_element );
 80049fe:	fb00 f202 	mul.w	r2, r0, r2
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004a02:	bfbc      	itt	lt
 8004a04:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8004a08:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004a0a:	2a00      	cmp	r2, #0
 8004a0c:	bfb8      	it	lt
 8004a0e:	f502 42ff 	addlt.w	r2, r2, #32640	; 0x7f80
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004a12:	ea4f 31e1 	mov.w	r1, r1, asr #15
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004a16:	bfb8      	it	lt
 8004a18:	327f      	addlt	r2, #127	; 0x7f
 8004a1a:	f361 030f 	bfi	r3, r1, #0, #16
 8004a1e:	13d2      	asrs	r2, r2, #15
 8004a20:	f362 431f 	bfi	r3, r2, #16, #16
  }

  return ( local_vqd );
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	2000      	movs	r0, #0
 8004a28:	f362 000f 	bfi	r0, r2, #0, #16
 8004a2c:	0c1b      	lsrs	r3, r3, #16
 8004a2e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8004a32:	b005      	add	sp, #20
 8004a34:	f85d fb04 	ldr.w	pc, [sp], #4

08004a38 <DAC_SetChannelConfig>:
  */
__weak void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                              MC_Protocol_REG_t bVariable)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->bChannel_variable[bChannel] = bVariable;
 8004a38:	4401      	add	r1, r0
 8004a3a:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
}
 8004a3e:	4770      	bx	lr

08004a40 <DAC_GetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->bChannel_variable[bChannel]);
 8004a40:	4401      	add	r1, r0
}
 8004a42:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8004a46:	4770      	bx	lr

08004a48 <DAC_SetUserChannelValue>:
  */
__weak void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
                              int16_t hValue)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->hUserValue[bUserChNumber] = hValue;
 8004a48:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8004a4c:	864a      	strh	r2, [r1, #50]	; 0x32
}
 8004a4e:	4770      	bx	lr

08004a50 <DAC_GetUserChannelValue>:
  * @retval none.
  */
__weak int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->hUserValue[bUserChNumber]);
 8004a50:	eb00 0141 	add.w	r1, r0, r1, lsl #1
}
 8004a54:	f9b1 0032 	ldrsh.w	r0, [r1, #50]	; 0x32
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop

08004a5c <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8004a60:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8004a62:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8004a66:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8004a6a:	f8a0 311b 	strh.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
  pHandle->RxFrameLevel = 0;
 8004a6e:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
}
 8004a72:	4770      	bx	lr

08004a74 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8004a74:	b120      	cbz	r0, 8004a80 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8004a76:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8004a7a:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8004a7c:	9b00      	ldr	r3, [sp, #0]
 8004a7e:	60c3      	str	r3, [r0, #12]
  }
}
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop

08004a84 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8004a84:	b190      	cbz	r0, 8004aac <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8004a86:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8004a88:	7803      	ldrb	r3, [r0, #0]
    nSum += pFrame->Size;
 8004a8a:	440b      	add	r3, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004a8c:	b151      	cbz	r1, 8004aa4 <FCP_CalcCRC+0x20>
 8004a8e:	1c82      	adds	r2, r0, #2
 8004a90:	3901      	subs	r1, #1
 8004a92:	3001      	adds	r0, #1
 8004a94:	fa52 f181 	uxtab	r1, r2, r1
    {
      nSum += pFrame->Buffer[idx];
 8004a98:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004a9c:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004a9e:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8004aa0:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004aa2:	d1f9      	bne.n	8004a98 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8004aa4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 8004aa8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  }

  return nCRC ;
}
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop

08004ab0 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8004ab0:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 8004ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 8004ab6:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 8004ab8:	2100      	movs	r1, #0
 8004aba:	f002 f893 	bl	8006be4 <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8004ac4:	bd10      	pop	{r4, pc}
 8004ac6:	bf00      	nop

08004ac8 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8004ac8:	f8b0 c100 	ldrh.w	ip, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8004acc:	f10c 0201 	add.w	r2, ip, #1
 8004ad0:	b292      	uxth	r2, r2
{
 8004ad2:	b510      	push	{r4, lr}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8004ad4:	2a80      	cmp	r2, #128	; 0x80
{
 8004ad6:	4604      	mov	r4, r0
    pHandle->hNextMeasBufferIndex = 0u;
 8004ad8:	bf28      	it	cs
 8004ada:	2200      	movcs	r2, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8004adc:	f824 101c 	strh.w	r1, [r4, ip, lsl #1]
{
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	f8a4 2100 	strh.w	r2, [r4, #256]	; 0x100
 8004ae6:	1ea3      	subs	r3, r4, #2
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8004ae8:	f8a4 c102 	strh.w	ip, [r4, #258]	; 0x102
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004aec:	f104 0efe 	add.w	lr, r4, #254	; 0xfe
  int32_t wAux = 0;
 8004af0:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8004af2:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004af6:	4573      	cmp	r3, lr
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8004af8:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004afa:	d1fa      	bne.n	8004af2 <MPM_CalcElMotorPower+0x2a>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8004afc:	2a00      	cmp	r2, #0
 8004afe:	bfb8      	it	lt
 8004b00:	327f      	addlt	r2, #127	; 0x7f
 8004b02:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8004b04:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8004b08:	bd10      	pop	{r4, pc}
 8004b0a:	bf00      	nop

08004b0c <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8004b0c:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop

08004b14 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8004b14:	8a03      	ldrh	r3, [r0, #16]
 8004b16:	8b42      	ldrh	r2, [r0, #26]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d306      	bcc.n	8004b2a <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8004b1c:	8b82      	ldrh	r2, [r0, #28]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d901      	bls.n	8004b26 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8004b22:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8004b24:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8004b26:	8ac0      	ldrh	r0, [r0, #22]
 8004b28:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8004b2a:	2008      	movs	r0, #8
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop

08004b30 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8004b30:	2300      	movs	r3, #0
 8004b32:	8203      	strh	r3, [r0, #16]
}
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop

08004b38 <NTC_Init>:
{
 8004b38:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004b3a:	7803      	ldrb	r3, [r0, #0]
{
 8004b3c:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004b3e:	b123      	cbz	r3, 8004b4a <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8004b40:	8a43      	ldrh	r3, [r0, #18]
 8004b42:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8004b44:	2200      	movs	r2, #0
 8004b46:	82c2      	strh	r2, [r0, #22]
}
 8004b48:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8004b4a:	3004      	adds	r0, #4
 8004b4c:	f7fd fa2a 	bl	8001fa4 <RCM_RegisterRegConv>
 8004b50:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8004b54:	4620      	mov	r0, r4
 8004b56:	f7ff ffeb 	bl	8004b30 <NTC_Clear>
}
 8004b5a:	bd10      	pop	{r4, pc}

08004b5c <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8004b5c:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8004b5e:	7803      	ldrb	r3, [r0, #0]
{
 8004b60:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004b62:	b113      	cbz	r3, 8004b6a <NTC_CalcAvTemp+0xe>
 8004b64:	2000      	movs	r0, #0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );

      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
    }

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8004b66:	82e0      	strh	r0, [r4, #22]
  {
    pHandle->hFaultState = MC_NO_ERROR;
  }

  return ( pHandle->hFaultState );
}
 8004b68:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8004b6a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8004b6e:	f7fd faf5 	bl	800215c <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8004b72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b76:	4298      	cmp	r0, r3
 8004b78:	d007      	beq.n	8004b8a <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8004b7a:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8004b7c:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8004b7e:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 8004b80:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8004b84:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8004b88:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	f7ff ffc2 	bl	8004b14 <NTC_SetFaultState>
 8004b90:	82e0      	strh	r0, [r4, #22]
}
 8004b92:	bd10      	pop	{r4, pc}

08004b94 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8004b94:	7803      	ldrb	r3, [r0, #0]
 8004b96:	b983      	cbnz	r3, 8004bba <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8004b98:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8004b9a:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8004b9c:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8004ba0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8004ba2:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 8004ba4:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bfbc      	itt	lt
 8004bac:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8004bb0:	33ff      	addlt	r3, #255	; 0xff
 8004bb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8004bb6:	b200      	sxth	r0, r0
 8004bb8:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8004bba:	8a80      	ldrh	r0, [r0, #20]
}
 8004bbc:	b200      	sxth	r0, r0
 8004bbe:	4770      	bx	lr

08004bc0 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8004bc0:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8004bc2:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8004bc4:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8004bc6:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8004bc8:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8004bca:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8004bcc:	6283      	str	r3, [r0, #40]	; 0x28
}
 8004bce:	4770      	bx	lr

08004bd0 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8004bd0:	8081      	strh	r1, [r0, #4]
}
 8004bd2:	4770      	bx	lr

08004bd4 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8004bd4:	80c1      	strh	r1, [r0, #6]
}
 8004bd6:	4770      	bx	lr

08004bd8 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8004bd8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop

08004be0 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8004be0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop

08004be8 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8004be8:	6081      	str	r1, [r0, #8]

  return;
}
 8004bea:	4770      	bx	lr

08004bec <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8004bec:	8b00      	ldrh	r0, [r0, #24]
 8004bee:	4770      	bx	lr

08004bf0 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8004bf0:	8b40      	ldrh	r0, [r0, #26]
 8004bf2:	4770      	bx	lr

08004bf4 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8004bf4:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8004bf6:	4770      	bx	lr

08004bf8 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8004bf8:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop

08004c00 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004c00:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8004c04:	4603      	mov	r3, r0
 8004c06:	b510      	push	{r4, lr}

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8004c08:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8004c0c:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8004c10:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004c14:	fb01 f202 	mul.w	r2, r1, r2
  if ( pHandle->hKiGain == 0 )
 8004c18:	b18c      	cbz	r4, 8004c3e <PI_Controller+0x3e>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8004c1a:	fb04 f101 	mul.w	r1, r4, r1
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8004c1e:	689c      	ldr	r4, [r3, #8]

    if ( wIntegral_sum_temp < 0 )
 8004c20:	eb14 0e01 	adds.w	lr, r4, r1
 8004c24:	d421      	bmi.n	8004c6a <PI_Controller+0x6a>
    {
      if ( pHandle->wIntegralTerm < 0 )
      {
        if ( wIntegral_Term < 0 )
        {
          wIntegral_sum_temp = -INT32_MAX;
 8004c26:	420c      	tst	r4, r1
 8004c28:	4916      	ldr	r1, [pc, #88]	; (8004c84 <PI_Controller+0x84>)
 8004c2a:	bf48      	it	mi
 8004c2c:	468e      	movmi	lr, r1
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004c2e:	68d9      	ldr	r1, [r3, #12]
 8004c30:	4571      	cmp	r1, lr
 8004c32:	db05      	blt.n	8004c40 <PI_Controller+0x40>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8004c34:	6919      	ldr	r1, [r3, #16]
 8004c36:	4571      	cmp	r1, lr
 8004c38:	dc02      	bgt.n	8004c40 <PI_Controller+0x40>
    {
      pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
    }
    else
    {
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 8004c3a:	4671      	mov	r1, lr
 8004c3c:	e000      	b.n	8004c40 <PI_Controller+0x40>
 8004c3e:	4621      	mov	r1, r4
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8004c40:	8b9c      	ldrh	r4, [r3, #28]
 8004c42:	4122      	asrs	r2, r4
 8004c44:	8bdc      	ldrh	r4, [r3, #30]
 8004c46:	fa41 f404 	asr.w	r4, r1, r4
 8004c4a:	4422      	add	r2, r4
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8004c4c:	4290      	cmp	r0, r2
 8004c4e:	da03      	bge.n	8004c58 <PI_Controller+0x58>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8004c50:	1a82      	subs	r2, r0, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8004c52:	4411      	add	r1, r2
 8004c54:	6099      	str	r1, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8004c56:	bd10      	pop	{r4, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 8004c58:	4594      	cmp	ip, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
 8004c5a:	bfc5      	ittet	gt
 8004c5c:	ebac 0202 	subgt.w	r2, ip, r2
  pHandle->wIntegralTerm += wDischarge;
 8004c60:	1889      	addgt	r1, r1, r2
  return ( ( int16_t )( wOutput_32 ) );
 8004c62:	b210      	sxthle	r0, r2
    wOutput_32 = hLowerOutputLimit;
 8004c64:	4660      	movgt	r0, ip
  pHandle->wIntegralTerm += wDischarge;
 8004c66:	6099      	str	r1, [r3, #8]
}
 8004c68:	bd10      	pop	{r4, pc}
      if ( pHandle->wIntegralTerm > 0 )
 8004c6a:	2c00      	cmp	r4, #0
 8004c6c:	dddf      	ble.n	8004c2e <PI_Controller+0x2e>
        if ( wIntegral_Term > 0 )
 8004c6e:	2900      	cmp	r1, #0
 8004c70:	dddd      	ble.n	8004c2e <PI_Controller+0x2e>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004c72:	68d9      	ldr	r1, [r3, #12]
 8004c74:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8004c78:	42a1      	cmp	r1, r4
 8004c7a:	d1e1      	bne.n	8004c40 <PI_Controller+0x40>
          wIntegral_sum_temp = INT32_MAX;
 8004c7c:	468e      	mov	lr, r1
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 8004c7e:	4671      	mov	r1, lr
 8004c80:	e7de      	b.n	8004c40 <PI_Controller+0x40>
 8004c82:	bf00      	nop
 8004c84:	80000001 	.word	0x80000001

08004c88 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8004c88:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
{
 8004c8c:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8004c8e:	89d1      	ldrh	r1, [r2, #14]
 8004c90:	8b14      	ldrh	r4, [r2, #24]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8004c92:	8993      	ldrh	r3, [r2, #12]
{
 8004c94:	4605      	mov	r5, r0
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8004c96:	8ad0      	ldrh	r0, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004c98:	f8d5 6108 	ldr.w	r6, [r5, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8004c9c:	fb11 f204 	smulbb	r2, r1, r4
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8004ca0:	fb13 2400 	smlabb	r4, r3, r0, r2
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004ca4:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
 8004ca8:	f7ff fe88 	bl	80049bc <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8004cac:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004cae:	490f      	ldr	r1, [pc, #60]	; (8004cec <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004cb0:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 8004cb4:	bfb8      	it	lt
 8004cb6:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004cba:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 8004cbe:	bfb8      	it	lt
 8004cc0:	33ff      	addlt	r3, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004cc2:	fb81 1000 	smull	r1, r0, r1, r0
 8004cc6:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
  wAux /= 65536;
 8004cca:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 8004ccc:	fb02 f303 	mul.w	r3, r2, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8004cd0:	4907      	ldr	r1, [pc, #28]	; (8004cf0 <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8004cd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004cd6:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8004cd8:	fb81 2103 	smull	r2, r1, r1, r3
 8004cdc:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8004cde:	4628      	mov	r0, r5
 8004ce0:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8004ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8004ce8:	f7ff beee 	b.w	8004ac8 <MPM_CalcElMotorPower>
 8004cec:	1b4e81b5 	.word	0x1b4e81b5
 8004cf0:	66666667 	.word	0x66666667

08004cf4 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8004cf4:	4b17      	ldr	r3, [pc, #92]	; (8004d54 <startTimers+0x60>)
 8004cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8004cf8:	07d2      	lsls	r2, r2, #31
 8004cfa:	d415      	bmi.n	8004d28 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8004cfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004d06:	b082      	sub	sp, #8
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004d08:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004d0c:	f002 0201 	and.w	r2, r2, #1
 8004d10:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8004d12:	9a01      	ldr	r2, [sp, #4]
 8004d14:	694a      	ldr	r2, [r1, #20]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8004d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d1e:	f022 0201 	bic.w	r2, r2, #1
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8004d24:	b002      	add	sp, #8
 8004d26:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8004d28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d2c:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004d2e:	6859      	ldr	r1, [r3, #4]
 8004d30:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004d34:	f041 0120 	orr.w	r1, r1, #32
 8004d38:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004d3a:	6959      	ldr	r1, [r3, #20]
 8004d3c:	f041 0101 	orr.w	r1, r1, #1
 8004d40:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004d48:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	605a      	str	r2, [r3, #4]
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40023800 	.word	0x40023800

08004d58 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8004d58:	b570      	push	{r4, r5, r6, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8004d5a:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 8004d5c:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 8004d60:	d11c      	bne.n	8004d9c <waitForPolarizationEnd+0x44>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8004d62:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8004d64:	3201      	adds	r2, #1
 8004d66:	0855      	lsrs	r5, r2, #1
 8004d68:	016d      	lsls	r5, r5, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004d6a:	f06f 0602 	mvn.w	r6, #2
 8004d6e:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8004d70:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8004d72:	f893 c000 	ldrb.w	ip, [r3]
 8004d76:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8004d7a:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8004d7e:	d80c      	bhi.n	8004d9a <waitForPolarizationEnd+0x42>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004d80:	6904      	ldr	r4, [r0, #16]
 8004d82:	07a4      	lsls	r4, r4, #30
 8004d84:	d5f5      	bpl.n	8004d72 <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 8004d86:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8004d8a:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004d8c:	6106      	str	r6, [r0, #16]
 8004d8e:	d8f0      	bhi.n	8004d72 <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 8004d90:	781c      	ldrb	r4, [r3, #0]
 8004d92:	2c0f      	cmp	r4, #15
 8004d94:	d8ed      	bhi.n	8004d72 <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 8004d96:	2301      	movs	r3, #1
 8004d98:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8004d9c:	2c60      	cmp	r4, #96	; 0x60
 8004d9e:	d1e1      	bne.n	8004d64 <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8004da0:	3201      	adds	r2, #1
 8004da2:	0155      	lsls	r5, r2, #5
 8004da4:	e7e1      	b.n	8004d6a <waitForPolarizationEnd+0x12>
 8004da6:	bf00      	nop

08004da8 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8004da8:	6843      	ldr	r3, [r0, #4]
 8004daa:	4718      	bx	r3

08004dac <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8004dac:	b530      	push	{r4, r5, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004dae:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8004db2:	8e02      	ldrh	r2, [r0, #48]	; 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004db4:	ea4f 4c21 	mov.w	ip, r1, asr #16
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8004db8:	b20b      	sxth	r3, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004dba:	fb0e fc0c 	mul.w	ip, lr, ip
 8004dbe:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8004dc2:	fb02 f303 	mul.w	r3, r2, r3
{
 8004dc6:	b083      	sub	sp, #12

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8004dc8:	eb03 024c 	add.w	r2, r3, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004dcc:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
{
 8004dd0:	9101      	str	r1, [sp, #4]
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004dd2:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
  wY = ( wUBeta + wUAlpha ) / 2;
 8004dd6:	eb02 71d2 	add.w	r1, r2, r2, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8004dda:	1c55      	adds	r5, r2, #1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004ddc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8004de0:	ea4f 0161 	mov.w	r1, r1, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004de4:	ea4f 0464 	mov.w	r4, r4, asr #1
  if ( wY < 0 )
 8004de8:	f2c0 8083 	blt.w	8004ef2 <PWMC_SetPhaseVoltage+0x146>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8004dec:	1c5d      	adds	r5, r3, #1
 8004dee:	db58      	blt.n	8004ea2 <PWMC_SetPhaseVoltage+0xf6>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004df0:	1b09      	subs	r1, r1, r4
 8004df2:	bf44      	itt	mi
 8004df4:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 8004df8:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	bfbc      	itt	lt
 8004e00:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8004e04:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8004e08:	2a00      	cmp	r2, #0
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004e0a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
      wTimePhC = wTimePhA - wY / 131072;
 8004e0e:	bfb8      	it	lt
 8004e10:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004e14:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8004e18:	bfb8      	it	lt
 8004e1a:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8004e1e:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8004e22:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->lowDuty = wTimePhB;
 8004e26:	fa1f fe83 	uxth.w	lr, r3
      pHandle->midDuty = wTimePhA;
 8004e2a:	fa1f fc81 	uxth.w	ip, r1
      pHandle->highDuty = wTimePhC;
 8004e2e:	b294      	uxth	r4, r2
 8004e30:	2501      	movs	r5, #1
        pHandle->highDuty = wTimePhA;
 8004e32:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8004e36:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
        pHandle->Sector = SECTOR_4;
 8004e3a:	f880 503a 	strb.w	r5, [r0, #58]	; 0x3a
 8004e3e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8004e42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004e46:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004e4a:	b289      	uxth	r1, r1
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	b292      	uxth	r2, r2
  if ( pHandle->DTTest == 1u )
 8004e50:	2c01      	cmp	r4, #1
        pHandle->lowDuty = wTimePhC;
 8004e52:	f8a0 e03c 	strh.w	lr, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8004e56:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8004e5a:	8641      	strh	r1, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8004e5c:	8683      	strh	r3, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8004e5e:	86c2      	strh	r2, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8004e60:	d11a      	bne.n	8004e98 <PWMC_SetPhaseVoltage+0xec>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8004e62:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
 8004e66:	2c00      	cmp	r4, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8004e68:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8004e6c:	bfcc      	ite	gt
 8004e6e:	1909      	addgt	r1, r1, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8004e70:	1b09      	suble	r1, r1, r4
 8004e72:	b289      	uxth	r1, r1
 8004e74:	8641      	strh	r1, [r0, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 8004e76:	f9b0 104a 	ldrsh.w	r1, [r0, #74]	; 0x4a
 8004e7a:	2900      	cmp	r1, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8004e7c:	f9b0 104c 	ldrsh.w	r1, [r0, #76]	; 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 8004e80:	bfcc      	ite	gt
 8004e82:	191b      	addgt	r3, r3, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8004e84:	1b1b      	suble	r3, r3, r4
    if ( pHandle->Ic > 0 )
 8004e86:	2900      	cmp	r1, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8004e88:	b29b      	uxth	r3, r3
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8004e8a:	bfcc      	ite	gt
 8004e8c:	18a4      	addgt	r4, r4, r2
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8004e8e:	1b12      	suble	r2, r2, r4
 8004e90:	8683      	strh	r3, [r0, #52]	; 0x34
      pHandle->CntPhC += pHandle->DTCompCnt;
 8004e92:	bfcc      	ite	gt
 8004e94:	86c4      	strhgt	r4, [r0, #54]	; 0x36
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8004e96:	86c2      	strhle	r2, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8004e98:	6983      	ldr	r3, [r0, #24]
}
 8004e9a:	b003      	add	sp, #12
 8004e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8004ea0:	4718      	bx	r3
      if ( wX <= 0 )
 8004ea2:	f1bc 0f00 	cmp.w	ip, #0
 8004ea6:	dd46      	ble.n	8004f36 <PWMC_SetPhaseVoltage+0x18a>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004ea8:	ebbc 0404 	subs.w	r4, ip, r4
 8004eac:	bf44      	itt	mi
 8004eae:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 8004eb2:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	bfb8      	it	lt
 8004eba:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004ebe:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
        wTimePhB = wTimePhA + wZ / 131072;
 8004ec2:	bfb8      	it	lt
 8004ec4:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 8004ec8:	f1bc 0200 	subs.w	r2, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004ecc:	eb0e 41a4 	add.w	r1, lr, r4, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8004ed0:	bfb8      	it	lt
 8004ed2:	f502 32ff 	addlt.w	r2, r2, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8004ed6:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8004eda:	bfb8      	it	lt
 8004edc:	f202 12ff 	addwlt	r2, r2, #511	; 0x1ff
 8004ee0:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->lowDuty = wTimePhA;
 8004ee4:	fa1f fe81 	uxth.w	lr, r1
        pHandle->midDuty = wTimePhB;
 8004ee8:	fa1f fc83 	uxth.w	ip, r3
        pHandle->highDuty = wTimePhC;
 8004eec:	b294      	uxth	r4, r2
 8004eee:	2500      	movs	r5, #0
 8004ef0:	e79f      	b.n	8004e32 <PWMC_SetPhaseVoltage+0x86>
    if ( wZ < 0 )
 8004ef2:	1c5d      	adds	r5, r3, #1
 8004ef4:	db69      	blt.n	8004fca <PWMC_SetPhaseVoltage+0x21e>
      if ( wX <= 0 )
 8004ef6:	f1bc 0f00 	cmp.w	ip, #0
 8004efa:	dd41      	ble.n	8004f80 <PWMC_SetPhaseVoltage+0x1d4>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004efc:	ebb1 010c 	subs.w	r1, r1, ip
 8004f00:	bf44      	itt	mi
 8004f02:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 8004f06:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8004f0a:	2a00      	cmp	r2, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004f0c:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
        wTimePhC = wTimePhA - wY / 131072;
 8004f10:	bfb8      	it	lt
 8004f12:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004f16:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8004f1a:	bfb8      	it	lt
 8004f1c:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
 8004f20:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8004f24:	eb02 436c 	add.w	r3, r2, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 8004f28:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = wTimePhC;
 8004f2c:	fa1f fc82 	uxth.w	ip, r2
        pHandle->highDuty = wTimePhA;
 8004f30:	b28c      	uxth	r4, r1
 8004f32:	2502      	movs	r5, #2
 8004f34:	e77d      	b.n	8004e32 <PWMC_SetPhaseVoltage+0x86>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004f36:	ebb1 010c 	subs.w	r1, r1, ip
 8004f3a:	bf44      	itt	mi
 8004f3c:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 8004f40:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8004f44:	2a00      	cmp	r2, #0
 8004f46:	bfb8      	it	lt
 8004f48:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004f4c:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
        wTimePhC = wTimePhA - wY / 131072;
 8004f50:	bfb8      	it	lt
 8004f52:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
        wTimePhB = wTimePhC + wX / 131072;
 8004f56:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004f5a:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8004f5e:	bfb8      	it	lt
 8004f60:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8004f64:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8004f68:	bfb8      	it	lt
 8004f6a:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8004f6e:	eb02 4363 	add.w	r3, r2, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 8004f72:	fa1f fe81 	uxth.w	lr, r1
        pHandle->midDuty = wTimePhC;
 8004f76:	fa1f fc82 	uxth.w	ip, r2
        pHandle->highDuty = wTimePhB;
 8004f7a:	b29c      	uxth	r4, r3
 8004f7c:	2505      	movs	r5, #5
 8004f7e:	e758      	b.n	8004e32 <PWMC_SetPhaseVoltage+0x86>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004f80:	ebbc 0404 	subs.w	r4, ip, r4
 8004f84:	bf44      	itt	mi
 8004f86:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 8004f8a:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	bfb8      	it	lt
 8004f92:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004f96:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
        wTimePhB = wTimePhA + wZ / 131072;
 8004f9a:	bfb8      	it	lt
 8004f9c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 8004fa0:	f1bc 0200 	subs.w	r2, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004fa4:	eb0e 41a4 	add.w	r1, lr, r4, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8004fa8:	bfb8      	it	lt
 8004faa:	f502 32ff 	addlt.w	r2, r2, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8004fae:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8004fb2:	bfb8      	it	lt
 8004fb4:	f202 12ff 	addwlt	r2, r2, #511	; 0x1ff
 8004fb8:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->lowDuty = wTimePhC;
 8004fbc:	fa1f fe82 	uxth.w	lr, r2
        pHandle->midDuty = wTimePhB;
 8004fc0:	fa1f fc83 	uxth.w	ip, r3
        pHandle->highDuty = wTimePhA;
 8004fc4:	b28c      	uxth	r4, r1
 8004fc6:	2503      	movs	r5, #3
 8004fc8:	e733      	b.n	8004e32 <PWMC_SetPhaseVoltage+0x86>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004fca:	1b09      	subs	r1, r1, r4
 8004fcc:	bf44      	itt	mi
 8004fce:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 8004fd2:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	bfbc      	itt	lt
 8004fda:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8004fde:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8004fe2:	2a00      	cmp	r2, #0
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004fe4:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
      wTimePhC = wTimePhA - wY / 131072;
 8004fe8:	bfb8      	it	lt
 8004fea:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004fee:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8004ff2:	bfb8      	it	lt
 8004ff4:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8004ff8:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8004ffc:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->lowDuty = wTimePhC;
 8005000:	fa1f fe82 	uxth.w	lr, r2
      pHandle->midDuty = wTimePhA;
 8005004:	fa1f fc81 	uxth.w	ip, r1
      pHandle->highDuty = wTimePhB;
 8005008:	b29c      	uxth	r4, r3
 800500a:	2504      	movs	r5, #4
 800500c:	e711      	b.n	8004e32 <PWMC_SetPhaseVoltage+0x86>
 800500e:	bf00      	nop

08005010 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8005010:	6883      	ldr	r3, [r0, #8]
 8005012:	4718      	bx	r3

08005014 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8005014:	b510      	push	{r4, lr}
 8005016:	4604      	mov	r4, r0
 8005018:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 800501a:	b199      	cbz	r1, 8005044 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 800501c:	2901      	cmp	r1, #1
 800501e:	d002      	beq.n	8005026 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8005020:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8005022:	b002      	add	sp, #8
 8005024:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8005026:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800502a:	b1cb      	cbz	r3, 8005060 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 800502c:	3b01      	subs	r3, #1
 800502e:	b29b      	uxth	r3, r3
 8005030:	9101      	str	r1, [sp, #4]
 8005032:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f2      	bne.n	8005020 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 800503a:	6903      	ldr	r3, [r0, #16]
 800503c:	4798      	blx	r3
        retVal = true;
 800503e:	9901      	ldr	r1, [sp, #4]
 8005040:	4608      	mov	r0, r1
 8005042:	e7ee      	b.n	8005022 <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8005044:	f7ff ffe4 	bl	8005010 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8005048:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800504c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e5      	bne.n	8005020 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8005054:	4620      	mov	r0, r4
 8005056:	6923      	ldr	r3, [r4, #16]
 8005058:	4798      	blx	r3
      retVal = true;
 800505a:	2001      	movs	r0, #1
}
 800505c:	b002      	add	sp, #8
 800505e:	bd10      	pop	{r4, pc}
      retVal = true;
 8005060:	4608      	mov	r0, r1
}
 8005062:	b002      	add	sp, #8
 8005064:	bd10      	pop	{r4, pc}
 8005066:	bf00      	nop

08005068 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8005068:	69c3      	ldr	r3, [r0, #28]
 800506a:	4718      	bx	r3

0800506c <R3_2_GetPhaseCurrents>:
  */
__weak void R3_2_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t* pStator_Currents )
{
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800506c:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800506e:	b430      	push	{r4, r5}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005070:	689c      	ldr	r4, [r3, #8]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005072:	6a22      	ldr	r2, [r4, #32]
 8005074:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005078:	6222      	str	r2, [r4, #32]
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = pHandle->_Super.Sector;
 800507a:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 800507e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 8005082:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 8005084:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8005086:	682b      	ldr	r3, [r5, #0]
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 8005088:	6824      	ldr	r4, [r4, #0]
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 800508a:	005b      	lsls	r3, r3, #1
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 800508c:	ea4f 0c44 	mov.w	ip, r4, lsl #1
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 8005090:	b29b      	uxth	r3, r3
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 8005092:	fa1f fc8c 	uxth.w	ip, ip

  switch ( bSector )
 8005096:	2a05      	cmp	r2, #5
 8005098:	f200 8090 	bhi.w	80051bc <R3_2_GetPhaseCurrents+0x150>
 800509c:	e8df f002 	tbb	[pc, r2]
 80050a0:	0322223a 	.word	0x0322223a
 80050a4:	3a03      	.short	0x3a03
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80050a6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 80050a8:	4c48      	ldr	r4, [pc, #288]	; (80051cc <R3_2_GetPhaseCurrents+0x160>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80050aa:	1ad3      	subs	r3, r2, r3
      if ( wAux < -INT16_MAX )
 80050ac:	42a3      	cmp	r3, r4
 80050ae:	da57      	bge.n	8005160 <R3_2_GetPhaseCurrents+0xf4>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80050b0:	6e02      	ldr	r2, [r0, #96]	; 0x60

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 80050b2:	4d46      	ldr	r5, [pc, #280]	; (80051cc <R3_2_GetPhaseCurrents+0x160>)
        pStator_Currents->a = -INT16_MAX;
 80050b4:	800c      	strh	r4, [r1, #0]
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80050b6:	eba2 020c 	sub.w	r2, r2, ip
      if ( wAux < -INT16_MAX )
 80050ba:	42aa      	cmp	r2, r5
 80050bc:	db41      	blt.n	8005142 <R3_2_GetPhaseCurrents+0xd6>
      {
        pStator_Currents->b = -INT16_MAX;
      }
      else  if ( wAux > INT16_MAX )
 80050be:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80050c2:	db6d      	blt.n	80051a0 <R3_2_GetPhaseCurrents+0x134>
      {
        pStator_Currents->b = INT16_MAX;
 80050c4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80050c8:	461a      	mov	r2, r3
 80050ca:	804b      	strh	r3, [r1, #2]
 80050cc:	4615      	mov	r5, r2
      break;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80050ce:	b2a3      	uxth	r3, r4
 80050d0:	4413      	add	r3, r2
 80050d2:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 80050d4:	f8a0 4048 	strh.w	r4, [r0, #72]	; 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 80050d8:	f8a0 504a 	strh.w	r5, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80050dc:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 80050e0:	bc30      	pop	{r4, r5}
 80050e2:	4770      	bx	lr
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80050e4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80050e6:	1ad2      	subs	r2, r2, r3
      if ( wAux < -INT16_MAX )
 80050e8:	4b38      	ldr	r3, [pc, #224]	; (80051cc <R3_2_GetPhaseCurrents+0x160>)
 80050ea:	429a      	cmp	r2, r3
 80050ec:	db33      	blt.n	8005156 <R3_2_GetPhaseCurrents+0xea>
      else  if ( wAux > INT16_MAX )
 80050ee:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80050f2:	da5a      	bge.n	80051aa <R3_2_GetPhaseCurrents+0x13e>
        pStator_Currents->a = ( int16_t )wAux;
 80050f4:	b214      	sxth	r4, r2
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80050f6:	b293      	uxth	r3, r2
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 80050f8:	6e45      	ldr	r5, [r0, #100]	; 0x64
        pStator_Currents->a = -INT16_MAX;
 80050fa:	800c      	strh	r4, [r1, #0]
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 80050fc:	ebac 0c05 	sub.w	ip, ip, r5
 8005100:	ebac 0c02 	sub.w	ip, ip, r2
      if ( wAux > INT16_MAX )
 8005104:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
 8005108:	db38      	blt.n	800517c <R3_2_GetPhaseCurrents+0x110>
        pStator_Currents->b = INT16_MAX;
 800510a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800510e:	804a      	strh	r2, [r1, #2]
 8005110:	4615      	mov	r5, r2
 8005112:	e7dd      	b.n	80050d0 <R3_2_GetPhaseCurrents+0x64>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8005114:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8005116:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 8005118:	4b2c      	ldr	r3, [pc, #176]	; (80051cc <R3_2_GetPhaseCurrents+0x160>)
 800511a:	429c      	cmp	r4, r3
 800511c:	db16      	blt.n	800514c <R3_2_GetPhaseCurrents+0xe0>
      else  if ( wAux > INT16_MAX )
 800511e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8005122:	da32      	bge.n	800518a <R3_2_GetPhaseCurrents+0x11e>
        pStator_Currents->b = ( int16_t )wAux;
 8005124:	b225      	sxth	r5, r4
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005126:	b2a2      	uxth	r2, r4
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8005128:	6e43      	ldr	r3, [r0, #100]	; 0x64
        pStator_Currents->b = -INT16_MAX;
 800512a:	804d      	strh	r5, [r1, #2]
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 800512c:	ebac 0303 	sub.w	r3, ip, r3
 8005130:	1b1b      	subs	r3, r3, r4
      if ( wAux > INT16_MAX )
 8005132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005136:	db1a      	blt.n	800516e <R3_2_GetPhaseCurrents+0x102>
        pStator_Currents->a = INT16_MAX;
 8005138:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800513c:	800b      	strh	r3, [r1, #0]
 800513e:	461c      	mov	r4, r3
 8005140:	e7c6      	b.n	80050d0 <R3_2_GetPhaseCurrents+0x64>
        pStator_Currents->b = -INT16_MAX;
 8005142:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005144:	b2a3      	uxth	r3, r4
 8005146:	f248 0201 	movw	r2, #32769	; 0x8001
 800514a:	e7c1      	b.n	80050d0 <R3_2_GetPhaseCurrents+0x64>
 800514c:	461c      	mov	r4, r3
 800514e:	f248 0201 	movw	r2, #32769	; 0x8001
 8005152:	461d      	mov	r5, r3
 8005154:	e7e8      	b.n	8005128 <R3_2_GetPhaseCurrents+0xbc>
 8005156:	461a      	mov	r2, r3
 8005158:	4614      	mov	r4, r2
 800515a:	f248 0301 	movw	r3, #32769	; 0x8001
 800515e:	e7cb      	b.n	80050f8 <R3_2_GetPhaseCurrents+0x8c>
      else  if ( wAux > INT16_MAX )
 8005160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        pStator_Currents->a = ( int16_t )wAux;
 8005164:	bfb4      	ite	lt
 8005166:	b21c      	sxthlt	r4, r3
 8005168:	f647 74ff 	movwge	r4, #32767	; 0x7fff
 800516c:	e7a0      	b.n	80050b0 <R3_2_GetPhaseCurrents+0x44>
      else  if ( wAux < -INT16_MAX )
 800516e:	4c17      	ldr	r4, [pc, #92]	; (80051cc <R3_2_GetPhaseCurrents+0x160>)
 8005170:	42a3      	cmp	r3, r4
 8005172:	da1f      	bge.n	80051b4 <R3_2_GetPhaseCurrents+0x148>
        pStator_Currents->a = -INT16_MAX;
 8005174:	800c      	strh	r4, [r1, #0]
 8005176:	f248 0301 	movw	r3, #32769	; 0x8001
 800517a:	e7a9      	b.n	80050d0 <R3_2_GetPhaseCurrents+0x64>
      else  if ( wAux < -INT16_MAX )
 800517c:	4d13      	ldr	r5, [pc, #76]	; (80051cc <R3_2_GetPhaseCurrents+0x160>)
 800517e:	45ac      	cmp	ip, r5
 8005180:	da08      	bge.n	8005194 <R3_2_GetPhaseCurrents+0x128>
        pStator_Currents->b = -INT16_MAX;
 8005182:	804d      	strh	r5, [r1, #2]
 8005184:	f248 0201 	movw	r2, #32769	; 0x8001
 8005188:	e7a2      	b.n	80050d0 <R3_2_GetPhaseCurrents+0x64>
 800518a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800518e:	4614      	mov	r4, r2
 8005190:	4615      	mov	r5, r2
 8005192:	e7c9      	b.n	8005128 <R3_2_GetPhaseCurrents+0xbc>
        pStator_Currents->b = ( int16_t )wAux;
 8005194:	fa0f f58c 	sxth.w	r5, ip
 8005198:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800519a:	fa1f f28c 	uxth.w	r2, ip
 800519e:	e797      	b.n	80050d0 <R3_2_GetPhaseCurrents+0x64>
        pStator_Currents->b = ( int16_t )wAux;
 80051a0:	b215      	sxth	r5, r2
 80051a2:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80051a4:	b2a3      	uxth	r3, r4
 80051a6:	b292      	uxth	r2, r2
 80051a8:	e792      	b.n	80050d0 <R3_2_GetPhaseCurrents+0x64>
 80051aa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80051ae:	461a      	mov	r2, r3
 80051b0:	461c      	mov	r4, r3
 80051b2:	e7a1      	b.n	80050f8 <R3_2_GetPhaseCurrents+0x8c>
        pStator_Currents->a = ( int16_t )wAux;
 80051b4:	b21c      	sxth	r4, r3
 80051b6:	800c      	strh	r4, [r1, #0]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	e789      	b.n	80050d0 <R3_2_GetPhaseCurrents+0x64>
  pHandle->_Super.Ia = pStator_Currents->a;
 80051bc:	f9b1 4000 	ldrsh.w	r4, [r1]
  pHandle->_Super.Ib = pStator_Currents->b;
 80051c0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80051c4:	880b      	ldrh	r3, [r1, #0]
 80051c6:	884a      	ldrh	r2, [r1, #2]
 80051c8:	e782      	b.n	80050d0 <R3_2_GetPhaseCurrents+0x64>
 80051ca:	bf00      	nop
 80051cc:	ffff8001 	.word	0xffff8001

080051d0 <R3_2_HFCurrentsCalibrationAB>:
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_2_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80051d0:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80051d2:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80051d4:	689c      	ldr	r4, [r3, #8]
 80051d6:	6a22      	ldr	r2, [r4, #32]
 80051d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051dc:	6222      	str	r2, [r4, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80051de:	f890 2073 	ldrb.w	r2, [r0, #115]	; 0x73
 80051e2:	2a0f      	cmp	r2, #15
 80051e4:	d813      	bhi.n	800520e <R3_2_HFCurrentsCalibrationAB+0x3e>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 80051e6:	f890 4072 	ldrb.w	r4, [r0, #114]	; 0x72
 80051ea:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80051ec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80051f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80051f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 80051f4:	6824      	ldr	r4, [r4, #0]
 80051f6:	4422      	add	r2, r4
 80051f8:	65c2      	str	r2, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80051fa:	681c      	ldr	r4, [r3, #0]
    pHandle->PolarizationCounter++;
 80051fc:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8005200:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle->PolarizationCounter++;
 8005202:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8005204:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8005206:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8005208:	6602      	str	r2, [r0, #96]	; 0x60
    pHandle->PolarizationCounter++;
 800520a:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 800520e:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8005210:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8005214:	600b      	str	r3, [r1, #0]
}
 8005216:	4770      	bx	lr

08005218 <R3_2_HFCurrentsCalibrationC>:
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_2_HFCurrentsCalibrationC( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;  
 8005218:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 800521a:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;  
 800521c:	6894      	ldr	r4, [r2, #8]
 800521e:	6a23      	ldr	r3, [r4, #32]
 8005220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005224:	6223      	str	r3, [r4, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005226:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
 800522a:	2b0f      	cmp	r3, #15
 800522c:	d80e      	bhi.n	800524c <R3_2_HFCurrentsCalibrationC+0x34>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 800522e:	f890 4072 	ldrb.w	r4, [r0, #114]	; 0x72
 8005232:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005234:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8005238:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800523a:	6812      	ldr	r2, [r2, #0]
 800523c:	441a      	add	r2, r3
    pHandle->PolarizationCounter++;
 800523e:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8005242:	6642      	str	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 8005244:	3301      	adds	r3, #1
 8005246:	b2db      	uxtb	r3, r3
 8005248:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 800524c:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 800524e:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8005252:	600b      	str	r3, [r1, #0]
}
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop

08005258 <R3_2_TurnOnLowSides>:
  * @retval none
  */
__weak void R3_2_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 8005258:	6f82      	ldr	r2, [r0, #120]	; 0x78

  pHandle->_Super.TurnOnLowSidesAction = true;
 800525a:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 800525e:	6893      	ldr	r3, [r2, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8005260:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005264:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005266:	f06f 0001 	mvn.w	r0, #1
 800526a:	6118      	str	r0, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800526c:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800526e:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005270:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005272:	6919      	ldr	r1, [r3, #16]
 8005274:	07c9      	lsls	r1, r1, #31
 8005276:	d5fc      	bpl.n	8005272 <R3_2_TurnOnLowSides+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005278:	f06f 0101 	mvn.w	r1, #1
 800527c:	6119      	str	r1, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800527e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005280:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005284:	6459      	str	r1, [r3, #68]	; 0x44
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
  if ( (pHandle->pParams_str->LowSideOutputs) == ES_GPIO )
 8005286:	f892 308f 	ldrb.w	r3, [r2, #143]	; 0x8f
 800528a:	2b02      	cmp	r3, #2
 800528c:	d000      	beq.n	8005290 <R3_2_TurnOnLowSides+0x38>
 800528e:	4770      	bx	lr
{
 8005290:	b410      	push	{r4}
  {
    LL_GPIO_SetOutputPin (pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin (pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8005292:	e9d2 0103 	ldrd	r0, r1, [r2, #12]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005296:	e9d2 3405 	ldrd	r3, r4, [r2, #20]
 800529a:	6184      	str	r4, [r0, #24]
    LL_GPIO_SetOutputPin (pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800529c:	e9d2 0207 	ldrd	r0, r2, [r2, #28]
  }
  return;
}
 80052a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052a4:	6188      	str	r0, [r1, #24]
 80052a6:	619a      	str	r2, [r3, #24]
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop

080052ac <R3_2_SwitchOnPWM>:
  * @retval none
  */
__weak void R3_2_SwitchOnPWM( PWMC_Handle_t * pHdl )
{  
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 80052ac:	6f82      	ldr	r2, [r0, #120]	; 0x78

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80052ae:	f8b0 1070 	ldrh.w	r1, [r0, #112]	; 0x70
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 80052b2:	6893      	ldr	r3, [r2, #8]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80052b4:	f04f 0c00 	mov.w	ip, #0
{  
 80052b8:	b430      	push	{r4, r5}
  pHandle->_Super.TurnOnLowSidesAction = false;
 80052ba:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80052be:	0848      	lsrs	r0, r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80052c0:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 80052c2:	3905      	subs	r1, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 80052c4:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80052c6:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80052c8:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 80052cc:	6419      	str	r1, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80052ce:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80052d0:	6919      	ldr	r1, [r3, #16]
 80052d2:	07c9      	lsls	r1, r1, #31
 80052d4:	d5fc      	bpl.n	80052d0 <R3_2_SwitchOnPWM+0x24>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80052d6:	f06f 0101 	mvn.w	r1, #1
 80052da:	6119      	str	r1, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80052dc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80052de:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80052e2:	6459      	str	r1, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80052e4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80052e6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80052ea:	6459      	str	r1, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80052ec:	f892 108f 	ldrb.w	r1, [r2, #143]	; 0x8f
 80052f0:	2902      	cmp	r1, #2
 80052f2:	d008      	beq.n	8005306 <R3_2_SwitchOnPWM+0x5a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80052f4:	f06f 0201 	mvn.w	r2, #1
 80052f8:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	f042 0201 	orr.w	r2, r2, #1
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);

  return;
}
 8005300:	bc30      	pop	{r4, r5}
 8005302:	60da      	str	r2, [r3, #12]
 8005304:	4770      	bx	lr
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8005306:	6a18      	ldr	r0, [r3, #32]
 8005308:	f240 5155 	movw	r1, #1365	; 0x555
 800530c:	4381      	bics	r1, r0
 800530e:	d00c      	beq.n	800532a <R3_2_SwitchOnPWM+0x7e>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005310:	e9d2 4006 	ldrd	r4, r0, [r2, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005314:	68d5      	ldr	r5, [r2, #12]
 8005316:	6a11      	ldr	r1, [r2, #32]
 8005318:	0424      	lsls	r4, r4, #16
 800531a:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800531c:	e9d2 5404 	ldrd	r5, r4, [r2, #16]
 8005320:	0400      	lsls	r0, r0, #16
 8005322:	0409      	lsls	r1, r1, #16
 8005324:	61a8      	str	r0, [r5, #24]
 8005326:	61a1      	str	r1, [r4, #24]
}
 8005328:	e7e4      	b.n	80052f4 <R3_2_SwitchOnPWM+0x48>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800532a:	e9d2 4003 	ldrd	r4, r0, [r2, #12]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800532e:	e9d2 1505 	ldrd	r1, r5, [r2, #20]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005332:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005334:	e9d2 4207 	ldrd	r4, r2, [r2, #28]
 8005338:	6184      	str	r4, [r0, #24]
 800533a:	618a      	str	r2, [r1, #24]
}
 800533c:	e7da      	b.n	80052f4 <R3_2_SwitchOnPWM+0x48>
 800533e:	bf00      	nop

08005340 <R3_2_SwitchOffPWM>:
  * @retval none
  */
__weak void R3_2_SwitchOffPWM( PWMC_Handle_t * pHdl )
{ 
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 8005340:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005342:	6893      	ldr	r3, [r2, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005344:	68d9      	ldr	r1, [r3, #12]
 8005346:	f021 0101 	bic.w	r1, r1, #1
 800534a:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800534c:	6c59      	ldr	r1, [r3, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 800534e:	f04f 0c00 	mov.w	ip, #0
 8005352:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8005356:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
 800535a:	6459      	str	r1, [r3, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( (pHandle->pParams_str->LowSideOutputs) == ES_GPIO )
 800535c:	f892 108f 	ldrb.w	r1, [r2, #143]	; 0x8f
 8005360:	2902      	cmp	r1, #2
 8005362:	d009      	beq.n	8005378 <R3_2_SwitchOffPWM+0x38>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005364:	f06f 0201 	mvn.w	r2, #1
 8005368:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	07d2      	lsls	r2, r2, #31
 800536e:	d5fc      	bpl.n	800536a <R3_2_SwitchOffPWM+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005370:	f06f 0201 	mvn.w	r2, #1
 8005374:	611a      	str	r2, [r3, #16]
 8005376:	4770      	bx	lr
{ 
 8005378:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800537a:	e9d2 4006 	ldrd	r4, r0, [r2, #24]
  {
    LL_GPIO_ResetOutputPin (pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800537e:	68d5      	ldr	r5, [r2, #12]
 8005380:	6a11      	ldr	r1, [r2, #32]
 8005382:	0424      	lsls	r4, r4, #16
 8005384:	61ac      	str	r4, [r5, #24]
    LL_GPIO_ResetOutputPin (pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
    LL_GPIO_ResetOutputPin (pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8005386:	e9d2 5404 	ldrd	r5, r4, [r2, #16]
 800538a:	0400      	lsls	r0, r0, #16
 800538c:	0409      	lsls	r1, r1, #16
 800538e:	f06f 0201 	mvn.w	r2, #1
 8005392:	61a8      	str	r0, [r5, #24]
 8005394:	61a1      	str	r1, [r4, #24]
 8005396:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	07d1      	lsls	r1, r2, #31
 800539c:	d5fc      	bpl.n	8005398 <R3_2_SwitchOffPWM+0x58>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800539e:	f06f 0201 	mvn.w	r2, #1
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 80053a2:	bc30      	pop	{r4, r5}
 80053a4:	611a      	str	r2, [r3, #16]
 80053a6:	4770      	bx	lr

080053a8 <R3_2_SetADCSampPointCalibration>:
 *         And call the WriteTIMRegisters method.
 * @param pHdl: handler of the current instance of the PWM component
 * @retval none
 */
__weak uint16_t R3_2_SetADCSampPointCalibration( PWMC_Handle_t * pHdl)
{
 80053a8:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80053aa:	6f83      	ldr	r3, [r0, #120]	; 0x78
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;

  /* Set rising edge trigger (default) */
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
  pHandle->_Super.Sector = pHandle->CalibSector;
 80053ac:	f890 4072 	ldrb.w	r4, [r0, #114]	; 0x72
 80053b0:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a

  return R3_2_WriteTIMRegisters( &pHandle->_Super, (uint32_t)(pHandle->Half_PWMPeriod - 1u) );
 80053b4:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80053b8:	689b      	ldr	r3, [r3, #8]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 80053ba:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80053bc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  return R3_2_WriteTIMRegisters( &pHandle->_Super, (uint32_t)(pHandle->Half_PWMPeriod - 1u) );
 80053c0:	3a01      	subs	r2, #1
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80053c2:	66c1      	str	r1, [r0, #108]	; 0x6c
  return R3_2_WriteTIMRegisters( &pHandle->_Super, (uint32_t)(pHandle->Half_PWMPeriod - 1u) );
 80053c4:	b292      	uxth	r2, r2
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 80053c6:	8e81      	ldrh	r1, [r0, #52]	; 0x34
  WRITE_REG(TIMx->CCR1, CompareValue);
 80053c8:	635c      	str	r4, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 80053ca:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR2, CompareValue);
 80053cc:	6399      	str	r1, [r3, #56]	; 0x38
  if ( pHandle->_Super.SWerror == 1u )
 80053ce:	8f01      	ldrh	r1, [r0, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80053d0:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80053d2:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80053d4:	6a1b      	ldr	r3, [r3, #32]
}
 80053d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ( pHandle->_Super.SWerror == 1u )
 80053da:	2901      	cmp	r1, #1
    hAux = MC_FOC_DURATION;
 80053dc:	bf12      	itee	ne
 80053de:	f3c3 3100 	ubfxne	r1, r3, #12, #1
    pHandle->_Super.SWerror = 0u;
 80053e2:	2300      	moveq	r3, #0
 80053e4:	8703      	strheq	r3, [r0, #56]	; 0x38
}
 80053e6:	4608      	mov	r0, r1
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop

080053ec <R3_2_SetADCSampPointSectX>:
  *         And call the WriteTIMRegisters method.
  * @param  pHdl: handler of the current instance of the PWM component
  * @retval none
  */
__weak uint16_t R3_2_SetADCSampPointSectX( PWMC_Handle_t * pHdl )
{
 80053ec:	4603      	mov	r3, r0
 80053ee:	b510      	push	{r4, lr}
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;

  uint16_t hCntSmp;
  uint16_t hDeltaDuty;
  register uint16_t lowDuty = pHdl->lowDuty;
 80053f0:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
  register uint16_t midDuty = pHdl->midDuty;

  /* Check if sampling AB in the middle of PWM is possible */
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 80053f2:	f8b3 e070 	ldrh.w	lr, [r3, #112]	; 0x70
 80053f6:	6f9c      	ldr	r4, [r3, #120]	; 0x78
  register uint16_t midDuty = pHdl->midDuty;
 80053f8:	f8b3 c03e 	ldrh.w	ip, [r3, #62]	; 0x3e
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 80053fc:	f8b4 2086 	ldrh.w	r2, [r4, #134]	; 0x86
 8005400:	ebae 0100 	sub.w	r1, lr, r0
 8005404:	b289      	uxth	r1, r1
 8005406:	4291      	cmp	r1, r2
 8005408:	d916      	bls.n	8005438 <R3_2_SetADCSampPointSectX+0x4c>
     * (AB are chosen) for all sectors in order to not induce current discontinuities when there are differences
     * between offsets */

    /* sector number needed by GetPhaseCurrent, phase A and B are sampled wIch corresponds
     * to sector 4 */
    pHandle->_Super.Sector = SECTOR_4;
 800540a:	2103      	movs	r1, #3

    /* set sampling  point trigger in the middle of PWM period */
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 800540c:	f10e 32ff 	add.w	r2, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_4;
 8005410:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8005414:	b292      	uxth	r2, r2
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005416:	68a1      	ldr	r1, [r4, #8]
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 8005418:	8e98      	ldrh	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 800541a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 800541c:	634c      	str	r4, [r1, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800541e:	6388      	str	r0, [r1, #56]	; 0x38
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 8005420:	8edc      	ldrh	r4, [r3, #54]	; 0x36
  if ( pHandle->_Super.SWerror == 1u )
 8005422:	8f18      	ldrh	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005424:	63cc      	str	r4, [r1, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005426:	640a      	str	r2, [r1, #64]	; 0x40
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8005428:	6a0a      	ldr	r2, [r1, #32]
 800542a:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 800542c:	bf0a      	itet	eq
 800542e:	2200      	moveq	r2, #0
    hAux = MC_FOC_DURATION;
 8005430:	f3c2 3000 	ubfxne	r0, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 8005434:	871a      	strheq	r2, [r3, #56]	; 0x38
      }
    }
  }

  return R3_2_WriteTIMRegisters( &pHandle->_Super, hCntSmp );
}
 8005436:	bd10      	pop	{r4, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 8005438:	eba0 0c0c 	sub.w	ip, r0, ip
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 800543c:	fa1f fc8c 	uxth.w	ip, ip
 8005440:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
 8005444:	d904      	bls.n	8005450 <R3_2_SetADCSampPointSectX+0x64>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 8005446:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
 800544a:	1a80      	subs	r0, r0, r2
 800544c:	b282      	uxth	r2, r0
 800544e:	e7e2      	b.n	8005416 <R3_2_SetADCSampPointSectX+0x2a>
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 8005450:	4402      	add	r2, r0
 8005452:	b292      	uxth	r2, r2
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 8005454:	4596      	cmp	lr, r2
 8005456:	d8de      	bhi.n	8005416 <R3_2_SetADCSampPointSectX+0x2a>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8005458:	43d2      	mvns	r2, r2
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 800545a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800545e:	eb02 024e 	add.w	r2, r2, lr, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8005462:	66d9      	str	r1, [r3, #108]	; 0x6c
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8005464:	b292      	uxth	r2, r2
 8005466:	e7d6      	b.n	8005416 <R3_2_SetADCSampPointSectX+0x2a>

08005468 <R3_2_RLGetPhaseCurrents>:
  * @retval Ia and Ib current in ab_t format
  */
void R3_2_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005468:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 800546a:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800546c:	6894      	ldr	r4, [r2, #8]
  CLEAR_BIT(TIMx->CCER, Channels);
 800546e:	6a23      	ldr	r3, [r4, #32]
 8005470:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005474:	6223      	str	r3, [r4, #32]
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 8005476:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 800547a:	6e03      	ldr	r3, [r0, #96]	; 0x60

  /* Check saturation */
  if ( wAux > -INT16_MAX )
 800547c:	480d      	ldr	r0, [pc, #52]	; (80054b4 <R3_2_RLGetPhaseCurrents+0x4c>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 800547e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8005482:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005484:	6812      	ldr	r2, [r2, #0]
 8005486:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
  if ( wAux > -INT16_MAX )
 800548a:	4283      	cmp	r3, r0
 800548c:	db05      	blt.n	800549a <R3_2_RLGetPhaseCurrents+0x32>
  {
    if ( wAux < INT16_MAX )
 800548e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005492:	4293      	cmp	r3, r2
 8005494:	dc0b      	bgt.n	80054ae <R3_2_RLGetPhaseCurrents+0x46>
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 8005496:	b21b      	sxth	r3, r3
 8005498:	e000      	b.n	800549c <R3_2_RLGetPhaseCurrents+0x34>
 800549a:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <R3_2_RLGetPhaseCurrents+0x50>)
  pStator_Currents->b = (int16_t)wAux;
}
 800549c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = (int16_t)wAux;
 80054a0:	2200      	movs	r2, #0
 80054a2:	f363 020f 	bfi	r2, r3, #0, #16
 80054a6:	f363 421f 	bfi	r2, r3, #16, #16
 80054aa:	600a      	str	r2, [r1, #0]
}
 80054ac:	4770      	bx	lr
 80054ae:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80054b2:	e7f3      	b.n	800549c <R3_2_RLGetPhaseCurrents+0x34>
 80054b4:	ffff8002 	.word	0xffff8002
 80054b8:	ffff8001 	.word	0xffff8001

080054bc <R3_2_RLTurnOnLowSides>:
  * @retval none
  */
static void R3_2_RLTurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80054bc:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80054be:	6893      	ldr	r3, [r2, #8]
{
 80054c0:	b410      	push	{r4}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80054c2:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80054c6:	2400      	movs	r4, #0
 80054c8:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80054ca:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80054cc:	6919      	ldr	r1, [r3, #16]
 80054ce:	07c9      	lsls	r1, r1, #31
 80054d0:	d5fc      	bpl.n	80054cc <R3_2_RLTurnOnLowSides+0x10>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80054d2:	f06f 0101 	mvn.w	r1, #1
 80054d6:	6119      	str	r1, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80054d8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80054da:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80054de:	6459      	str	r1, [r3, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80054e0:	f892 308f 	ldrb.w	r3, [r2, #143]	; 0x8f
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d10a      	bne.n	80054fe <R3_2_RLTurnOnLowSides+0x42>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80054e8:	68d0      	ldr	r0, [r2, #12]
 80054ea:	6994      	ldr	r4, [r2, #24]
 80054ec:	e9d2 1307 	ldrd	r1, r3, [r2, #28]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80054f0:	6184      	str	r4, [r0, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80054f2:	e9d2 0204 	ldrd	r0, r2, [r2, #16]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80054f6:	0409      	lsls	r1, r1, #16
 80054f8:	041b      	lsls	r3, r3, #16
 80054fa:	6181      	str	r1, [r0, #24]
 80054fc:	6193      	str	r3, [r2, #24]
  }
  return;
}
 80054fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005502:	4770      	bx	lr

08005504 <R3_2_RLSwitchOnPWM>:
  * @retval none
  */
static void R3_2_RLSwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005504:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005506:	6893      	ldr	r3, [r2, #8]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005508:	f06f 0101 	mvn.w	r1, #1
{
 800550c:	b430      	push	{r4, r5}
 800550e:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005510:	6919      	ldr	r1, [r3, #16]
 8005512:	07cc      	lsls	r4, r1, #31
 8005514:	d5fc      	bpl.n	8005510 <R3_2_RLSwitchOnPWM+0xc>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 8005516:	f8b0 1070 	ldrh.w	r1, [r0, #112]	; 0x70
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800551a:	f06f 0401 	mvn.w	r4, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800551e:	2001      	movs	r0, #1
 8005520:	3905      	subs	r1, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005522:	611c      	str	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005524:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005526:	6419      	str	r1, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005528:	6919      	ldr	r1, [r3, #16]
 800552a:	07c9      	lsls	r1, r1, #31
 800552c:	d5fc      	bpl.n	8005528 <R3_2_RLSwitchOnPWM+0x24>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800552e:	f06f 0101 	mvn.w	r1, #1
 8005532:	6119      	str	r1, [r3, #16]
  LL_TIM_ClearFlag_UPDATE( TIMx );
  

  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8005534:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005536:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800553a:	6459      	str	r1, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800553c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800553e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005542:	6459      	str	r1, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005544:	f892 108f 	ldrb.w	r1, [r2, #143]	; 0x8f
 8005548:	2902      	cmp	r1, #2
 800554a:	d008      	beq.n	800555e <R3_2_RLSwitchOnPWM+0x5a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800554c:	f06f 0201 	mvn.w	r2, #1
 8005550:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	f042 0201 	orr.w	r2, r2, #1

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return;
}
 8005558:	bc30      	pop	{r4, r5}
 800555a:	60da      	str	r2, [r3, #12]
 800555c:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800555e:	6a18      	ldr	r0, [r3, #32]
 8005560:	f240 5155 	movw	r1, #1365	; 0x555
 8005564:	4208      	tst	r0, r1
 8005566:	d00a      	beq.n	800557e <R3_2_RLSwitchOnPWM+0x7a>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005568:	68d0      	ldr	r0, [r2, #12]
 800556a:	6994      	ldr	r4, [r2, #24]
 800556c:	6a11      	ldr	r1, [r2, #32]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800556e:	6184      	str	r4, [r0, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005570:	6910      	ldr	r0, [r2, #16]
 8005572:	69d4      	ldr	r4, [r2, #28]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005574:	6952      	ldr	r2, [r2, #20]
 8005576:	6184      	str	r4, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005578:	0409      	lsls	r1, r1, #16
 800557a:	6191      	str	r1, [r2, #24]
}
 800557c:	e7e6      	b.n	800554c <R3_2_RLSwitchOnPWM+0x48>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800557e:	e9d2 4006 	ldrd	r4, r0, [r2, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005582:	68d5      	ldr	r5, [r2, #12]
 8005584:	6a11      	ldr	r1, [r2, #32]
 8005586:	0424      	lsls	r4, r4, #16
 8005588:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800558a:	e9d2 5404 	ldrd	r5, r4, [r2, #16]
 800558e:	0400      	lsls	r0, r0, #16
 8005590:	0409      	lsls	r1, r1, #16
 8005592:	61a8      	str	r0, [r5, #24]
 8005594:	61a1      	str	r1, [r4, #24]
}
 8005596:	e7d9      	b.n	800554c <R3_2_RLSwitchOnPWM+0x48>

08005598 <R3_2_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005598:	6f81      	ldr	r1, [r0, #120]	; 0x78
 800559a:	688b      	ldr	r3, [r1, #8]
{
 800559c:	b430      	push	{r4, r5}
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800559e:	681d      	ldr	r5, [r3, #0]
 80055a0:	f025 0501 	bic.w	r5, r5, #1
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80055a4:	e9d1 2400 	ldrd	r2, r4, [r1]
 80055a8:	601d      	str	r5, [r3, #0]
  if ( (pHandle->pParams_str->EmergencyStop) != DISABLE )
 80055aa:	f891 5090 	ldrb.w	r5, [r1, #144]	; 0x90
 80055ae:	b135      	cbz	r5, 80055be <R3_2_Init+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80055b0:	f06f 0580 	mvn.w	r5, #128	; 0x80
 80055b4:	611d      	str	r5, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80055b6:	68dd      	ldr	r5, [r3, #12]
 80055b8:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80055bc:	60dd      	str	r5, [r3, #12]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80055be:	695d      	ldr	r5, [r3, #20]
 80055c0:	f045 0501 	orr.w	r5, r5, #1
 80055c4:	615d      	str	r5, [r3, #20]
  if ( pHandle->pParams_str->bFreqRatio == 2u )
 80055c6:	f891 508c 	ldrb.w	r5, [r1, #140]	; 0x8c
 80055ca:	2d02      	cmp	r5, #2
 80055cc:	d037      	beq.n	800563e <R3_2_Init+0xa6>
    if ( pHandle->_Super.Motor == M1 )
 80055ce:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
 80055d2:	2900      	cmp	r1, #0
 80055d4:	d037      	beq.n	8005646 <R3_2_Init+0xae>
  SET_BIT(TIMx->CCER, Channels);
 80055d6:	6a19      	ldr	r1, [r3, #32]
 80055d8:	f441 61aa 	orr.w	r1, r1, #1360	; 0x550
 80055dc:	f041 0105 	orr.w	r1, r1, #5
 80055e0:	6219      	str	r1, [r3, #32]
  if ( TIMx == TIM1 )
 80055e2:	4924      	ldr	r1, [pc, #144]	; (8005674 <R3_2_Init+0xdc>)
 80055e4:	428b      	cmp	r3, r1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80055e6:	4924      	ldr	r1, [pc, #144]	; (8005678 <R3_2_Init+0xe0>)
 80055e8:	68cb      	ldr	r3, [r1, #12]
 80055ea:	d031      	beq.n	8005650 <R3_2_Init+0xb8>
 80055ec:	f043 0302 	orr.w	r3, r3, #2
 80055f0:	60cb      	str	r3, [r1, #12]
 80055f2:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80055f6:	6893      	ldr	r3, [r2, #8]
    pHandle->ADC_ExternalTriggerInjected = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 80055f8:	6681      	str	r1, [r0, #104]	; 0x68
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	6093      	str	r3, [r2, #8]
 8005600:	68a3      	ldr	r3, [r4, #8]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8005602:	f06f 0104 	mvn.w	r1, #4
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8005606:	f043 0301 	orr.w	r3, r3, #1
 800560a:	60a3      	str	r3, [r4, #8]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800560c:	6011      	str	r1, [r2, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800560e:	6853      	ldr	r3, [r2, #4]
 8005610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005614:	6053      	str	r3, [r2, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005616:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005618:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800561c:	62d3      	str	r3, [r2, #44]	; 0x2c
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 800561e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005620:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005624:	6393      	str	r3, [r2, #56]	; 0x38
 8005626:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8005628:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  pHandle->_Super.DTTest = 0u;
 800562c:	2200      	movs	r2, #0
 800562e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005632:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005634:	bc30      	pop	{r4, r5}
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8005636:	66c1      	str	r1, [r0, #108]	; 0x6c
  pHandle->_Super.DTTest = 0u;
 8005638:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
}
 800563c:	4770      	bx	lr
    if ( pHandle->pParams_str->bIsHigherFreqTim == HIGHER_FREQ )
 800563e:	f891 508d 	ldrb.w	r5, [r1, #141]	; 0x8d
 8005642:	2d01      	cmp	r5, #1
 8005644:	d00a      	beq.n	800565c <R3_2_Init+0xc4>
      LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8005646:	f8b0 1070 	ldrh.w	r1, [r0, #112]	; 0x70
 800564a:	3901      	subs	r1, #1
  WRITE_REG(TIMx->CNT, Counter);
 800564c:	6259      	str	r1, [r3, #36]	; 0x24
}
 800564e:	e7c2      	b.n	80055d6 <R3_2_Init+0x3e>
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	60cb      	str	r3, [r1, #12]
    pHandle->ADC_ExternalTriggerInjected = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8005656:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800565a:	e7cc      	b.n	80055f6 <R3_2_Init+0x5e>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800565c:	f891 108e 	ldrb.w	r1, [r1, #142]	; 0x8e
 8005660:	2903      	cmp	r1, #3
 8005662:	d1f0      	bne.n	8005646 <R3_2_Init+0xae>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005664:	631d      	str	r5, [r3, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005666:	695d      	ldr	r5, [r3, #20]
 8005668:	f045 0501 	orr.w	r5, r5, #1
 800566c:	615d      	str	r5, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800566e:	6319      	str	r1, [r3, #48]	; 0x30
}
 8005670:	e7e9      	b.n	8005646 <R3_2_Init+0xae>
 8005672:	bf00      	nop
 8005674:	40010000 	.word	0x40010000
 8005678:	e0042000 	.word	0xe0042000

0800567c <R3_2_CurrentReadingCalibration>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800567c:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800567e:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005680:	689d      	ldr	r5, [r3, #8]
  pHandle->PhaseAOffset = 0u;
 8005682:	2600      	movs	r6, #0
  pHandle->PolarizationCounter = 0u;
 8005684:	f880 6073 	strb.w	r6, [r0, #115]	; 0x73
  CLEAR_BIT(TIMx->CCER, Channels);
 8005688:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 800568a:	65c6      	str	r6, [r0, #92]	; 0x5c
 800568c:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8005690:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 8005694:	e9c0 6618 	strd	r6, r6, [r0, #96]	; 0x60
 8005698:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsCalibrationAB;
 800569a:	4b33      	ldr	r3, [pc, #204]	; (8005768 <R3_2_CurrentReadingCalibration+0xec>)
 800569c:	6043      	str	r3, [r0, #4]
{
 800569e:	4604      	mov	r4, r0
  pHandle->CalibSector = SECTOR_4;
 80056a0:	2703      	movs	r7, #3
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointCalibration;
 80056a2:	4b32      	ldr	r3, [pc, #200]	; (800576c <R3_2_CurrentReadingCalibration+0xf0>)
 80056a4:	6183      	str	r3, [r0, #24]
{
 80056a6:	b083      	sub	sp, #12
  pHandle->CalibSector = SECTOR_4;
 80056a8:	f880 7072 	strb.w	r7, [r0, #114]	; 0x72
  pHandle->_Super.Sector = SECTOR_4;   
 80056ac:	f880 703a 	strb.w	r7, [r0, #58]	; 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 80056b0:	f7ff fdfc 	bl	80052ac <R3_2_SwitchOnPWM>
  						  pHandle->pParams_str->RepetitionCounter,
 80056b4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  waitForPolarizationEnd( TIMx,
 80056b6:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80056ba:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
 80056be:	4628      	mov	r0, r5
 80056c0:	f104 0373 	add.w	r3, r4, #115	; 0x73
 80056c4:	e9cd 1300 	strd	r1, r3, [sp]
 80056c8:	f7ff fb46 	bl	8004d58 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 80056cc:	4620      	mov	r0, r4
 80056ce:	f7ff fe37 	bl	8005340 <R3_2_SwitchOffPWM>
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsCalibrationC;
 80056d2:	4a27      	ldr	r2, [pc, #156]	; (8005770 <R3_2_CurrentReadingCalibration+0xf4>)
 80056d4:	6062      	str	r2, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 80056d6:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 80056d8:	f884 6073 	strb.w	r6, [r4, #115]	; 0x73
  pHandle->CalibSector = SECTOR_1;
 80056dc:	f884 6072 	strb.w	r6, [r4, #114]	; 0x72
  pHandle->_Super.Sector = SECTOR_1;   
 80056e0:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 80056e4:	f7ff fde2 	bl	80052ac <R3_2_SwitchOnPWM>
  						  pHandle->pParams_str->RepetitionCounter,
 80056e8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  waitForPolarizationEnd( TIMx,
 80056ea:	e9dd 1300 	ldrd	r1, r3, [sp]
 80056ee:	f892 208e 	ldrb.w	r2, [r2, #142]	; 0x8e
 80056f2:	4628      	mov	r0, r5
 80056f4:	f7ff fb30 	bl	8004d58 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 80056f8:	4620      	mov	r0, r4
 80056fa:	f7ff fe21 	bl	8005340 <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 80056fe:	e9d4 2317 	ldrd	r2, r3, [r4, #92]	; 0x5c
  pHandle->PhaseAOffset >>= 3;
 8005702:	40fa      	lsrs	r2, r7
  pHandle->PhaseBOffset >>= 3;
 8005704:	40fb      	lsrs	r3, r7
 8005706:	e9c4 2317 	strd	r2, r3, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset >>= 3;
 800570a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800570c:	4a19      	ldr	r2, [pc, #100]	; (8005774 <R3_2_CurrentReadingCalibration+0xf8>)
 800570e:	6062      	str	r2, [r4, #4]
  pHandle->PhaseCOffset >>= 3;
 8005710:	40fb      	lsrs	r3, r7
 8005712:	6663      	str	r3, [r4, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005714:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 8005716:	4a18      	ldr	r2, [pc, #96]	; (8005778 <R3_2_CurrentReadingCalibration+0xfc>)
 8005718:	61a2      	str	r2, [r4, #24]
 800571a:	f023 0308 	bic.w	r3, r3, #8
 800571e:	61ab      	str	r3, [r5, #24]
 8005720:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1(TIMx,pHandle->Half_PWMPeriod);
 8005722:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 8005726:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800572a:	61aa      	str	r2, [r5, #24]
 800572c:	69ea      	ldr	r2, [r5, #28]
 800572e:	f022 0208 	bic.w	r2, r2, #8
 8005732:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005734:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005736:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005738:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800573a:	69ab      	ldr	r3, [r5, #24]
 800573c:	f043 0308 	orr.w	r3, r3, #8
 8005740:	61ab      	str	r3, [r5, #24]
 8005742:	69ab      	ldr	r3, [r5, #24]
 8005744:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005748:	61ab      	str	r3, [r5, #24]
 800574a:	69eb      	ldr	r3, [r5, #28]
 800574c:	f043 0308 	orr.w	r3, r3, #8
 8005750:	61eb      	str	r3, [r5, #28]
  pHandle->_Super.Sector = SECTOR_4;
 8005752:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
  SET_BIT(TIMx->CCER, Channels);
 8005756:	6a2b      	ldr	r3, [r5, #32]
 8005758:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800575c:	f043 0305 	orr.w	r3, r3, #5
 8005760:	622b      	str	r3, [r5, #32]
}
 8005762:	b003      	add	sp, #12
 8005764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005766:	bf00      	nop
 8005768:	080051d1 	.word	0x080051d1
 800576c:	080053a9 	.word	0x080053a9
 8005770:	08005219 	.word	0x08005219
 8005774:	0800506d 	.word	0x0800506d
 8005778:	080053ed 	.word	0x080053ed

0800577c <R3_2_TIMx_UP_IRQHandler>:
{
 800577c:	4601      	mov	r1, r0
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 800577e:	6f80      	ldr	r0, [r0, #120]	; 0x78
{
 8005780:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8005782:	e890 0038 	ldmia.w	r0, {r3, r4, r5}
  ADCInjFlags = ADCx_1->SR & (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS);
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	f002 020c 	and.w	r2, r2, #12
  if ( ADCInjFlags == LL_ADC_FLAG_JSTRT )
 800578c:	2a08      	cmp	r2, #8
 800578e:	d03b      	beq.n	8005808 <R3_2_TIMx_UP_IRQHandler+0x8c>
  else if ( ADCInjFlags == 0 )
 8005790:	b94a      	cbnz	r2, 80057a6 <R3_2_TIMx_UP_IRQHandler+0x2a>
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 8005792:	f8b0 c084 	ldrh.w	ip, [r0, #132]	; 0x84
 8005796:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8005798:	4562      	cmp	r2, ip
 800579a:	d3fc      	bcc.n	8005796 <R3_2_TIMx_UP_IRQHandler+0x1a>
    ADCInjFlags = ADCx_1->SR & (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS);
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	f002 020c 	and.w	r2, r2, #12
    if ( ADCInjFlags == LL_ADC_FLAG_JSTRT )
 80057a2:	2a08      	cmp	r2, #8
 80057a4:	d03b      	beq.n	800581e <R3_2_TIMx_UP_IRQHandler+0xa2>
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80057ac:	609a      	str	r2, [r3, #8]
 80057ae:	68a2      	ldr	r2, [r4, #8]
 80057b0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80057b4:	60a2      	str	r2, [r4, #8]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector];
 80057b6:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80057ba:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 80057be:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 80057c0:	f402 2c70 	and.w	ip, r2, #983040	; 0xf0000
 80057c4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80057c6:	639a      	str	r2, [r3, #56]	; 0x38
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector];
 80057c8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80057ca:	63a2      	str	r2, [r4, #56]	; 0x38
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80057d2:	ea42 020c 	orr.w	r2, r2, ip
 80057d6:	609a      	str	r2, [r3, #8]
 80057d8:	68a2      	ldr	r2, [r4, #8]
 80057da:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80057de:	ea42 020c 	orr.w	r2, r2, ip
 80057e2:	60a2      	str	r2, [r4, #8]
 80057e4:	6a2a      	ldr	r2, [r5, #32]
 80057e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057ea:	622a      	str	r2, [r5, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80057ec:	6898      	ldr	r0, [r3, #8]
  LL_ADC_INJ_StartConversionExtTrig(ADCx_1, pHandle->ADCTriggerEdge);
 80057ee:	6eca      	ldr	r2, [r1, #108]	; 0x6c
 80057f0:	4310      	orrs	r0, r2
 80057f2:	6098      	str	r0, [r3, #8]
 80057f4:	68a0      	ldr	r0, [r4, #8]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80057f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80057fa:	4302      	orrs	r2, r0
 80057fc:	60a2      	str	r2, [r4, #8]
}
 80057fe:	f101 0046 	add.w	r0, r1, #70	; 0x46
 8005802:	bc30      	pop	{r4, r5}
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8005804:	66cb      	str	r3, [r1, #108]	; 0x6c
}
 8005806:	4770      	bx	lr
      ADCInjFlags = ADCx_1->SR & (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS);
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	f002 020c 	and.w	r2, r2, #12
    while ( ADCInjFlags != (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS) );
 800580e:	2a0c      	cmp	r2, #12
 8005810:	d0c9      	beq.n	80057a6 <R3_2_TIMx_UP_IRQHandler+0x2a>
      ADCInjFlags = ADCx_1->SR & (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS);
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	f002 020c 	and.w	r2, r2, #12
    while ( ADCInjFlags != (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS) );
 8005818:	2a0c      	cmp	r2, #12
 800581a:	d1f5      	bne.n	8005808 <R3_2_TIMx_UP_IRQHandler+0x8c>
 800581c:	e7c3      	b.n	80057a6 <R3_2_TIMx_UP_IRQHandler+0x2a>
        ADCInjFlags = ADCx_1->SR & (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS);
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	f002 020c 	and.w	r2, r2, #12
      while ( ADCInjFlags != (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS) );
 8005824:	2a0c      	cmp	r2, #12
 8005826:	d0be      	beq.n	80057a6 <R3_2_TIMx_UP_IRQHandler+0x2a>
        ADCInjFlags = ADCx_1->SR & (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS);
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	f002 020c 	and.w	r2, r2, #12
      while ( ADCInjFlags != (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS) );
 800582e:	2a0c      	cmp	r2, #12
 8005830:	d1f5      	bne.n	800581e <R3_2_TIMx_UP_IRQHandler+0xa2>
 8005832:	e7b8      	b.n	80057a6 <R3_2_TIMx_UP_IRQHandler+0x2a>

08005834 <R3_2_BRK_IRQHandler>:
  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8005834:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005836:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800583a:	2a02      	cmp	r2, #2
 800583c:	d004      	beq.n	8005848 <R3_2_BRK_IRQHandler+0x14>
  pHandle->OverCurrentFlag = true;
 800583e:	2301      	movs	r3, #1
 8005840:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
}
 8005844:	3046      	adds	r0, #70	; 0x46
 8005846:	4770      	bx	lr
{
 8005848:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800584a:	e9d3 4106 	ldrd	r4, r1, [r3, #24]
     LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800584e:	68dd      	ldr	r5, [r3, #12]
 8005850:	6a1a      	ldr	r2, [r3, #32]
 8005852:	0424      	lsls	r4, r4, #16
 8005854:	61ac      	str	r4, [r5, #24]
     LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8005856:	e9d3 5404 	ldrd	r5, r4, [r3, #16]
 800585a:	0409      	lsls	r1, r1, #16
 800585c:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 800585e:	2301      	movs	r3, #1
 8005860:	61a9      	str	r1, [r5, #24]
}
 8005862:	3046      	adds	r0, #70	; 0x46
 8005864:	61a2      	str	r2, [r4, #24]
  pHandle->OverCurrentFlag = true;
 8005866:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
}
 800586a:	bc30      	pop	{r4, r5}
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop

08005870 <R3_2_IsOverCurrentOccurred>:
  if (pHandle->OverCurrentFlag == true )
 8005870:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8005874:	b90b      	cbnz	r3, 800587a <R3_2_IsOverCurrentOccurred+0xa>
  uint16_t retVal = MC_NO_FAULTS;
 8005876:	4618      	mov	r0, r3
}
 8005878:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 800587a:	2300      	movs	r3, #0
 800587c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    retVal = MC_BREAK_IN;
 8005880:	2040      	movs	r0, #64	; 0x40
 8005882:	4770      	bx	lr

08005884 <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8005884:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 8005888:	b430      	push	{r4, r5}
  if ( pHandle->_Super.RLDetectionMode == false )
 800588a:	2900      	cmp	r1, #0
 800588c:	d134      	bne.n	80058f8 <R3_2_RLDetectionModeEnable+0x74>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800588e:	6f85      	ldr	r5, [r0, #120]	; 0x78
 8005890:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005892:	699a      	ldr	r2, [r3, #24]
 8005894:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8005898:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800589c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800589e:	6a1a      	ldr	r2, [r3, #32]
 80058a0:	f042 0201 	orr.w	r2, r2, #1
 80058a4:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80058a6:	6a1a      	ldr	r2, [r3, #32]
 80058a8:	f022 0204 	bic.w	r2, r2, #4
 80058ac:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80058ae:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 80058b0:	f895 208f 	ldrb.w	r2, [r5, #143]	; 0x8f
 80058b4:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80058b6:	f103 0418 	add.w	r4, r3, #24
 80058ba:	d02a      	beq.n	8005912 <R3_2_RLDetectionModeEnable+0x8e>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80058bc:	2a02      	cmp	r2, #2
 80058be:	d10d      	bne.n	80058dc <R3_2_RLDetectionModeEnable+0x58>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80058c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ca:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80058cc:	6a1a      	ldr	r2, [r3, #32]
 80058ce:	f042 0210 	orr.w	r2, r2, #16
 80058d2:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80058d4:	6a1a      	ldr	r2, [r3, #32]
 80058d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058da:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80058dc:	6862      	ldr	r2, [r4, #4]
 80058de:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80058e2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80058e6:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 80058e8:	6a1a      	ldr	r2, [r3, #32]
 80058ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058ee:	621a      	str	r2, [r3, #32]
 80058f0:	6a1a      	ldr	r2, [r3, #32]
 80058f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f6:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 80058f8:	4b0d      	ldr	r3, [pc, #52]	; (8005930 <R3_2_RLDetectionModeEnable+0xac>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 80058fa:	490e      	ldr	r1, [pc, #56]	; (8005934 <R3_2_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80058fc:	4a0e      	ldr	r2, [pc, #56]	; (8005938 <R3_2_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 80058fe:	4c0f      	ldr	r4, [pc, #60]	; (800593c <R3_2_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8005900:	6143      	str	r3, [r0, #20]
  pHandle->_Super.RLDetectionMode = true;
 8005902:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8005904:	6044      	str	r4, [r0, #4]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8005906:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 800590a:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 800590c:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8005910:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005912:	699a      	ldr	r2, [r3, #24]
 8005914:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8005918:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800591c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800591e:	6a1a      	ldr	r2, [r3, #32]
 8005920:	f022 0210 	bic.w	r2, r2, #16
 8005924:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8005926:	6a1a      	ldr	r2, [r3, #32]
 8005928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800592c:	621a      	str	r2, [r3, #32]
}
 800592e:	e7d5      	b.n	80058dc <R3_2_RLDetectionModeEnable+0x58>
 8005930:	080054bd 	.word	0x080054bd
 8005934:	08005505 	.word	0x08005505
 8005938:	08005341 	.word	0x08005341
 800593c:	08005469 	.word	0x08005469

08005940 <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8005940:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8005944:	2b00      	cmp	r3, #0
 8005946:	d03a      	beq.n	80059be <R3_2_RLDetectionModeDisable+0x7e>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005948:	6f81      	ldr	r1, [r0, #120]	; 0x78
 800594a:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800594c:	699a      	ldr	r2, [r3, #24]
 800594e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8005952:	f042 0260 	orr.w	r2, r2, #96	; 0x60
{
 8005956:	b410      	push	{r4}
 8005958:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800595a:	6a1a      	ldr	r2, [r3, #32]
 800595c:	f042 0201 	orr.w	r2, r2, #1
 8005960:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8005962:	f891 208f 	ldrb.w	r2, [r1, #143]	; 0x8f
 8005966:	2a01      	cmp	r2, #1
 8005968:	d02a      	beq.n	80059c0 <R3_2_RLDetectionModeDisable+0x80>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800596a:	2a02      	cmp	r2, #2
 800596c:	d04e      	beq.n	8005a0c <R3_2_RLDetectionModeDisable+0xcc>
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800596e:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
 8005972:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005974:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005976:	6999      	ldr	r1, [r3, #24]
 8005978:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 800597c:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8005980:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8005982:	6a19      	ldr	r1, [r3, #32]
 8005984:	f041 0110 	orr.w	r1, r1, #16
 8005988:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800598a:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800598c:	69d9      	ldr	r1, [r3, #28]
 800598e:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8005992:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8005996:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8005998:	6a19      	ldr	r1, [r3, #32]
 800599a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800599e:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 80059a0:	492d      	ldr	r1, [pc, #180]	; (8005a58 <R3_2_RLDetectionModeDisable+0x118>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 80059a2:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80059a4:	4a2d      	ldr	r2, [pc, #180]	; (8005a5c <R3_2_RLDetectionModeDisable+0x11c>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 80059a6:	6041      	str	r1, [r0, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 80059a8:	492d      	ldr	r1, [pc, #180]	; (8005a60 <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 80059aa:	4c2e      	ldr	r4, [pc, #184]	; (8005a64 <R3_2_RLDetectionModeDisable+0x124>)
 80059ac:	6144      	str	r4, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 80059ae:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80059b0:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 80059b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 80059b8:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 80059bc:	4770      	bx	lr
 80059be:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 80059c0:	6a19      	ldr	r1, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 80059c2:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
 80059c6:	f041 0104 	orr.w	r1, r1, #4
 80059ca:	0852      	lsrs	r2, r2, #1
 80059cc:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80059ce:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80059d0:	6999      	ldr	r1, [r3, #24]
 80059d2:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 80059d6:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 80059da:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80059dc:	6a19      	ldr	r1, [r3, #32]
 80059de:	f041 0110 	orr.w	r1, r1, #16
 80059e2:	6219      	str	r1, [r3, #32]
 80059e4:	6a19      	ldr	r1, [r3, #32]
 80059e6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80059ea:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80059ec:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80059ee:	69d9      	ldr	r1, [r3, #28]
 80059f0:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 80059f4:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 80059f8:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80059fa:	6a19      	ldr	r1, [r3, #32]
 80059fc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005a00:	6219      	str	r1, [r3, #32]
 8005a02:	6a19      	ldr	r1, [r3, #32]
 8005a04:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8005a08:	6219      	str	r1, [r3, #32]
}
 8005a0a:	e7c9      	b.n	80059a0 <R3_2_RLDetectionModeDisable+0x60>
  CLEAR_BIT(TIMx->CCER, Channels);
 8005a0c:	6a19      	ldr	r1, [r3, #32]
 8005a0e:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
 8005a12:	f021 0104 	bic.w	r1, r1, #4
 8005a16:	0852      	lsrs	r2, r2, #1
 8005a18:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005a1a:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005a1c:	6999      	ldr	r1, [r3, #24]
 8005a1e:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8005a22:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8005a26:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8005a28:	6a19      	ldr	r1, [r3, #32]
 8005a2a:	f041 0110 	orr.w	r1, r1, #16
 8005a2e:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005a30:	6a19      	ldr	r1, [r3, #32]
 8005a32:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8005a36:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005a38:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005a3a:	69d9      	ldr	r1, [r3, #28]
 8005a3c:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8005a40:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8005a44:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8005a46:	6a19      	ldr	r1, [r3, #32]
 8005a48:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005a4c:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005a4e:	6a19      	ldr	r1, [r3, #32]
 8005a50:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005a54:	6219      	str	r1, [r3, #32]
}
 8005a56:	e7a3      	b.n	80059a0 <R3_2_RLDetectionModeDisable+0x60>
 8005a58:	0800506d 	.word	0x0800506d
 8005a5c:	08005341 	.word	0x08005341
 8005a60:	080052ad 	.word	0x080052ad
 8005a64:	08005259 	.word	0x08005259

08005a68 <R3_2_RLDetectionModeSetDuty>:
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8005a68:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005a6c:	6f82      	ldr	r2, [r0, #120]	; 0x78
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8005a6e:	fb03 f101 	mul.w	r1, r3, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005a72:	6892      	ldr	r2, [r2, #8]
  if ( pHandle->_Super.SWerror == 1u )
 8005a74:	8f03      	ldrh	r3, [r0, #56]	; 0x38
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8005a76:	0c09      	lsrs	r1, r1, #16
  pHdl->Sector = SECTOR_4;
 8005a78:	f04f 0c03 	mov.w	ip, #3
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8005a7c:	8641      	strh	r1, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005a7e:	6351      	str	r1, [r2, #52]	; 0x34
  pHdl->Sector = SECTOR_4;
 8005a80:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8005a84:	6a12      	ldr	r2, [r2, #32]
  if ( pHandle->_Super.SWerror == 1u )
 8005a86:	2b01      	cmp	r3, #1
    hAux = MC_FOC_DURATION;
 8005a88:	bf12      	itee	ne
 8005a8a:	f3c2 3300 	ubfxne	r3, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 8005a8e:	2200      	moveq	r2, #0
 8005a90:	8702      	strheq	r2, [r0, #56]	; 0x38
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop

08005a98 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8005a98:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8005a9c:	8b82      	ldrh	r2, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005a9e:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8005aa0:	4494      	add	ip, r2
 8005aa2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 8005aa6:	b430      	push	{r4, r5}
 8005aa8:	2500      	movs	r5, #0
 8005aaa:	f36c 050f 	bfi	r5, ip, #0, #16
 8005aae:	f36c 451f 	bfi	r5, ip, #16, #16
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005ab2:	b14b      	cbz	r3, 8005ac8 <RVBS_Clear+0x30>
  {
    pHandle->aBuffer[index] = aux;
 8005ab4:	6a04      	ldr	r4, [r0, #32]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	b29a      	uxth	r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005aba:	3301      	adds	r3, #1
    pHandle->aBuffer[index] = aux;
 8005abc:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005ac0:	8b01      	ldrh	r1, [r0, #24]
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	4291      	cmp	r1, r2
 8005ac6:	d8f7      	bhi.n	8005ab8 <RVBS_Clear+0x20>
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8005ac8:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 8005aca:	6045      	str	r5, [r0, #4]
  pHandle->index = 0;
 8005acc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
}
 8005ad0:	bc30      	pop	{r4, r5}
 8005ad2:	4770      	bx	lr

08005ad4 <RVBS_Init>:
{
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8005ad8:	300c      	adds	r0, #12
 8005ada:	f7fc fa63 	bl	8001fa4 <RCM_RegisterRegConv>
 8005ade:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f7ff ffd8 	bl	8005a98 <RVBS_Clear>
}
 8005ae8:	bd10      	pop	{r4, pc}
 8005aea:	bf00      	nop

08005aec <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8005aec:	88c3      	ldrh	r3, [r0, #6]
 8005aee:	8b42      	ldrh	r2, [r0, #26]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d306      	bcc.n	8005b02 <RVBS_CheckFaultState+0x16>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8005af4:	8b80      	ldrh	r0, [r0, #28]
 8005af6:	4298      	cmp	r0, r3
 8005af8:	bf94      	ite	ls
 8005afa:	2000      	movls	r0, #0
 8005afc:	2001      	movhi	r0, #1
 8005afe:	0080      	lsls	r0, r0, #2
 8005b00:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8005b02:	2002      	movs	r0, #2
  else
  {
    fault = MC_NO_ERROR;
  }
  return fault;
}
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop

08005b08 <RVBS_CalcAvVbus>:
{
 8005b08:	b570      	push	{r4, r5, r6, lr}
 8005b0a:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005b0c:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8005b10:	f7fc fb24 	bl	800215c <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8005b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b18:	4298      	cmp	r0, r3
 8005b1a:	d01b      	beq.n	8005b54 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 8005b1c:	6a26      	ldr	r6, [r4, #32]
 8005b1e:	f894 e025 	ldrb.w	lr, [r4, #37]	; 0x25
 8005b22:	f826 001e 	strh.w	r0, [r6, lr, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005b26:	8b25      	ldrh	r5, [r4, #24]
 8005b28:	b1cd      	cbz	r5, 8005b5e <RVBS_CalcAvVbus+0x56>
 8005b2a:	2300      	movs	r3, #0
    wtemp = 0;
 8005b2c:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8005b2e:	f836 c013 	ldrh.w	ip, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005b32:	3301      	adds	r3, #1
 8005b34:	b2d9      	uxtb	r1, r3
 8005b36:	42a9      	cmp	r1, r5
      wtemp += pHandle->aBuffer[i];
 8005b38:	4462      	add	r2, ip
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	d3f7      	bcc.n	8005b2e <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8005b3e:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005b42:	1e6b      	subs	r3, r5, #1
 8005b44:	459e      	cmp	lr, r3
    pHandle->_Super.LatestConv = hAux;
 8005b46:	80a0      	strh	r0, [r4, #4]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8005b48:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005b4a:	da0a      	bge.n	8005b62 <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 8005b4c:	f10e 0e01 	add.w	lr, lr, #1
 8005b50:	f884 e025 	strb.w	lr, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8005b54:	4620      	mov	r0, r4
 8005b56:	f7ff ffc9 	bl	8005aec <RVBS_CheckFaultState>
 8005b5a:	8120      	strh	r0, [r4, #8]
}
 8005b5c:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8005b5e:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8005b60:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8005b68:	4620      	mov	r0, r4
 8005b6a:	f7ff ffbf 	bl	8005aec <RVBS_CheckFaultState>
 8005b6e:	8120      	strh	r0, [r4, #8]
}
 8005b70:	bd70      	pop	{r4, r5, r6, pc}
 8005b72:	bf00      	nop

08005b74 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8005b74:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8005b76:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8005b78:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8005b7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8005b80:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8005b82:	4770      	bx	lr

08005b84 <REMNG_Calc>:
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 8005b84:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8005b88:	2901      	cmp	r1, #1
 8005b8a:	d90c      	bls.n	8005ba6 <REMNG_Calc+0x22>
{
 8005b8c:	b410      	push	{r4}
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;
 8005b8e:	e9d0 4204 	ldrd	r4, r2, [r0, #16]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 8005b92:	3901      	subs	r1, #1
    current_ref += pHandle->IncDecAmount;
 8005b94:	4423      	add	r3, r4
    pHandle->RampRemainingStep --;
 8005b96:	60c1      	str	r1, [r0, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 8005b98:	6083      	str	r3, [r0, #8]

#ifdef FASTDIV
  ret_val = FD_FastDiv( & ( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8005b9a:	fb93 f2f2 	sdiv	r2, r3, r2
#endif

  return ret_val;
}
 8005b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	4770      	bx	lr
  else if ( pHandle->RampRemainingStep == 1u )
 8005ba6:	d005      	beq.n	8005bb4 <REMNG_Calc+0x30>
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8005ba8:	6942      	ldr	r2, [r0, #20]
  pHandle->Ext = current_ref;
 8005baa:	6083      	str	r3, [r0, #8]
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8005bac:	fb93 f2f2 	sdiv	r2, r3, r2
}
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	4770      	bx	lr
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8005bb4:	6842      	ldr	r2, [r0, #4]
 8005bb6:	6943      	ldr	r3, [r0, #20]
    pHandle->RampRemainingStep = 0u;
 8005bb8:	2100      	movs	r1, #0
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8005bba:	fb02 f303 	mul.w	r3, r2, r3
    pHandle->RampRemainingStep = 0u;
 8005bbe:	60c1      	str	r1, [r0, #12]
  pHandle->Ext = current_ref;
 8005bc0:	6083      	str	r3, [r0, #8]
}
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop

08005bc8 <REMNG_RampCompleted>:
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->RampRemainingStep == 0u )
 8005bc8:	68c0      	ldr	r0, [r0, #12]
  {
    retVal = true;
  }
  return retVal;
}
 8005bca:	fab0 f080 	clz	r0, r0
 8005bce:	0940      	lsrs	r0, r0, #5
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop

08005bd4 <getScalingFactor>:
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
  {
    aux = -Target;
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	bfb8      	it	lt
 8005bd8:	4240      	neglt	r0, r0
{
 8005bda:	2301      	movs	r3, #1
  {
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8005bdc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005be0:	e002      	b.n	8005be8 <getScalingFactor+0x14>
  for ( i = 1u; i < 32u; i++ )
 8005be2:	3301      	adds	r3, #1
 8005be4:	2b20      	cmp	r3, #32
 8005be6:	d007      	beq.n	8005bf8 <getScalingFactor+0x24>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8005be8:	fa21 f203 	lsr.w	r2, r1, r3
    if ( TargetAbs >= limit )
 8005bec:	4290      	cmp	r0, r2
 8005bee:	d3f8      	bcc.n	8005be2 <getScalingFactor+0xe>
    {
      break;
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	4098      	lsls	r0, r3
}
 8005bf6:	4770      	bx	lr
 8005bf8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop

08005c00 <REMNG_ExecRamp>:
{
 8005c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c04:	4604      	mov	r4, r0
 8005c06:	460e      	mov	r6, r1
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8005c08:	6880      	ldr	r0, [r0, #8]
 8005c0a:	6963      	ldr	r3, [r4, #20]
  if ( Durationms == 0u )
 8005c0c:	4615      	mov	r5, r2
 8005c0e:	b962      	cbnz	r2, 8005c2a <REMNG_ExecRamp+0x2a>
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8005c10:	4608      	mov	r0, r1
 8005c12:	f7ff ffdf 	bl	8005bd4 <getScalingFactor>
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8005c16:	fb00 f606 	mul.w	r6, r0, r6
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8005c1a:	6160      	str	r0, [r4, #20]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8005c1c:	4628      	mov	r0, r5
    pHandle->IncDecAmount = 0;
 8005c1e:	e9c4 5003 	strd	r5, r0, [r4, #12]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8005c22:	60a6      	str	r6, [r4, #8]
}
 8005c24:	2001      	movs	r0, #1
 8005c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8005c2a:	fb90 f8f3 	sdiv	r8, r0, r3
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 8005c2e:	eba1 0708 	sub.w	r7, r1, r8
 8005c32:	4638      	mov	r0, r7
 8005c34:	f7ff ffce 	bl	8005bd4 <getScalingFactor>
 8005c38:	4682      	mov	sl, r0
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	f7ff ffca 	bl	8005bd4 <getScalingFactor>
 8005c40:	4681      	mov	r9, r0
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8005c42:	4630      	mov	r0, r6
 8005c44:	f7ff ffc6 	bl	8005bd4 <getScalingFactor>
    if ( wScalingFactor <  wScalingFactor2 )
 8005c48:	45ca      	cmp	sl, r9
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8005c4a:	4603      	mov	r3, r0
      if ( wScalingFactor < wScalingFactor3 )
 8005c4c:	bf2c      	ite	cs
 8005c4e:	4648      	movcs	r0, r9
 8005c50:	4650      	movcc	r0, sl
      if ( wScalingFactor2 < wScalingFactor3 )
 8005c52:	4298      	cmp	r0, r3
 8005c54:	bf28      	it	cs
 8005c56:	4618      	movcs	r0, r3
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8005c58:	fb08 f300 	mul.w	r3, r8, r0
 8005c5c:	60a3      	str	r3, [r4, #8]
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8005c5e:	6823      	ldr	r3, [r4, #0]
    aux /= 1000u;
 8005c60:	4a08      	ldr	r2, [pc, #32]	; (8005c84 <REMNG_ExecRamp+0x84>)
    pHandle->ScalingFactor = wScalingFactorMin;
 8005c62:	6160      	str	r0, [r4, #20]
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8005c64:	fb05 f303 	mul.w	r3, r5, r3
    aux /= 1000u;
 8005c68:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6c:	099b      	lsrs	r3, r3, #6
    pHandle->RampRemainingStep++;
 8005c6e:	1c5d      	adds	r5, r3, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 8005c70:	fb07 f000 	mul.w	r0, r7, r0
    pHandle->TargetFinal = TargetFinal;
 8005c74:	6066      	str	r6, [r4, #4]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 8005c76:	fb90 f0f5 	sdiv	r0, r0, r5
    pHandle->IncDecAmount = 0;
 8005c7a:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 8005c7e:	2001      	movs	r0, #1
 8005c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c84:	10624dd3 	.word	0x10624dd3

08005c88 <RUC_Init>:
__weak void RUC_Init( RevUpCtrl_Handle_t * pHandle,
               SpeednTorqCtrl_Handle_t * pSTC,
               VirtualSpeedSensor_Handle_t * pVSS,
               STO_Handle_t * pSNSL,
               PWMC_Handle_t * pPWM )
{
 8005c88:	b500      	push	{lr}
  RevUpCtrl_PhaseParams_t * pRUCPhaseParams = &pHandle->ParamsData[0];
  uint8_t bPhase = 0u;

  pHandle->pSTC = pSTC;
 8005c8a:	6681      	str	r1, [r0, #104]	; 0x68
  pHandle->OTFSCLowside = false;
  pHandle->EnteredZone1 = false;

  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
  {
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8005c8c:	6941      	ldr	r1, [r0, #20]
  pHandle->pSNSL = pSNSL;
 8005c8e:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
  pHandle->OTFSCLowside = false;
 8005c92:	f04f 0c00 	mov.w	ip, #0
  pHandle->pPWM = pPWM;
 8005c96:	9b01      	ldr	r3, [sp, #4]
  pHandle->OTFSCLowside = false;
 8005c98:	f8a0 c054 	strh.w	ip, [r0, #84]	; 0x54
  pHandle->pPWM = pPWM;
 8005c9c:	6743      	str	r3, [r0, #116]	; 0x74
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8005c9e:	b309      	cbz	r1, 8005ce4 <RUC_Init+0x5c>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8005ca0:	688b      	ldr	r3, [r1, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8005ca2:	b323      	cbz	r3, 8005cee <RUC_Init+0x66>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8005ca4:	689b      	ldr	r3, [r3, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8005ca6:	b32b      	cbz	r3, 8005cf4 <RUC_Init+0x6c>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8005ca8:	689b      	ldr	r3, [r3, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8005caa:	b333      	cbz	r3, 8005cfa <RUC_Init+0x72>
 8005cac:	689b      	ldr	r3, [r3, #8]
    bPhase++;
 8005cae:	f04f 0c05 	mov.w	ip, #5
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8005cb2:	b1cb      	cbz	r3, 8005ce8 <RUC_Init+0x60>
 8005cb4:	2204      	movs	r2, #4
 8005cb6:	f04f 0c05 	mov.w	ip, #5
  }
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

  pHandle->bPhaseNbr = bPhase;

  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8005cba:	8803      	ldrh	r3, [r0, #0]
 8005cbc:	4910      	ldr	r1, [pc, #64]	; (8005d00 <RUC_Init+0x78>)
 8005cbe:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8005cc2:	fb0e f303 	mul.w	r3, lr, r3
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005cc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8005cca:	fba1 1303 	umull	r1, r3, r1, r3
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005cce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005cd2:	2100      	movs	r1, #0
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8005cd4:	099b      	lsrs	r3, r3, #6
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005cd6:	6151      	str	r1, [r2, #20]
  pHandle->bPhaseNbr = bPhase;
 8005cd8:	f880 c048 	strb.w	ip, [r0, #72]	; 0x48
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8005cdc:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56

}
 8005ce0:	f85d fb04 	ldr.w	pc, [sp], #4
    bPhase++;
 8005ce4:	f04f 0c01 	mov.w	ip, #1
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005ce8:	f10c 32ff 	add.w	r2, ip, #4294967295
 8005cec:	e7e5      	b.n	8005cba <RUC_Init+0x32>
    bPhase++;
 8005cee:	f04f 0c02 	mov.w	ip, #2
 8005cf2:	e7f9      	b.n	8005ce8 <RUC_Init+0x60>
 8005cf4:	f04f 0c03 	mov.w	ip, #3
 8005cf8:	e7f6      	b.n	8005ce8 <RUC_Init+0x60>
 8005cfa:	f04f 0c04 	mov.w	ip, #4
 8005cfe:	e7f3      	b.n	8005ce8 <RUC_Init+0x60>
 8005d00:	10624dd3 	.word	0x10624dd3

08005d04 <RUC_Clear>:
  * @param  hMotorDirection: rotor rotation direction.
  *         This parameter must be -1 or +1.
  *  @retval none
  */
__weak void RUC_Clear( RevUpCtrl_Handle_t * pHandle, int16_t hMotorDirection )
{
 8005d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  VirtualSpeedSensor_Handle_t * pVSS = pHandle->pVSS;
 8005d08:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
  SpeednTorqCtrl_Handle_t * pSTC = pHandle->pSTC;
 8005d0a:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
  RevUpCtrl_PhaseParams_t * pPhaseParams = pHandle->ParamsData;

  pHandle->hDirection = hMotorDirection;
 8005d0e:	80c1      	strh	r1, [r0, #6]
  pHandle->EnteredZone1 = false;

  /*Initializes the rev up stages counter.*/
  pHandle->bStageCnt = 0u;
 8005d10:	2600      	movs	r6, #0
{
 8005d12:	4604      	mov	r4, r0
  pHandle->bStageCnt = 0u;
 8005d14:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
  pHandle->bOTFRelCounter = 0u;
 8005d18:	f880 6053 	strb.w	r6, [r0, #83]	; 0x53
  pHandle->OTFSCLowside = false;
 8005d1c:	f8a0 6054 	strh.w	r6, [r0, #84]	; 0x54

  /* Calls the clear method of VSS.*/
  VSS_Clear( pVSS );
 8005d20:	4638      	mov	r0, r7

  /* Sets the STC in torque mode.*/
  STC_SetControlMode( pSTC, STC_TORQUE_MODE );

  /* Sets the mechanical starting angle of VSS.*/
  VSS_SetMecAngle( pVSS, pHandle->hStartingMecAngle * hMotorDirection );
 8005d22:	b28d      	uxth	r5, r1
  VSS_Clear( pVSS );
 8005d24:	f000 fe56 	bl	80069d4 <VSS_Clear>
  STC_SetControlMode( pSTC, STC_TORQUE_MODE );
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4640      	mov	r0, r8
 8005d2c:	f000 f910 	bl	8005f50 <STC_SetControlMode>
  VSS_SetMecAngle( pVSS, pHandle->hStartingMecAngle * hMotorDirection );
 8005d30:	8861      	ldrh	r1, [r4, #2]
 8005d32:	fb11 f105 	smulbb	r1, r1, r5
 8005d36:	b209      	sxth	r1, r1
 8005d38:	4638      	mov	r0, r7
 8005d3a:	f000 fef9 	bl	8006b30 <VSS_SetMecAngle>

  /* Sets to zero the starting torque of STC */
  STC_ExecRamp( pSTC, 0, 0u );
 8005d3e:	4632      	mov	r2, r6
 8005d40:	4631      	mov	r1, r6
 8005d42:	4640      	mov	r0, r8
 8005d44:	f000 f908 	bl	8005f58 <STC_ExecRamp>

  /* Gives the first command to STC and VSS.*/
  STC_ExecRamp( pSTC, pPhaseParams->hFinalTorque * hMotorDirection,
 8005d48:	8a21      	ldrh	r1, [r4, #16]
 8005d4a:	89a2      	ldrh	r2, [r4, #12]
 8005d4c:	fb11 f105 	smulbb	r1, r1, r5
 8005d50:	b209      	sxth	r1, r1
 8005d52:	4640      	mov	r0, r8
 8005d54:	f000 f900 	bl	8005f58 <STC_ExecRamp>
                ( uint32_t )( pPhaseParams->hDurationms ) );

  VSS_SetMecAcceleration( pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection,
 8005d58:	89e1      	ldrh	r1, [r4, #14]
 8005d5a:	89a2      	ldrh	r2, [r4, #12]
 8005d5c:	fb11 f105 	smulbb	r1, r1, r5
 8005d60:	b209      	sxth	r1, r1
 8005d62:	4638      	mov	r0, r7
 8005d64:	f000 feec 	bl	8006b40 <VSS_SetMecAcceleration>
                          pPhaseParams->hDurationms );

  /* Compute hPhaseRemainingTicks.*/
  pHandle->hPhaseRemainingTicks =
    ( uint16_t )( ( ( uint32_t )pPhaseParams->hDurationms *
 8005d68:	89a3      	ldrh	r3, [r4, #12]
                    ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8005d6a:	8821      	ldrh	r1, [r4, #0]
 8005d6c:	4a06      	ldr	r2, [pc, #24]	; (8005d88 <RUC_Clear+0x84>)

  /*Set the next phases parameter pointer.*/
  pHandle->pCurrentPhaseParams = pPhaseParams->pNext;

  /*Timeout counter for PLL reset during OTF.*/
  pHandle->bResetPLLCnt = 0u;
 8005d6e:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
    ( uint16_t )( ( ( uint32_t )pPhaseParams->hDurationms *
 8005d72:	fb01 f303 	mul.w	r3, r1, r3
                    ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8005d76:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7a:	099b      	lsrs	r3, r3, #6
  pHandle->pCurrentPhaseParams = pPhaseParams->pNext;
 8005d7c:	6962      	ldr	r2, [r4, #20]
 8005d7e:	60a2      	str	r2, [r4, #8]
  pHandle->hPhaseRemainingTicks++;
 8005d80:	3301      	adds	r3, #1
 8005d82:	80a3      	strh	r3, [r4, #4]
}
 8005d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d88:	10624dd3 	.word	0x10624dd3

08005d8c <RUC_Exec>:
  */
__weak bool RUC_Exec( RevUpCtrl_Handle_t * pHandle )
{
  bool retVal = true;

  if ( pHandle->hPhaseRemainingTicks > 0u )
 8005d8c:	8883      	ldrh	r3, [r0, #4]
{
 8005d8e:	b510      	push	{r4, lr}
 8005d90:	4604      	mov	r4, r0
  if ( pHandle->hPhaseRemainingTicks > 0u )
 8005d92:	bb43      	cbnz	r3, 8005de6 <RUC_Exec+0x5a>

  } /* hPhaseRemainingTicks > 0 */

  if ( pHandle->hPhaseRemainingTicks == 0u )
  {
    if ( pHandle->pCurrentPhaseParams != MC_NULL )
 8005d94:	68a0      	ldr	r0, [r4, #8]
 8005d96:	b328      	cbz	r0, 8005de4 <RUC_Exec+0x58>
    {

      /* If it becomes zero the current phase has been completed.*/
      /* Gives the next command to STC and VSS.*/
      STC_ExecRamp( pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8005d98:	8881      	ldrh	r1, [r0, #4]
 8005d9a:	88e3      	ldrh	r3, [r4, #6]
 8005d9c:	8802      	ldrh	r2, [r0, #0]
 8005d9e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005da0:	fb11 f103 	smulbb	r1, r1, r3
 8005da4:	b209      	sxth	r1, r1
 8005da6:	f000 f8d7 	bl	8005f58 <STC_ExecRamp>
                    ( uint32_t )( pHandle->pCurrentPhaseParams->hDurationms ) );

      VSS_SetMecAcceleration( pHandle->pVSS,
                              pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8005daa:	68a3      	ldr	r3, [r4, #8]
 8005dac:	88e0      	ldrh	r0, [r4, #6]
 8005dae:	8859      	ldrh	r1, [r3, #2]
      VSS_SetMecAcceleration( pHandle->pVSS,
 8005db0:	881a      	ldrh	r2, [r3, #0]
                              pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8005db2:	fb11 f100 	smulbb	r1, r1, r0
      VSS_SetMecAcceleration( pHandle->pVSS,
 8005db6:	b209      	sxth	r1, r1
 8005db8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005dba:	f000 fec1 	bl	8006b40 <VSS_SetMecAcceleration>
                              pHandle->pCurrentPhaseParams->hDurationms );

      /* Compute hPhaseRemainingTicks.*/
      pHandle->hPhaseRemainingTicks =
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 8005dbe:	68a1      	ldr	r1, [r4, #8]
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8005dc0:	8820      	ldrh	r0, [r4, #0]
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 8005dc2:	880b      	ldrh	r3, [r1, #0]
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8005dc4:	4a0b      	ldr	r2, [pc, #44]	; (8005df4 <RUC_Exec+0x68>)
      pHandle->hPhaseRemainingTicks++;

      /*Set the next phases parameter pointer.*/
      pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext;
 8005dc6:	6889      	ldr	r1, [r1, #8]
 8005dc8:	60a1      	str	r1, [r4, #8]
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 8005dca:	fb00 f303 	mul.w	r3, r0, r3
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8005dce:	fba2 2303 	umull	r2, r3, r2, r3

      /*Increases the rev up stages counter.*/
      pHandle->bStageCnt++;
 8005dd2:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8005dd6:	099b      	lsrs	r3, r3, #6
      pHandle->hPhaseRemainingTicks++;
 8005dd8:	3301      	adds	r3, #1
      pHandle->bStageCnt++;
 8005dda:	3201      	adds	r2, #1
      pHandle->hPhaseRemainingTicks++;
 8005ddc:	80a3      	strh	r3, [r4, #4]
      pHandle->bStageCnt++;
 8005dde:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
  bool retVal = true;
 8005de2:	2001      	movs	r0, #1
    {
      retVal = false;
    }
  }
  return retVal;
}
 8005de4:	bd10      	pop	{r4, pc}
    pHandle->hPhaseRemainingTicks--;
 8005de6:	3b01      	subs	r3, #1
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	8083      	strh	r3, [r0, #4]
  if ( pHandle->hPhaseRemainingTicks == 0u )
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0d1      	beq.n	8005d94 <RUC_Exec+0x8>
  bool retVal = true;
 8005df0:	2001      	movs	r0, #1
}
 8005df2:	bd10      	pop	{r4, pc}
 8005df4:	10624dd3 	.word	0x10624dd3

08005df8 <RUC_FirstAccelerationStageReached>:
  */
__weak bool RUC_FirstAccelerationStageReached( RevUpCtrl_Handle_t * pHandle )
{
  bool retVal = false;

  if ( pHandle->bStageCnt >= pHandle->bFirstAccelerationStage )
 8005df8:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8005dfc:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
  {
    retVal = true;
  }
  return retVal;
}
 8005e00:	4282      	cmp	r2, r0
 8005e02:	bf34      	ite	cc
 8005e04:	2000      	movcc	r0, #0
 8005e06:	2001      	movcs	r0, #1
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop

08005e0c <RUC_SetPhaseDurationms>:
  *         This parameter must be set in millisecond.
  *  @retval none
  */
__weak void RUC_SetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, uint16_t hDurationms )
{
  pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 8005e0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005e10:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005e14:	8182      	strh	r2, [r0, #12]
}
 8005e16:	4770      	bx	lr

08005e18 <RUC_SetPhaseFinalMecSpeedUnit>:
  *  @retval none
  */
__weak void RUC_SetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase,
                                    int16_t hFinalMecSpeedUnit )
{
  pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8005e18:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005e1c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005e20:	81c2      	strh	r2, [r0, #14]
}
 8005e22:	4770      	bx	lr

08005e24 <RUC_SetPhaseFinalTorque>:
  * @param  hFinalTorque: new targetted motor torque.
  *  @retval none
  */
__weak void RUC_SetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, int16_t hFinalTorque )
{
  pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 8005e24:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005e28:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005e2c:	8202      	strh	r2, [r0, #16]
}
 8005e2e:	4770      	bx	lr

08005e30 <RUC_GetPhaseDurationms>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns duration used in selected phase.
  */
__weak uint16_t RUC_GetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( uint16_t )pHandle->ParamsData[bPhase].hDurationms );
 8005e30:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005e34:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8005e38:	8980      	ldrh	r0, [r0, #12]
 8005e3a:	4770      	bx	lr

08005e3c <RUC_GetPhaseFinalMecSpeedUnit>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted rotor speed set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalMecSpeedUnit );
 8005e3c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005e40:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8005e44:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop

08005e4c <RUC_GetPhaseFinalTorque>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted motor torque set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalTorque );
 8005e4c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005e50:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8005e54:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop

08005e5c <RUC_GetNumberOfPhases>:
  *  @retval Returns number of phases relative to the programmed revup.
  */
__weak uint8_t RUC_GetNumberOfPhases( RevUpCtrl_Handle_t * pHandle )
{
  return ( ( uint8_t )pHandle->bPhaseNbr );
}
 8005e5c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop

08005e64 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8005e64:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop

08005e6c <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8005e6c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop

08005e74 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8005e74:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop

08005e7c <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8005e7c:	f9b1 3000 	ldrsh.w	r3, [r1]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005e80:	f8b0 c016 	ldrh.w	ip, [r0, #22]
{
 8005e84:	b410      	push	{r4}
  if ( *pMecSpeedUnit < 0 )
 8005e86:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 8005e88:	bfb8      	it	lt
 8005e8a:	425b      	neglt	r3, r3
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8005e8c:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005e8e:	459c      	cmp	ip, r3
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8005e90:	78c1      	ldrb	r1, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8005e92:	7802      	ldrb	r2, [r0, #0]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8005e94:	8a84      	ldrh	r4, [r0, #20]
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005e96:	d819      	bhi.n	8005ecc <SPD_IsMecSpeedReliable+0x50>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8005e98:	429c      	cmp	r4, r3
 8005e9a:	bf2c      	ite	cs
 8005e9c:	2400      	movcs	r4, #0
 8005e9e:	2401      	movcc	r4, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8005ea0:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8005ea4:	f8b0 c018 	ldrh.w	ip, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8005ea8:	2b00      	cmp	r3, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8005eaa:	bfb8      	it	lt
 8005eac:	425b      	neglt	r3, r3
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 8005eae:	b29b      	uxth	r3, r3
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8005eb0:	459c      	cmp	ip, r3
 8005eb2:	d300      	bcc.n	8005eb6 <SPD_IsMecSpeedReliable+0x3a>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8005eb4:	b164      	cbz	r4, 8005ed0 <SPD_IsMecSpeedReliable+0x54>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8005eb6:	4291      	cmp	r1, r2
 8005eb8:	d901      	bls.n	8005ebe <SPD_IsMecSpeedReliable+0x42>
    {
      bSpeedErrorNumber++;
 8005eba:	3201      	adds	r2, #1
 8005ebc:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8005ebe:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 8005ec0:	1a50      	subs	r0, r2, r1
 8005ec2:	bf18      	it	ne
 8005ec4:	2001      	movne	r0, #1
 8005ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eca:	4770      	bx	lr
    SpeedError = true;
 8005ecc:	2401      	movs	r4, #1
 8005ece:	e7e7      	b.n	8005ea0 <SPD_IsMecSpeedReliable+0x24>
      bSpeedErrorNumber = 0u;
 8005ed0:	4291      	cmp	r1, r2
 8005ed2:	bf88      	it	hi
 8005ed4:	2200      	movhi	r2, #0
 8005ed6:	e7f2      	b.n	8005ebe <SPD_IsMecSpeedReliable+0x42>

08005ed8 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8005ed8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8005edc:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
  wAux *= INT16_MAX;
 8005ee0:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8005ee4:	fb93 f0f2 	sdiv	r0, r3, r2
  return ( int16_t )wAux;
}
 8005ee8:	b200      	sxth	r0, r0
 8005eea:	4770      	bx	lr

08005eec <STC_Init>:
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8005eec:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
  pHandle->PISpeed = pPI;
 8005ef0:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8005ef2:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
  pHandle->SPD = SPD_Handle;
 8005ef6:	6142      	str	r2, [r0, #20]
{
 8005ef8:	b410      	push	{r4}
  pHandle->Mode = pHandle->ModeDefault;
 8005efa:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 8005efe:	7004      	strb	r4, [r0, #0]
  pHandle->TargetFinal = 0;
 8005f00:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8005f02:	ea4f 440c 	mov.w	r4, ip, lsl #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8005f06:	0409      	lsls	r1, r1, #16
 8005f08:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->TargetFinal = 0;
 8005f0c:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8005f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->RampRemainingStep = 0u;
 8005f12:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005f14:	6183      	str	r3, [r0, #24]
}
 8005f16:	4770      	bx	lr

08005f18 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8005f18:	6141      	str	r1, [r0, #20]
}
 8005f1a:	4770      	bx	lr

08005f1c <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8005f1c:	6940      	ldr	r0, [r0, #20]
 8005f1e:	4770      	bx	lr

08005f20 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8005f20:	7803      	ldrb	r3, [r0, #0]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d000      	beq.n	8005f28 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8005f26:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8005f28:	6900      	ldr	r0, [r0, #16]
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	f7fe be5c 	b.w	8004be8 <PID_SetIntegralTerm>

08005f30 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8005f30:	6840      	ldr	r0, [r0, #4]
 8005f32:	2800      	cmp	r0, #0
 8005f34:	bfbc      	itt	lt
 8005f36:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8005f3a:	30ff      	addlt	r0, #255	; 0xff
}
 8005f3c:	1400      	asrs	r0, r0, #16
 8005f3e:	4770      	bx	lr

08005f40 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8005f40:	6880      	ldr	r0, [r0, #8]
 8005f42:	2800      	cmp	r0, #0
 8005f44:	bfbc      	itt	lt
 8005f46:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8005f4a:	30ff      	addlt	r0, #255	; 0xff
}
 8005f4c:	1400      	asrs	r0, r0, #16
 8005f4e:	4770      	bx	lr

08005f50 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005f50:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8005f52:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005f54:	60c3      	str	r3, [r0, #12]
}
 8005f56:	4770      	bx	lr

08005f58 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8005f58:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005f5a:	7803      	ldrb	r3, [r0, #0]
{
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	460d      	mov	r5, r1
 8005f60:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005f62:	b323      	cbz	r3, 8005fae <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005f64:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005f66:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	bfbc      	itt	lt
 8005f6c:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8005f70:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005f72:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005f74:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005f78:	dd01      	ble.n	8005f7e <STC_ExecRamp+0x26>
      AllowedRange = false;
 8005f7a:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8005f7c:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8005f7e:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8005f82:	428b      	cmp	r3, r1
 8005f84:	dcf9      	bgt.n	8005f7a <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8005f86:	8c23      	ldrh	r3, [r4, #32]
 8005f88:	4299      	cmp	r1, r3
 8005f8a:	da03      	bge.n	8005f94 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8005f8c:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8005f90:	428b      	cmp	r3, r1
 8005f92:	dbf2      	blt.n	8005f7a <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8005f94:	b9ae      	cbnz	r6, 8005fc2 <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8005f96:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8005f98:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8005f9a:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8005f9c:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8005fa0:	bf0c      	ite	eq
 8005fa2:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8005fa4:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8005fa6:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8005fa8:	61a3      	str	r3, [r4, #24]
 8005faa:	2001      	movs	r0, #1
}
 8005fac:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8005fae:	f7ff ffc7 	bl	8005f40 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8005fb2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005fb4:	429d      	cmp	r5, r3
 8005fb6:	dce0      	bgt.n	8005f7a <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8005fb8:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8005fbc:	42ab      	cmp	r3, r5
 8005fbe:	dcdc      	bgt.n	8005f7a <STC_ExecRamp+0x22>
 8005fc0:	e7e8      	b.n	8005f94 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8005fc2:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 8005fc4:	4a07      	ldr	r2, [pc, #28]	; (8005fe4 <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 8005fc6:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8005fc8:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8005fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd0:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8005fd2:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8005fd4:	1a28      	subs	r0, r5, r0
 8005fd6:	0400      	lsls	r0, r0, #16
      pHandle->RampRemainingStep++;
 8005fd8:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8005fda:	fb90 f0f3 	sdiv	r0, r0, r3
      pHandle->IncDecAmount = wAux1;
 8005fde:	61a0      	str	r0, [r4, #24]
 8005fe0:	2001      	movs	r0, #1
}
 8005fe2:	bd70      	pop	{r4, r5, r6, pc}
 8005fe4:	10624dd3 	.word	0x10624dd3

08005fe8 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005fec:	6183      	str	r3, [r0, #24]
}
 8005fee:	4770      	bx	lr

08005ff0 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8005ff0:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 8005ff2:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005ff6:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8005ff8:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8005ffa:	2a00      	cmp	r2, #0
 8005ffc:	bf08      	it	eq
 8005ffe:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 8006000:	2b01      	cmp	r3, #1
{
 8006002:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 8006004:	d90c      	bls.n	8006020 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8006006:	6981      	ldr	r1, [r0, #24]
 8006008:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 800600a:	3b01      	subs	r3, #1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 800600c:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 800600e:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006010:	4630      	mov	r0, r6
 8006012:	db09      	blt.n	8006028 <STC_CalcTorqueReference+0x38>
 8006014:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006016:	2a01      	cmp	r2, #1
 8006018:	d00a      	beq.n	8006030 <STC_CalcTorqueReference+0x40>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800601a:	b228      	sxth	r0, r5
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800601c:	60a6      	str	r6, [r4, #8]
  }

  return hTorqueReference;
}
 800601e:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8006020:	d012      	beq.n	8006048 <STC_CalcTorqueReference+0x58>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006022:	2e00      	cmp	r6, #0
 8006024:	4630      	mov	r0, r6
 8006026:	daf5      	bge.n	8006014 <STC_CalcTorqueReference+0x24>
 8006028:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 800602c:	30ff      	adds	r0, #255	; 0xff
 800602e:	e7f1      	b.n	8006014 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8006030:	6960      	ldr	r0, [r4, #20]
 8006032:	f7ff ff1b 	bl	8005e6c <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8006036:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8006038:	b209      	sxth	r1, r1
 800603a:	6920      	ldr	r0, [r4, #16]
 800603c:	f7fe fde0 	bl	8004c00 <PI_Controller>
    pHandle->SpeedRefUnitExt = wCurrentReference;
 8006040:	6066      	str	r6, [r4, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8006042:	0406      	lsls	r6, r0, #16
 8006044:	60a6      	str	r6, [r4, #8]
}
 8006046:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006048:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 800604c:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800604e:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8006050:	60c3      	str	r3, [r0, #12]
 8006052:	e7e0      	b.n	8006016 <STC_CalcTorqueReference+0x26>

08006054 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8006054:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop

0800605c <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 800605c:	8bc0      	ldrh	r0, [r0, #30]
 800605e:	4770      	bx	lr

08006060 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8006060:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop

08006068 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8006068:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 800606c:	2200      	movs	r2, #0
 800606e:	b299      	uxth	r1, r3
 8006070:	f361 020f 	bfi	r2, r1, #0, #16
 8006074:	0c1b      	lsrs	r3, r3, #16
 8006076:	f363 421f 	bfi	r2, r3, #16, #16
{
 800607a:	b082      	sub	sp, #8
}
 800607c:	4610      	mov	r0, r2
 800607e:	b002      	add	sp, #8
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop

08006084 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006084:	b510      	push	{r4, lr}
 8006086:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8006088:	6940      	ldr	r0, [r0, #20]
 800608a:	f7ff feef 	bl	8005e6c <SPD_GetAvrgMecSpeedUnit>
 800608e:	0400      	lsls	r0, r0, #16
 8006090:	6060      	str	r0, [r4, #4]
}
 8006092:	bd10      	pop	{r4, pc}

08006094 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8006094:	2300      	movs	r3, #0
 8006096:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8006098:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop

080060a0 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 80060a0:	b500      	push	{lr}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80060a2:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80060a4:	f8b0 e004 	ldrh.w	lr, [r0, #4]
{
 80060a8:	4684      	mov	ip, r0
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80060aa:	430b      	orrs	r3, r1
  State_t LocalState =  pHandle->bState;
 80060ac:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80060ae:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 80060b2:	ea41 010e 	orr.w	r1, r1, lr
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80060b6:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 80060b8:	280a      	cmp	r0, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80060ba:	f8ac 2002 	strh.w	r2, [ip, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80060be:	f8ac 1004 	strh.w	r1, [ip, #4]
  if ( LocalState == FAULT_NOW )
 80060c2:	d007      	beq.n	80060d4 <STM_FaultProcessing+0x34>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 80060c4:	b90a      	cbnz	r2, 80060ca <STM_FaultProcessing+0x2a>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 80060c6:	f85d fb04 	ldr.w	pc, [sp], #4
      pHandle->bState = FAULT_NOW;
 80060ca:	200a      	movs	r0, #10
 80060cc:	f88c 0000 	strb.w	r0, [ip]
}
 80060d0:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 80060d4:	2a00      	cmp	r2, #0
 80060d6:	d1f6      	bne.n	80060c6 <STM_FaultProcessing+0x26>
      pHandle->bState = FAULT_OVER;
 80060d8:	200b      	movs	r0, #11
 80060da:	f88c 0000 	strb.w	r0, [ip]
}
 80060de:	f85d fb04 	ldr.w	pc, [sp], #4
 80060e2:	bf00      	nop

080060e4 <STM_NextState>:
{
 80060e4:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 80060e6:	7803      	ldrb	r3, [r0, #0]
 80060e8:	2b14      	cmp	r3, #20
 80060ea:	d810      	bhi.n	800610e <STM_NextState+0x2a>
 80060ec:	e8df f003 	tbb	[pc, r3]
 80060f0:	220d2e64 	.word	0x220d2e64
 80060f4:	4a0d4d51 	.word	0x4a0d4d51
 80060f8:	0f0f4247 	.word	0x0f0f4247
 80060fc:	3f5f0b17 	.word	0x3f5f0b17
 8006100:	3539583c 	.word	0x3539583c
 8006104:	2b          	.byte	0x2b
 8006105:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006106:	290e      	cmp	r1, #14
 8006108:	d00b      	beq.n	8006122 <STM_NextState+0x3e>
      if ( bState == ANY_STOP )
 800610a:	2907      	cmp	r1, #7
 800610c:	d009      	beq.n	8006122 <STM_NextState+0x3e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800610e:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006112:	2b01      	cmp	r3, #1
 8006114:	d001      	beq.n	800611a <STM_NextState+0x36>
 8006116:	2907      	cmp	r1, #7
 8006118:	d106      	bne.n	8006128 <STM_NextState+0x44>
 800611a:	2000      	movs	r0, #0
}
 800611c:	bd08      	pop	{r3, pc}
      if ( bState == IDLE )
 800611e:	2900      	cmp	r1, #0
 8006120:	d1f5      	bne.n	800610e <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 8006122:	7001      	strb	r1, [r0, #0]
 8006124:	2001      	movs	r0, #1
}
 8006126:	bd08      	pop	{r3, pc}
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8006128:	2200      	movs	r2, #0
 800612a:	2180      	movs	r1, #128	; 0x80
 800612c:	f7ff ffb8 	bl	80060a0 <STM_FaultProcessing>
 8006130:	2000      	movs	r0, #0
}
 8006132:	bd08      	pop	{r3, pc}
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 8006134:	2907      	cmp	r1, #7
 8006136:	d0f4      	beq.n	8006122 <STM_NextState+0x3e>
 8006138:	2911      	cmp	r1, #17
 800613a:	d8e8      	bhi.n	800610e <STM_NextState+0x2a>
 800613c:	4b22      	ldr	r3, [pc, #136]	; (80061c8 <STM_NextState+0xe4>)
 800613e:	40cb      	lsrs	r3, r1
 8006140:	07da      	lsls	r2, r3, #31
 8006142:	d4ee      	bmi.n	8006122 <STM_NextState+0x3e>
 8006144:	e7e3      	b.n	800610e <STM_NextState+0x2a>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8006146:	2912      	cmp	r1, #18
 8006148:	d1df      	bne.n	800610a <STM_NextState+0x26>
 800614a:	e7ea      	b.n	8006122 <STM_NextState+0x3e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800614c:	2907      	cmp	r1, #7
 800614e:	d0e8      	beq.n	8006122 <STM_NextState+0x3e>
 8006150:	f1a1 030d 	sub.w	r3, r1, #13
 8006154:	2b01      	cmp	r3, #1
 8006156:	d8da      	bhi.n	800610e <STM_NextState+0x2a>
 8006158:	e7e3      	b.n	8006122 <STM_NextState+0x3e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800615a:	1f0b      	subs	r3, r1, #4
 800615c:	2b01      	cmp	r3, #1
 800615e:	d8d4      	bhi.n	800610a <STM_NextState+0x26>
 8006160:	e7df      	b.n	8006122 <STM_NextState+0x3e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8006162:	2904      	cmp	r1, #4
 8006164:	d1d1      	bne.n	800610a <STM_NextState+0x26>
 8006166:	e7dc      	b.n	8006122 <STM_NextState+0x3e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006168:	2911      	cmp	r1, #17
 800616a:	d1ce      	bne.n	800610a <STM_NextState+0x26>
 800616c:	e7d9      	b.n	8006122 <STM_NextState+0x3e>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800616e:	2902      	cmp	r1, #2
 8006170:	d1cb      	bne.n	800610a <STM_NextState+0x26>
 8006172:	e7d6      	b.n	8006122 <STM_NextState+0x3e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8006174:	2900      	cmp	r1, #0
 8006176:	d0d4      	beq.n	8006122 <STM_NextState+0x3e>
 8006178:	290c      	cmp	r1, #12
 800617a:	d1c8      	bne.n	800610e <STM_NextState+0x2a>
 800617c:	e7d1      	b.n	8006122 <STM_NextState+0x3e>
      if ( bState == STOP_IDLE )
 800617e:	2909      	cmp	r1, #9
 8006180:	d1c5      	bne.n	800610e <STM_NextState+0x2a>
 8006182:	e7ce      	b.n	8006122 <STM_NextState+0x3e>
      if ( bState == STOP )
 8006184:	2908      	cmp	r1, #8
 8006186:	d1c2      	bne.n	800610e <STM_NextState+0x2a>
 8006188:	e7cb      	b.n	8006122 <STM_NextState+0x3e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800618a:	1f8b      	subs	r3, r1, #6
 800618c:	2b01      	cmp	r3, #1
 800618e:	d8be      	bhi.n	800610e <STM_NextState+0x2a>
 8006190:	e7c7      	b.n	8006122 <STM_NextState+0x3e>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006192:	2913      	cmp	r1, #19
 8006194:	d0c5      	beq.n	8006122 <STM_NextState+0x3e>
 8006196:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800619a:	2b05      	cmp	r3, #5
 800619c:	d1b9      	bne.n	8006112 <STM_NextState+0x2e>
 800619e:	e7c0      	b.n	8006122 <STM_NextState+0x3e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 80061a0:	2914      	cmp	r1, #20
 80061a2:	d8b4      	bhi.n	800610e <STM_NextState+0x2a>
 80061a4:	4b09      	ldr	r3, [pc, #36]	; (80061cc <STM_NextState+0xe8>)
 80061a6:	410b      	asrs	r3, r1
 80061a8:	07db      	lsls	r3, r3, #31
 80061aa:	d5ba      	bpl.n	8006122 <STM_NextState+0x3e>
 80061ac:	e7af      	b.n	800610e <STM_NextState+0x2a>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 80061ae:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 80061b2:	2b07      	cmp	r3, #7
 80061b4:	d1ab      	bne.n	800610e <STM_NextState+0x2a>
 80061b6:	e7b4      	b.n	8006122 <STM_NextState+0x3e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80061b8:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d0b0      	beq.n	8006122 <STM_NextState+0x3e>
           || ( bState == ICLWAIT ) )
 80061c0:	290c      	cmp	r1, #12
 80061c2:	d1a8      	bne.n	8006116 <STM_NextState+0x32>
 80061c4:	e7ad      	b.n	8006122 <STM_NextState+0x3e>
 80061c6:	bf00      	nop
 80061c8:	00030012 	.word	0x00030012
 80061cc:	ffebff7f 	.word	0xffebff7f

080061d0 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 80061d0:	7800      	ldrb	r0, [r0, #0]
 80061d2:	4770      	bx	lr

080061d4 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 80061d4:	7803      	ldrb	r3, [r0, #0]
 80061d6:	2b0b      	cmp	r3, #11
 80061d8:	d001      	beq.n	80061de <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 80061da:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 80061dc:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 80061de:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80061e0:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 80061e2:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80061e4:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 80061e6:	2001      	movs	r0, #1
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop

080061ec <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 80061ec:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 80061ee:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 80061f0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop

080061f8 <STO_PLL_CalcElAngle>:
  * @param  pHandle: handler of the current instance of the STO component
  * @param  pInputVars_str pointer to the observer inputs structure
  * @retval int16_t rotor electrical angle (s16Degrees)
  */
__weak int16_t STO_PLL_CalcElAngle( STO_PLL_Handle_t * pHandle, Observer_Inputs_t * pInputs )
{
 80061f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t wBemf_alfa_est_Next, wBemf_beta_est_Next;
  int16_t hAux, hAux_Alfa, hAux_Beta, hIalfa_err, hIbeta_err, hRotor_Speed,
          hValfa, hVbeta;


  if ( pHandle->wBemf_alfa_est > ( int32_t )( pHandle->hF2 )*INT16_MAX )
 80061fc:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 8006200:	6e87      	ldr	r7, [r0, #104]	; 0x68
 8006202:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8006206:	429f      	cmp	r7, r3
{
 8006208:	b087      	sub	sp, #28
 800620a:	4604      	mov	r4, r0
  if ( pHandle->wBemf_alfa_est > ( int32_t )( pHandle->hF2 )*INT16_MAX )
 800620c:	f340 80c9 	ble.w	80063a2 <STO_PLL_CalcElAngle+0x1aa>
  {
    pHandle->wBemf_alfa_est = INT16_MAX * ( int32_t )( pHandle->hF2 );
 8006210:	6683      	str	r3, [r0, #104]	; 0x68
 8006212:	461f      	mov	r7, r3
  {
  }
#ifdef FULL_MISRA_C_COMPLIANCY
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est / pHandle->hF2 );
#else
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est >> pHandle->F2LOG );
 8006214:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
#endif

  if ( pHandle->wBemf_beta_est > INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 8006218:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est >> pHandle->F2LOG );
 800621a:	fa47 f205 	asr.w	r2, r7, r5
  if ( pHandle->wBemf_beta_est > INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 800621e:	42b3      	cmp	r3, r6
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est >> pHandle->F2LOG );
 8006220:	9200      	str	r2, [sp, #0]
 8006222:	fa0f fc82 	sxth.w	ip, r2
  if ( pHandle->wBemf_beta_est > INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 8006226:	f2c0 80b9 	blt.w	800639c <STO_PLL_CalcElAngle+0x1a4>
  {
    pHandle->wBemf_beta_est = INT16_MAX * ( int32_t )( pHandle->hF2 );
  }
  else if ( pHandle->wBemf_beta_est <= -INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 800622a:	425b      	negs	r3, r3
 800622c:	429e      	cmp	r6, r3
 800622e:	f340 80b5 	ble.w	800639c <STO_PLL_CalcElAngle+0x1a4>
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est / pHandle->hF2 );
#else
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
#endif

  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8006232:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8006236:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
 800623a:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
 800623e:	fa46 f205 	asr.w	r2, r6, r5
  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8006242:	4599      	cmp	r9, r3
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
 8006244:	9201      	str	r2, [sp, #4]
 8006246:	b210      	sxth	r0, r2
  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8006248:	f340 80b1 	ble.w	80063ae <STO_PLL_CalcElAngle+0x1b6>
  {
    pHandle->Ialfa_est = INT16_MAX * ( int32_t )( pHandle->hF1 );
 800624c:	6623      	str	r3, [r4, #96]	; 0x60
 800624e:	4699      	mov	r9, r3
  }
  else
  {
  }

  if ( pHandle->Ibeta_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8006250:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
 8006254:	4543      	cmp	r3, r8
 8006256:	f2c0 809e 	blt.w	8006396 <STO_PLL_CalcElAngle+0x19e>
  {
    pHandle->Ibeta_est = INT16_MAX * ( int32_t )( pHandle->hF1 );
  }
  else if ( pHandle->Ibeta_est <= -INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 800625a:	425b      	negs	r3, r3
 800625c:	4598      	cmp	r8, r3
 800625e:	f340 809a 	ble.w	8006396 <STO_PLL_CalcElAngle+0x19e>
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est / pHandle->hF1 );
#else
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
#endif

  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8006262:	88cb      	ldrh	r3, [r1, #6]

  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 8006264:	f8b1 a008 	ldrh.w	sl, [r1, #8]
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8006268:	f8ad 300c 	strh.w	r3, [sp, #12]
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 800626c:	f9b1 3000 	ldrsh.w	r3, [r1]
  hIalfa_err = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 8006270:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8006274:	888d      	ldrh	r5, [r1, #4]
  hValfa = ( int16_t ) ( wAux / 65536 );
#else
  hValfa = ( int16_t ) ( wAux >> 16 );
#endif

  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.beta;
 8006276:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
  hAux = ( int16_t ) ( pHandle->Ialfa_est / pHandle->hF1 );
#else
  hAux = ( int16_t ) ( pHandle->Ialfa_est >> pHandle->F1LOG );
#endif

  wAux = ( int32_t ) ( pHandle->hC1 ) * hAux;
 800627a:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
  wAux = wAux * pHandle->hC6;
  wAux = pHandle->_Super.hElSpeedDpp * wAux;
  wBemf_beta_est_Next -= wAux;

  /*Calls the PLL blockset*/
  pHandle->hBemf_alfa_est = hAux_Alfa;
 800627e:	f8a4 c070 	strh.w	ip, [r4, #112]	; 0x70
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 8006282:	fb0a f303 	mul.w	r3, sl, r3
  hValfa = ( int16_t ) ( wAux >> 16 );
 8006286:	141b      	asrs	r3, r3, #16
 8006288:	9302      	str	r3, [sp, #8]
  hIalfa_err = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 800628a:	fa49 f302 	asr.w	r3, r9, r2
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800628e:	1b59      	subs	r1, r3, r5
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8006290:	9d03      	ldr	r5, [sp, #12]
  pHandle->hBemf_beta_est = hAux_Beta;
 8006292:	f8a4 0072 	strh.w	r0, [r4, #114]	; 0x72
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
 8006296:	fa48 f202 	asr.w	r2, r8, r2
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.beta;
 800629a:	fb0a fe0e 	mul.w	lr, sl, lr
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800629e:	eba2 0a05 	sub.w	sl, r2, r5
  wAux = ( int32_t )  ( pHandle->hC1 ) * hAux;
 80062a2:	fb12 f20b 	smulbb	r2, r2, fp
  wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 80062a6:	eba8 0202 	sub.w	r2, r8, r2
  wAux = ( int32_t ) ( pHandle->hC1 ) * hAux;
 80062aa:	fb13 f30b 	smulbb	r3, r3, fp
  wAux = ( int32_t ) ( pHandle->hC2 ) * hIalfa_err;
 80062ae:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
  wIalfa_est_Next += wAux;
 80062b2:	9d02      	ldr	r5, [sp, #8]
  wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 80062b4:	eba9 0303 	sub.w	r3, r9, r3
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80062b8:	b209      	sxth	r1, r1
  wAux = ( int32_t ) ( pHandle->hC5 ) * hValfa;
 80062ba:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	; 0x28
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80062be:	fa0f fa8a 	sxth.w	sl, sl
  wIalfa_est_Next += wAux;
 80062c2:	fb08 3301 	mla	r3, r8, r1, r3
  hVbeta = ( int16_t ) ( wAux >> 16 );
 80062c6:	ea4f 4e2e 	mov.w	lr, lr, asr #16
  wIbeta_est_Next += wAux;
 80062ca:	fb08 280a 	mla	r8, r8, sl, r2
  wIbeta_est_Next += wAux;
 80062ce:	fb09 880e 	mla	r8, r9, lr, r8
  wAux = ( int32_t )( pHandle->hC4 ) * hIalfa_err;
 80062d2:	f9b4 e026 	ldrsh.w	lr, [r4, #38]	; 0x26
  wAux = ( int32_t ) hAux_Beta >> pHandle->F3POW2;
 80062d6:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 80062d8:	fb01 710e 	mla	r1, r1, lr, r7
  wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 80062dc:	fb0e 6e0a 	mla	lr, lr, sl, r6
  wAux = ( int32_t )  ( pHandle->hC3 ) * hAux_Alfa;
 80062e0:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
  wIalfa_est_Next += wAux;
 80062e4:	fb09 3305 	mla	r3, r9, r5, r3
  wAux = wAux * pHandle->hC6;
 80062e8:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	; 0x2a
  wIalfa_est_Next -= wAux;
 80062ec:	fb06 371c 	mls	r7, r6, ip, r3
  wIbeta_est_Next -= wAux;
 80062f0:	fb06 8610 	mls	r6, r6, r0, r8
  wAux = ( int32_t ) hAux_Alfa >> pHandle->F3POW2;
 80062f4:	fa4c fc02 	asr.w	ip, ip, r2
  wAux = ( int32_t ) hAux_Beta >> pHandle->F3POW2;
 80062f8:	4110      	asrs	r0, r2
  wAux = pHandle->_Super.hElSpeedDpp * wAux;
 80062fa:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  wAux = wAux * pHandle->hC6;
 80062fe:	fb0c f309 	mul.w	r3, ip, r9
  wBemf_beta_est_Next -= wAux;
 8006302:	fb03 e812 	mls	r8, r3, r2, lr

  if (pHandle->hForcedDirection ==0)
 8006306:	f994 3124 	ldrsb.w	r3, [r4, #292]	; 0x124
  wAux = wAux * pHandle->hC6;
 800630a:	fb00 f009 	mul.w	r0, r0, r9
  wBemf_alfa_est_Next += wAux;
 800630e:	fb00 1902 	mla	r9, r0, r2, r1
  if (pHandle->hForcedDirection ==0)
 8006312:	2b00      	cmp	r3, #0
 8006314:	d151      	bne.n	80063ba <STO_PLL_CalcElAngle+0x1c2>
  {
    /* we are in auxiliary mode, then rely on the speed detected */
    if(pHandle->_Super.hElSpeedDpp >= 0)
 8006316:	2a00      	cmp	r2, #0
 8006318:	f64f 7aff 	movw	sl, #65535	; 0xffff
 800631c:	bfa8      	it	ge
 800631e:	f04f 0a01 	movge.w	sl, #1
  int32_t wAlfa_Sin_tmp, wBeta_Cos_tmp;
  int16_t hOutput;
  Trig_Components Local_Components;
  int16_t hAux1, hAux2;

  Local_Components = MCM_Trig_Functions( pHandle->_Super.hElAngle );
 8006322:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8006326:	f7fa fd17 	bl	8000d58 <MCM_Trig_Functions>
  hAux_Beta = ( int16_t )( hAux_Beta * wDirection  );
 800632a:	9b01      	ldr	r3, [sp, #4]
 800632c:	fb13 f50a 	smulbb	r5, r3, sl
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 8006330:	9b00      	ldr	r3, [sp, #0]
  hRotor_Speed = STO_ExecutePLL( pHandle, hAux_Alfa, -hAux_Beta );
 8006332:	426d      	negs	r5, r5
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 8006334:	fb13 f30a 	smulbb	r3, r3, sl

  /* Alfa & Beta BEMF multiplied by Cos & Sin*/
  wAlfa_Sin_tmp = ( int32_t )( hBemf_alfa_est ) * ( int32_t )Local_Components.hSin;
  wBeta_Cos_tmp = ( int32_t )( hBemf_beta_est ) * ( int32_t )Local_Components.hCos;
 8006338:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ( int32_t )( hBemf_alfa_est ) * ( int32_t )Local_Components.hSin;
 800633c:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = ( int16_t )( wAlfa_Sin_tmp >> 15 );
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller( & pHandle->PIRegulator, ( int32_t )( hAux1 ) - hAux2 );
 8006340:	f345 35cf 	sbfx	r5, r5, #15, #16
 8006344:	f340 31cf 	sbfx	r1, r0, #15, #16
 8006348:	1a69      	subs	r1, r5, r1
 800634a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800634e:	f7fe fc57 	bl	8004c00 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8006352:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
  if ( bBuffer_index == pHandle->SpeedBufferSizeUnit )
 8006356:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
  pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 800635a:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 800635c:	3301      	adds	r3, #1
 800635e:	b2db      	uxtb	r3, r3
  if ( bBuffer_index == pHandle->SpeedBufferSizeUnit )
 8006360:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8006362:	bf12      	itee	ne
 8006364:	461a      	movne	r2, r3
 8006366:	2200      	moveq	r2, #0
    bBuffer_index = 0u;
 8006368:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800636a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800636e:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 8006372:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 8006376:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 800637a:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
  pHandle->_Super.hElAngle += hRotor_Speed;
 800637e:	88a3      	ldrh	r3, [r4, #4]
  pHandle->Ialfa_est = wIalfa_est_Next;
 8006380:	6627      	str	r7, [r4, #96]	; 0x60
  pHandle->_Super.hElAngle += hRotor_Speed;
 8006382:	4418      	add	r0, r3
 8006384:	b200      	sxth	r0, r0
  pHandle->Ibeta_est = wIbeta_est_Next;
 8006386:	e9c4 6919 	strd	r6, r9, [r4, #100]	; 0x64
  pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 800638a:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
  pHandle->_Super.hElAngle += hRotor_Speed;
 800638e:	80a0      	strh	r0, [r4, #4]
}
 8006390:	b007      	add	sp, #28
 8006392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pHandle->Ibeta_est = -INT16_MAX * ( int32_t )( pHandle->hF1 );
 8006396:	6663      	str	r3, [r4, #100]	; 0x64
 8006398:	4698      	mov	r8, r3
 800639a:	e762      	b.n	8006262 <STO_PLL_CalcElAngle+0x6a>
    pHandle->wBemf_beta_est = -INT16_MAX * ( int32_t )( pHandle->hF2 );
 800639c:	66e3      	str	r3, [r4, #108]	; 0x6c
 800639e:	461e      	mov	r6, r3
 80063a0:	e747      	b.n	8006232 <STO_PLL_CalcElAngle+0x3a>
  else if ( pHandle->wBemf_alfa_est <= -INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 80063a2:	425a      	negs	r2, r3
 80063a4:	4297      	cmp	r7, r2
    pHandle->wBemf_alfa_est = -INT16_MAX * ( int32_t )( pHandle->hF2 );
 80063a6:	bfdc      	itt	le
 80063a8:	6682      	strle	r2, [r0, #104]	; 0x68
 80063aa:	4617      	movle	r7, r2
 80063ac:	e732      	b.n	8006214 <STO_PLL_CalcElAngle+0x1c>
  else if ( pHandle->Ialfa_est <= -INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 80063ae:	425a      	negs	r2, r3
 80063b0:	4591      	cmp	r9, r2
    pHandle->Ialfa_est = -INT16_MAX * ( int32_t )( pHandle->hF1 );
 80063b2:	bfdc      	itt	le
 80063b4:	6622      	strle	r2, [r4, #96]	; 0x60
 80063b6:	4691      	movle	r9, r2
 80063b8:	e74a      	b.n	8006250 <STO_PLL_CalcElAngle+0x58>
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 80063ba:	fa1f fa83 	uxth.w	sl, r3
 80063be:	e7b0      	b.n	8006322 <STO_PLL_CalcElAngle+0x12a>

080063c0 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 80063c0:	b570      	push	{r4, r5, r6, lr}
  uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 80063c2:	f890 510e 	ldrb.w	r5, [r0, #270]	; 0x10e
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80063c6:	2d00      	cmp	r5, #0
 80063c8:	f000 8099 	beq.w	80064fe <STO_PLL_CalcAvrgMecSpeedUnit+0x13e>
 80063cc:	1e6b      	subs	r3, r5, #1
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	f100 0472 	add.w	r4, r0, #114	; 0x72
 80063d4:	f100 0c74 	add.w	ip, r0, #116	; 0x74
 80063d8:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
  int32_t wAvrSpeed_dpp = ( int32_t )0;
 80063dc:	2200      	movs	r2, #0
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80063de:	4623      	mov	r3, r4
    wAvrSpeed_dpp += ( int32_t )( pHandle->Speed_Buffer[i] );
 80063e0:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80063e4:	459c      	cmp	ip, r3
    wAvrSpeed_dpp += ( int32_t )( pHandle->Speed_Buffer[i] );
 80063e6:	4472      	add	r2, lr
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80063e8:	d1fa      	bne.n	80063e0 <STO_PLL_CalcAvrgMecSpeedUnit+0x20>
  wAvrSpeed_dpp = wAvrSpeed_dpp / ( int16_t )bSpeedBufferSizeUnit;
 80063ea:	fb92 fef5 	sdiv	lr, r2, r5
 80063ee:	2200      	movs	r2, #0
    wError = ( int32_t )( pHandle->Speed_Buffer[i] ) - wAvrSpeed_dpp;
 80063f0:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 80063f4:	eba3 030e 	sub.w	r3, r3, lr
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80063f8:	45a4      	cmp	ip, r4
    wAvrQuadraticError += wError;
 80063fa:	fb03 2203 	mla	r2, r3, r3, r2
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80063fe:	d1f7      	bne.n	80063f0 <STO_PLL_CalcAvrgMecSpeedUnit+0x30>
  wAvrQuadraticError = wAvrQuadraticError / ( int16_t )bSpeedBufferSizeUnit;
 8006400:	fbb2 f2f5 	udiv	r2, r2, r5
  wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 8006404:	fb0e f40e 	mul.w	r4, lr, lr
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 8006408:	f8b0 3110 	ldrh.w	r3, [r0, #272]	; 0x110
  wAux = wAvrSpeed_dpp * ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 800640c:	8b45      	ldrh	r5, [r0, #26]
  if ( pHandle->EnableDualCheck == true ) /*do algorithm if it's enabled*/
 800640e:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 8006412:	fb04 f303 	mul.w	r3, r4, r3
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 8006416:	ebb2 1fe3 	cmp.w	r2, r3, asr #7
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 800641a:	ea4f 14e3 	mov.w	r4, r3, asr #7
  wAux = wAux * ( int32_t ) ( pHandle->_Super.SpeedUnit );
 800641e:	7883      	ldrb	r3, [r0, #2]
  wAux = wAvrSpeed_dpp * ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 8006420:	fb0e f505 	mul.w	r5, lr, r5
  wAux = wAux * ( int32_t ) ( pHandle->_Super.SpeedUnit );
 8006424:	fb05 f303 	mul.w	r3, r5, r3
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 8006428:	bfb8      	it	lt
 800642a:	f04f 0c01 	movlt.w	ip, #1
  wAux = wAux / ( int32_t )( pHandle->_Super.DPPConvFactor);
 800642e:	69c5      	ldr	r5, [r0, #28]
 8006430:	fb93 f3f5 	sdiv	r3, r3, r5
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 8006434:	bfa8      	it	ge
 8006436:	f04f 0c00 	movge.w	ip, #0
  wAux = wAux / ( int16_t )( pHandle->_Super.bElToMecRatio );
 800643a:	7845      	ldrb	r5, [r0, #1]
 800643c:	fb93 f3f5 	sdiv	r3, r3, r5
  *pMecSpeedUnit = ( int16_t )wAux;
 8006440:	b21d      	sxth	r5, r3
 8006442:	800d      	strh	r5, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wAux;
 8006444:	8185      	strh	r5, [r0, #12]
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 8006446:	f880 c0f5 	strb.w	ip, [r0, #245]	; 0xf5
  if ( pHandle->EnableDualCheck == true ) /*do algorithm if it's enabled*/
 800644a:	b9ae      	cbnz	r6, 8006478 <STO_PLL_CalcAvrgMecSpeedUnit+0xb8>
  if ( pHandle->IsAlgorithmConverged == false )
 800644c:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
 8006450:	b353      	cbz	r3, 80064a8 <STO_PLL_CalcAvrgMecSpeedUnit+0xe8>
    if ( ( pHandle->IsSpeedReliable == false ) || ( bIs_Bemf_Consistent == false ) )
 8006452:	4294      	cmp	r4, r2
 8006454:	dc25      	bgt.n	80064a2 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
      pHandle->ReliabilityCounter++;
 8006456:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 800645a:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
      pHandle->ReliabilityCounter++;
 800645e:	3301      	adds	r3, #1
 8006460:	b2db      	uxtb	r3, r3
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 8006462:	429a      	cmp	r2, r3
      pHandle->ReliabilityCounter++;
 8006464:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 8006468:	d81e      	bhi.n	80064a8 <STO_PLL_CalcAvrgMecSpeedUnit+0xe8>
        pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800646a:	78c2      	ldrb	r2, [r0, #3]
 800646c:	7002      	strb	r2, [r0, #0]
        pHandle->ReliabilityCounter = 0u;
 800646e:	2300      	movs	r3, #0
 8006470:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 8006474:	4618      	mov	r0, r3
 8006476:	bd70      	pop	{r4, r5, r6, pc}
    wAux = ( wAux < 0 ? ( -wAux ) : ( wAux ) ); /* wAux abs value   */
 8006478:	2b00      	cmp	r3, #0
    if ( wAux < ( int32_t )( pHandle->MaxAppPositiveMecSpeedUnit ) )
 800647a:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
    wAux = ( wAux < 0 ? ( -wAux ) : ( wAux ) ); /* wAux abs value   */
 800647e:	bfb8      	it	lt
 8006480:	425b      	neglt	r3, r3
    if ( wAux < ( int32_t )( pHandle->MaxAppPositiveMecSpeedUnit ) )
 8006482:	429d      	cmp	r5, r3
 8006484:	dc14      	bgt.n	80064b0 <STO_PLL_CalcAvrgMecSpeedUnit+0xf0>
  bool bIs_Bemf_Consistent = false;
 8006486:	2500      	movs	r5, #0
  int32_t wObsBemfSq = 0, wEstBemfSq = 0;
 8006488:	462b      	mov	r3, r5
 800648a:	462e      	mov	r6, r5
    pHandle->Est_Bemf_Level = wEstBemfSq;
 800648c:	e9c0 633f 	strd	r6, r3, [r0, #252]	; 0xfc
  if ( pHandle->IsAlgorithmConverged == false )
 8006490:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 8006494:	f880 50f9 	strb.w	r5, [r0, #249]	; 0xf9
  if ( pHandle->IsAlgorithmConverged == false )
 8006498:	b133      	cbz	r3, 80064a8 <STO_PLL_CalcAvrgMecSpeedUnit+0xe8>
    if ( ( pHandle->IsSpeedReliable == false ) || ( bIs_Bemf_Consistent == false ) )
 800649a:	4294      	cmp	r4, r2
 800649c:	dddb      	ble.n	8006456 <STO_PLL_CalcAvrgMecSpeedUnit+0x96>
 800649e:	2d00      	cmp	r5, #0
 80064a0:	d0d9      	beq.n	8006456 <STO_PLL_CalcAvrgMecSpeedUnit+0x96>
      pHandle->ReliabilityCounter = 0u;
 80064a2:	2300      	movs	r3, #0
 80064a4:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 80064a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      bAux = SPD_IsMecSpeedReliable ( &pHandle->_Super, pMecSpeedUnit );
 80064ac:	f7ff bce6 	b.w	8005e7c <SPD_IsMecSpeedReliable>
      wObsBemf = ( int32_t )( pHandle->hBemf_alfa_est );
 80064b0:	f9b0 5070 	ldrsh.w	r5, [r0, #112]	; 0x70
      wObsBemf = ( int32_t )( pHandle->hBemf_beta_est );
 80064b4:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
      wObsBemfSq = wObsBemf * wObsBemf;
 80064b8:	fb05 fc05 	mul.w	ip, r5, r5
      wEstBemfSq = ( wEstBemf * ( int32_t )( pHandle->BemfConsistencyGain ) ) / 64;
 80064bc:	f890 5119 	ldrb.w	r5, [r0, #281]	; 0x119
      wObsBemfSq += wObsBemf * wObsBemf;
 80064c0:	fb06 c606 	mla	r6, r6, r6, ip
      wEstBemf = ( wAux * 32767 ) / ( int16_t )( pHandle->_Super.hMaxReliableMecSpeedUnit );
 80064c4:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 80064c8:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 80064cc:	fb93 f3fc 	sdiv	r3, r3, ip
      wEstBemfSq = ( wEstBemf * ( int32_t )( pHandle->BemfConsistencyGain ) ) / 64;
 80064d0:	fb03 f505 	mul.w	r5, r3, r5
 80064d4:	2d00      	cmp	r5, #0
 80064d6:	bfb8      	it	lt
 80064d8:	353f      	addlt	r5, #63	; 0x3f
 80064da:	11ad      	asrs	r5, r5, #6
      wEstBemfSq *= wEstBemf;
 80064dc:	fb05 f303 	mul.w	r3, r5, r3
                     ( wEstBemfSq / 64 ) * ( int32_t )( pHandle->BemfConsistencyCheck );
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	461d      	mov	r5, r3
 80064e4:	f890 c118 	ldrb.w	ip, [r0, #280]	; 0x118
 80064e8:	bfb8      	it	lt
 80064ea:	f103 053f 	addlt.w	r5, r3, #63	; 0x3f
 80064ee:	11ad      	asrs	r5, r5, #6
      wEstBemfSqLo = wEstBemfSq -
 80064f0:	fb0c 3515 	mls	r5, ip, r5, r3
      if ( wObsBemfSq > wEstBemfSqLo )
 80064f4:	42ae      	cmp	r6, r5
 80064f6:	bfd4      	ite	le
 80064f8:	2500      	movle	r5, #0
 80064fa:	2501      	movgt	r5, #1
 80064fc:	e7c6      	b.n	800648c <STO_PLL_CalcAvrgMecSpeedUnit+0xcc>
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80064fe:	462a      	mov	r2, r5
 8006500:	462c      	mov	r4, r5
  wAvrSpeed_dpp = wAvrSpeed_dpp / ( int16_t )bSpeedBufferSizeUnit;
 8006502:	46ae      	mov	lr, r5
 8006504:	e780      	b.n	8006408 <STO_PLL_CalcAvrgMecSpeedUnit+0x48>
 8006506:	bf00      	nop

08006508 <STO_PLL_CalcAvrgElSpeedDpp>:
  int16_t hSpeedBufferSizeUnit = ( int16_t )( pHandle->SpeedBufferSizeUnit );
 8006508:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
  hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800650c:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
  int16_t hIndexNew = ( int16_t )pHandle->Speed_Buffer_Index;
 8006510:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
  hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8006514:	1acb      	subs	r3, r1, r3
 8006516:	b29b      	uxth	r3, r3
{
 8006518:	b510      	push	{r4, lr}
  int32_t wSum = pHandle->DppBufferSum;
 800651a:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
  if ( hBufferSizeDiff == 0 )
 800651e:	b973      	cbnz	r3, 800653e <STO_PLL_CalcAvrgElSpeedDpp+0x36>
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8006520:	eb00 0242 	add.w	r2, r0, r2, lsl #1
           pHandle->SpeedBufferOldestEl;
 8006524:	f9b0 110c 	ldrsh.w	r1, [r0, #268]	; 0x10c
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8006528:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 800652c:	4423      	add	r3, r4
 800652e:	1a5b      	subs	r3, r3, r1
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8006530:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
  pHandle->DppBufferSum = wSum;
 8006534:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8006538:	4113      	asrs	r3, r2
  pHandle->_Super.hElSpeedDpp = ( int16_t )wAvrSpeed_dpp;
 800653a:	81c3      	strh	r3, [r0, #14]
}
 800653c:	bd10      	pop	{r4, pc}
    hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800653e:	4413      	add	r3, r2
 8006540:	fa0f fc83 	sxth.w	ip, r3
    if ( hIndexOldTemp >= hSpeedBufferSizeUnit )
 8006544:	4561      	cmp	r1, ip
    hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8006546:	b29b      	uxth	r3, r3
    if ( hIndexOldTemp >= hSpeedBufferSizeUnit )
 8006548:	dc05      	bgt.n	8006556 <STO_PLL_CalcAvrgElSpeedDpp+0x4e>
 800654a:	fa1f fe81 	uxth.w	lr, r1
      hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 800654e:	eba3 030e 	sub.w	r3, r3, lr
 8006552:	fa0f fc83 	sxth.w	ip, r3
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8006556:	eb00 0242 	add.w	r2, r0, r2, lsl #1
           pHandle->Speed_Buffer[hIndexOld];
 800655a:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 800655e:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
           pHandle->Speed_Buffer[hIndexOld];
 8006562:	f9bc 2074 	ldrsh.w	r2, [ip, #116]	; 0x74
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8006566:	4423      	add	r3, r4
 8006568:	1a9b      	subs	r3, r3, r2
 800656a:	e7e1      	b.n	8006530 <STO_PLL_CalcAvrgElSpeedDpp+0x28>

0800656c <STO_PLL_Clear>:
{
 800656c:	b510      	push	{r4, lr}
  * @retval none
  */
static void STO_InitSpeedBuffer( STO_PLL_Handle_t * pHandle )
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 800656e:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
  pHandle->Ialfa_est = ( int32_t )0;
 8006572:	2100      	movs	r1, #0
  pHandle->Ibeta_est = ( int32_t )0;
 8006574:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
  pHandle->wBemf_beta_est = ( int32_t )0;
 8006578:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
  pHandle->Est_Bemf_Level = ( int32_t )0;
 800657c:	e9c0 113f 	strd	r1, r1, [r0, #252]	; 0xfc
{
 8006580:	4604      	mov	r4, r0
  pHandle->_Super.hElAngle = ( int16_t )0;
 8006582:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hElSpeedDpp = ( int16_t )0;
 8006584:	81c1      	strh	r1, [r0, #14]
  pHandle->ConsistencyCounter = 0u;
 8006586:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
  pHandle->IsAlgorithmConverged = false;
 800658a:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
  pHandle->DppBufferSum = ( int32_t )0;
 800658e:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
  pHandle->ForceConvergency = false;
 8006592:	f8a0 1122 	strh.w	r1, [r0, #290]	; 0x122

  /*init speed buffer*/
  for ( b_i = 0u; b_i < bSpeedBufferSize; b_i++ )
 8006596:	b11a      	cbz	r2, 80065a0 <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = ( int16_t )0;
 8006598:	0052      	lsls	r2, r2, #1
 800659a:	3074      	adds	r0, #116	; 0x74
 800659c:	f000 fb22 	bl	8006be4 <memset>
  }
  pHandle->Speed_Buffer_Index = 0u;
 80065a0:	2100      	movs	r1, #0
 80065a2:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
  pHandle->SpeedBufferOldestEl = ( int16_t )0;
 80065a6:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
  PID_SetIntegralTerm( & pHandle->PIRegulator, ( int32_t )0 );
 80065aa:	f104 0034 	add.w	r0, r4, #52	; 0x34
}
 80065ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  PID_SetIntegralTerm( & pHandle->PIRegulator, ( int32_t )0 );
 80065b2:	f7fe bb19 	b.w	8004be8 <PID_SetIntegralTerm>
 80065b6:	bf00      	nop

080065b8 <STO_PLL_Init>:
{
 80065b8:	b510      	push	{r4, lr}
  pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 80065ba:	f890 1116 	ldrb.w	r1, [r0, #278]	; 0x116
  htempk = ( int16_t )( C6_COMP_CONST1 / ( pHandle->hF2 ) );
 80065be:	4b19      	ldr	r3, [pc, #100]	; (8006624 <STO_PLL_Init+0x6c>)
 80065c0:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	; 0x2e
  pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 80065c4:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
  pHandle->EnableDualCheck = true;
 80065c8:	2201      	movs	r2, #1
  pHandle->F3POW2 = 0u;
 80065ca:	2100      	movs	r1, #0
  htempk = ( int16_t )( C6_COMP_CONST1 / ( pHandle->hF2 ) );
 80065cc:	fb93 f3fe 	sdiv	r3, r3, lr
 80065d0:	b21b      	sxth	r3, r3
{
 80065d2:	4604      	mov	r4, r0
  pHandle->EnableDualCheck = true;
 80065d4:	f880 2104 	strb.w	r2, [r0, #260]	; 0x104
  pHandle->F3POW2 = 0u;
 80065d8:	8641      	strh	r1, [r0, #50]	; 0x32
  while ( htempk != 0 )
 80065da:	b30b      	cbz	r3, 8006620 <STO_PLL_Init+0x68>
  wAux = ( int32_t )1;
 80065dc:	4611      	mov	r1, r2
    htempk /= ( int16_t )2;
 80065de:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  while ( htempk != 0 )
 80065e2:	f102 0c01 	add.w	ip, r2, #1
 80065e6:	105b      	asrs	r3, r3, #1
 80065e8:	4610      	mov	r0, r2
    wAux *= ( int32_t )2;
 80065ea:	ea4f 0141 	mov.w	r1, r1, lsl #1
  while ( htempk != 0 )
 80065ee:	fa1f f28c 	uxth.w	r2, ip
 80065f2:	d1f4      	bne.n	80065de <STO_PLL_Init+0x26>
  pHandle->hF3 = ( int16_t )wAux;
 80065f4:	b20a      	sxth	r2, r1
 80065f6:	8660      	strh	r0, [r4, #50]	; 0x32
  wAux = ( int32_t )( pHandle->hF2 ) * pHandle->hF3;
 80065f8:	fb0e f102 	mul.w	r1, lr, r2
  pHandle->hC6 = ( int16_t )( wAux / C6_COMP_CONST2 );
 80065fc:	480a      	ldr	r0, [pc, #40]	; (8006628 <STO_PLL_Init+0x70>)
  pHandle->hF3 = ( int16_t )wAux;
 80065fe:	8622      	strh	r2, [r4, #48]	; 0x30
  pHandle->hC6 = ( int16_t )( wAux / C6_COMP_CONST2 );
 8006600:	17cb      	asrs	r3, r1, #31
 8006602:	fb80 0101 	smull	r0, r1, r0, r1
 8006606:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 800660a:	8563      	strh	r3, [r4, #42]	; 0x2a
  STO_PLL_Clear( pHandle );
 800660c:	4620      	mov	r0, r4
 800660e:	f7ff ffad 	bl	800656c <STO_PLL_Clear>
  PID_HandleInit( & pHandle->PIRegulator );
 8006612:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8006616:	f7fe fad3 	bl	8004bc0 <PID_HandleInit>
  pHandle->_Super.hMecAccelUnitP = 0;
 800661a:	2300      	movs	r3, #0
 800661c:	8263      	strh	r3, [r4, #18]
}
 800661e:	bd10      	pop	{r4, pc}
 8006620:	4671      	mov	r1, lr
 8006622:	e7eb      	b.n	80065fc <STO_PLL_Init+0x44>
 8006624:	000fea5e 	.word	0x000fea5e
 8006628:	06488dc5 	.word	0x06488dc5

0800662c <STO_PLL_IsObserverConverged>:
  int16_t hEstimatedSpeedUnit, hUpperThreshold, hLowerThreshold;
  int32_t wAux;
  bool bAux = false;
  int32_t wtemp;
  
  if ( pHandle->ForceConvergency2 == true )
 800662c:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
{
 8006630:	4603      	mov	r3, r0
  if ( pHandle->ForceConvergency2 == true )
 8006632:	b10a      	cbz	r2, 8006638 <STO_PLL_IsObserverConverged+0xc>
  {
    hForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8006634:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  }

  if ( pHandle->ForceConvergency == true )
 8006638:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 800663c:	b128      	cbz	r0, 800664a <STO_PLL_IsObserverConverged+0x1e>
  {
    bAux = true;
    pHandle->IsAlgorithmConverged = true;
 800663e:	2001      	movs	r0, #1
    pHandle->_Super.bSpeedErrorNumber = 0u;
 8006640:	2200      	movs	r2, #0
    pHandle->IsAlgorithmConverged = true;
 8006642:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
    pHandle->_Super.bSpeedErrorNumber = 0u;
 8006646:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ( bAux );
}
 8006648:	4770      	bx	lr
    hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800664a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
    wtemp = ( int32_t )hEstimatedSpeedUnit * ( int32_t )hForcedMecSpeedUnit;
 800664e:	fb02 fc01 	mul.w	ip, r2, r1
    if ( wtemp > 0 )
 8006652:	f1bc 0f00 	cmp.w	ip, #0
{
 8006656:	b530      	push	{r4, r5, lr}
    wtemp = ( int32_t )hEstimatedSpeedUnit * ( int32_t )hForcedMecSpeedUnit;
 8006658:	468e      	mov	lr, r1
    if ( wtemp > 0 )
 800665a:	dd37      	ble.n	80066cc <STO_PLL_IsObserverConverged+0xa0>
      if ( hEstimatedSpeedUnit < 0 )
 800665c:	2a00      	cmp	r2, #0
        hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 800665e:	bfbc      	itt	lt
 8006660:	4252      	neglt	r2, r2
 8006662:	b212      	sxthlt	r2, r2
      if ( pHandle->IsSpeedReliable == true )
 8006664:	f893 40f5 	ldrb.w	r4, [r3, #245]	; 0xf5
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 8006668:	f893 c112 	ldrb.w	ip, [r3, #274]	; 0x112
      if ( hForcedMecSpeedUnit < 0 )
 800666c:	2900      	cmp	r1, #0
        hForcedMecSpeedUnit = -hForcedMecSpeedUnit;
 800666e:	bfbc      	itt	lt
 8006670:	4249      	neglt	r1, r1
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 8006672:	fa0f fe81 	sxthlt.w	lr, r1
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_L;
 8006676:	f893 1113 	ldrb.w	r1, [r3, #275]	; 0x113
      if ( pHandle->IsSpeedReliable == true )
 800667a:	b344      	cbz	r4, 80066ce <STO_PLL_IsObserverConverged+0xa2>
        if ( ( uint16_t )hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed )
 800667c:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 8006680:	b294      	uxth	r4, r2
 8006682:	42a5      	cmp	r5, r4
 8006684:	d223      	bcs.n	80066ce <STO_PLL_IsObserverConverged+0xa2>
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_L;
 8006686:	fb0e f101 	mul.w	r1, lr, r1
      hLowerThreshold = ( int16_t )( wAux / ( int32_t )16 );
 800668a:	2900      	cmp	r1, #0
 800668c:	bfb8      	it	lt
 800668e:	310f      	addlt	r1, #15
          if ( hEstimatedSpeedUnit >= hLowerThreshold )
 8006690:	f341 110f 	sbfx	r1, r1, #4, #16
 8006694:	428a      	cmp	r2, r1
 8006696:	db1a      	blt.n	80066ce <STO_PLL_IsObserverConverged+0xa2>
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 8006698:	fb0e fc0c 	mul.w	ip, lr, ip
      hUpperThreshold = ( int16_t )( wAux / ( int32_t )16 );
 800669c:	f1bc 0f00 	cmp.w	ip, #0
 80066a0:	bfb8      	it	lt
 80066a2:	f10c 0c0f 	addlt.w	ip, ip, #15
            if ( hEstimatedSpeedUnit <= hUpperThreshold )
 80066a6:	f34c 1c0f 	sbfx	ip, ip, #4, #16
 80066aa:	4562      	cmp	r2, ip
 80066ac:	dc0f      	bgt.n	80066ce <STO_PLL_IsObserverConverged+0xa2>
              pHandle->ConsistencyCounter++;
 80066ae:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
              if ( pHandle->ConsistencyCounter >=
 80066b2:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
              pHandle->ConsistencyCounter++;
 80066b6:	3201      	adds	r2, #1
 80066b8:	b2d2      	uxtb	r2, r2
              if ( pHandle->ConsistencyCounter >=
 80066ba:	4291      	cmp	r1, r2
              pHandle->ConsistencyCounter++;
 80066bc:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
              if ( pHandle->ConsistencyCounter >=
 80066c0:	d804      	bhi.n	80066cc <STO_PLL_IsObserverConverged+0xa0>
    pHandle->IsAlgorithmConverged = true;
 80066c2:	2001      	movs	r0, #1
    pHandle->_Super.bSpeedErrorNumber = 0u;
 80066c4:	2200      	movs	r2, #0
    pHandle->IsAlgorithmConverged = true;
 80066c6:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
    pHandle->_Super.bSpeedErrorNumber = 0u;
 80066ca:	701a      	strb	r2, [r3, #0]
}
 80066cc:	bd30      	pop	{r4, r5, pc}
              pHandle->ConsistencyCounter = 0u;
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
}
 80066d4:	bd30      	pop	{r4, r5, pc}
 80066d6:	bf00      	nop

080066d8 <STO_PLL_GetEstimatedBemf>:
__weak alphabeta_t STO_PLL_GetEstimatedBemf( STO_PLL_Handle_t * pHandle )
{
  alphabeta_t Vaux;
  Vaux.alpha = pHandle->hBemf_alfa_est;
  Vaux.beta = pHandle->hBemf_beta_est;
  return ( Vaux );
 80066d8:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80066da:	2200      	movs	r2, #0
 80066dc:	b299      	uxth	r1, r3
 80066de:	f361 020f 	bfi	r2, r1, #0, #16
 80066e2:	0c1b      	lsrs	r3, r3, #16
 80066e4:	f363 421f 	bfi	r2, r3, #16, #16
{
 80066e8:	b082      	sub	sp, #8
}
 80066ea:	4610      	mov	r0, r2
 80066ec:	b002      	add	sp, #8
 80066ee:	4770      	bx	lr

080066f0 <STO_PLL_GetEstimatedCurrent>:
#endif

#ifdef FULL_MISRA_C_COMPLIANCY
  Iaux.beta = ( int16_t )( pHandle->Ibeta_est / ( pHandle->hF1 ) );
#else
  Iaux.beta = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
 80066f0:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
  Iaux.alpha = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 80066f4:	f8b0 c11c 	ldrh.w	ip, [r0, #284]	; 0x11c
 80066f8:	fa42 f20c 	asr.w	r2, r2, ip
#endif

  return ( Iaux );
 80066fc:	fa43 f30c 	asr.w	r3, r3, ip
 8006700:	b292      	uxth	r2, r2
 8006702:	2100      	movs	r1, #0
 8006704:	f362 010f 	bfi	r1, r2, #0, #16
 8006708:	b29b      	uxth	r3, r3
 800670a:	f363 411f 	bfi	r1, r3, #16, #16
{
 800670e:	b082      	sub	sp, #8
}
 8006710:	4608      	mov	r0, r1
 8006712:	b002      	add	sp, #8
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop

08006718 <STO_PLL_GetObserverGains>:
  * @param  phC4 pointer to int16_t used to return parameters hhC4
  * @retval none
  */
__weak void STO_PLL_GetObserverGains( STO_PLL_Handle_t * pHandle, int16_t * phC2, int16_t * phC4 )
{
  *phC2 = pHandle->hC2;
 8006718:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800671c:	800b      	strh	r3, [r1, #0]
  *phC4 = pHandle->hC4;
 800671e:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 8006722:	8013      	strh	r3, [r2, #0]
}
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop

08006728 <STO_PLL_SetObserverGains>:
  * @retval none
  */
__weak void STO_PLL_SetObserverGains( STO_PLL_Handle_t * pHandle, int16_t hhC1, int16_t hhC2 )
{

  pHandle->hC2 = hhC1;
 8006728:	8441      	strh	r1, [r0, #34]	; 0x22
  pHandle->hC4 = hhC2;
 800672a:	84c2      	strh	r2, [r0, #38]	; 0x26
}
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop

08006730 <STO_GetPLLGains>:
  * @param  pPgain pointer to int16_t used to return PLL proportional gain
  * @param  pIgain pointer to int16_t used to return PLL integral gain
  * @retval none
  */
__weak void STO_GetPLLGains( STO_PLL_Handle_t * pHandle, int16_t * pPgain, int16_t * pIgain )
{
 8006730:	b570      	push	{r4, r5, r6, lr}

  *pPgain = PID_GetKP( & pHandle->PIRegulator );
 8006732:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8006736:	4620      	mov	r0, r4
{
 8006738:	460e      	mov	r6, r1
 800673a:	4615      	mov	r5, r2
  *pPgain = PID_GetKP( & pHandle->PIRegulator );
 800673c:	f7fe fa4c 	bl	8004bd8 <PID_GetKP>
 8006740:	8030      	strh	r0, [r6, #0]
  *pIgain = PID_GetKI( & pHandle->PIRegulator );
 8006742:	4620      	mov	r0, r4
 8006744:	f7fe fa4c 	bl	8004be0 <PID_GetKI>
 8006748:	8028      	strh	r0, [r5, #0]
}
 800674a:	bd70      	pop	{r4, r5, r6, pc}

0800674c <STO_SetPLLGains>:
  * @param  hPgain new value for PLL proportional gain
  * @param  hIgain new value for PLL integral gain
  * @retval none
  */
__weak void STO_SetPLLGains( STO_PLL_Handle_t * pHandle, int16_t hPgain, int16_t hIgain )
{
 800674c:	b510      	push	{r4, lr}
 800674e:	b082      	sub	sp, #8
  PID_SetKP( & pHandle->PIRegulator, hPgain );
 8006750:	3034      	adds	r0, #52	; 0x34
{
 8006752:	4614      	mov	r4, r2
  PID_SetKP( & pHandle->PIRegulator, hPgain );
 8006754:	9001      	str	r0, [sp, #4]
 8006756:	f7fe fa3b 	bl	8004bd0 <PID_SetKP>
  PID_SetKI( & pHandle->PIRegulator, hIgain );
 800675a:	9801      	ldr	r0, [sp, #4]
 800675c:	4621      	mov	r1, r4
}
 800675e:	b002      	add	sp, #8
 8006760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  PID_SetKI( & pHandle->PIRegulator, hIgain );
 8006764:	f7fe ba36 	b.w	8004bd4 <PID_SetKI>

08006768 <STO_OTF_ResetPLL>:
  * @retval none
  */
__weak void STO_OTF_ResetPLL( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  PID_SetIntegralTerm( &pHdl->PIRegulator, ( int32_t )0 );
 8006768:	6800      	ldr	r0, [r0, #0]
 800676a:	2100      	movs	r1, #0
 800676c:	3034      	adds	r0, #52	; 0x34
 800676e:	f7fe ba3b 	b.w	8004be8 <PID_SetIntegralTerm>
 8006772:	bf00      	nop

08006774 <STO_ResetPLL>:
  * @param  pHandle: handler of the current instance of the STO component
  * @retval none
  */
__weak void STO_ResetPLL( STO_PLL_Handle_t * pHandle )
{
  PID_SetIntegralTerm( &pHandle->PIRegulator, ( int32_t )0 );
 8006774:	2100      	movs	r1, #0
 8006776:	3034      	adds	r0, #52	; 0x34
 8006778:	f7fe ba36 	b.w	8004be8 <PID_SetIntegralTerm>

0800677c <STO_PLL_GetEstimatedBemfLevel>:
  * @retval int32_t
  */
__weak int32_t STO_PLL_GetEstimatedBemfLevel( STO_PLL_Handle_t * pHandle )
{
  return ( pHandle->Est_Bemf_Level );
}
 800677c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop

08006784 <STO_PLL_GetObservedBemfLevel>:
  * @retval int32_t
  */
__weak int32_t STO_PLL_GetObservedBemfLevel( STO_PLL_Handle_t * pHandle )
{
  return ( pHandle->Obs_Bemf_Level );
}
 8006784:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop

0800678c <STO_PLL_IsVarianceTight>:
  * @retval bool Variance state
  */
__weak bool STO_PLL_IsVarianceTight( const STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  return ( pHdl->IsSpeedReliable );
 800678c:	6803      	ldr	r3, [r0, #0]
}
 800678e:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 8006792:	4770      	bx	lr

08006794 <STO_PLL_ForceConvergency1>:
  * @param  pHandle: handler of the current instance of the STO component
  */
__weak void STO_PLL_ForceConvergency1( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  pHdl->ForceConvergency = true;
 8006794:	6803      	ldr	r3, [r0, #0]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
}
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop

080067a0 <STO_PLL_ForceConvergency2>:
  * @param  pHandle: handler of the current instance of the STO component
  */
__weak void STO_PLL_ForceConvergency2( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  pHdl->ForceConvergency2 = true;
 80067a0:	6803      	ldr	r3, [r0, #0]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
}
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop

080067ac <STO_SetDirection>:
  * @brief  forces the rotation direction
  * @param  direction: imposed direction
  */
__weak void STO_SetDirection( STO_PLL_Handle_t * pHandle, uint8_t direction )
{
  pHandle->hForcedDirection = direction;
 80067ac:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
}
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop

080067b4 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 80067b4:	f7fe b952 	b.w	8004a5c <FCP_Init>

080067b8 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 80067b8:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
{
 80067bc:	4603      	mov	r3, r0
  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 80067be:	b172      	cbz	r2, 80067de <UFCP_TX_IRQ_Handler+0x26>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 80067c0:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
 80067c4:	b1e2      	cbz	r2, 8006800 <UFCP_TX_IRQ_Handler+0x48>
 80067c6:	2a01      	cmp	r2, #1
 80067c8:	d022      	beq.n	8006810 <UFCP_TX_IRQ_Handler+0x58>
      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
        break;

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80067ca:	7d41      	ldrb	r1, [r0, #21]
 80067cc:	3101      	adds	r1, #1
 80067ce:	428a      	cmp	r2, r1
 80067d0:	dc06      	bgt.n	80067e0 <UFCP_TX_IRQ_Handler+0x28>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 80067d2:	1881      	adds	r1, r0, r2
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80067d4:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80067d8:	7d09      	ldrb	r1, [r1, #20]
 80067da:	6041      	str	r1, [r0, #4]

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80067dc:	e014      	b.n	8006808 <UFCP_TX_IRQ_Handler+0x50>

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 80067de:	4770      	bx	lr
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80067e0:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 80067e4:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
 80067e8:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80067ea:	68d1      	ldr	r1, [r2, #12]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 80067ec:	f04f 0c00 	mov.w	ip, #0
 80067f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80067f4:	60d1      	str	r1, [r2, #12]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 80067f6:	e9d0 0200 	ldrd	r0, r2, [r0]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 80067fa:	f883 c097 	strb.w	ip, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 80067fe:	4710      	bx	r2
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8006800:	7d01      	ldrb	r1, [r0, #20]
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8006802:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
  USARTx->DR = Value;
 8006806:	6041      	str	r1, [r0, #4]
      pBaseHandle->TxFrameLevel++;
 8006808:	3201      	adds	r2, #1
 800680a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 800680e:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8006810:	7d41      	ldrb	r1, [r0, #21]
        break;
 8006812:	e7f6      	b.n	8006802 <UFCP_TX_IRQ_Handler+0x4a>

08006814 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8006814:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8006818:	b10b      	cbz	r3, 800681e <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800681a:	2001      	movs	r0, #1
  }

  return ret_val;
}
 800681c:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800681e:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8006822:	2301      	movs	r3, #1
 8006824:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006828:	68d3      	ldr	r3, [r2, #12]
 800682a:	f043 0320 	orr.w	r3, r3, #32
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800682e:	2002      	movs	r0, #2
 8006830:	60d3      	str	r3, [r2, #12]
 8006832:	4770      	bx	lr

08006834 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8006838:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 800683c:	b108      	cbz	r0, 8006842 <UFCP_Send+0xe>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800683e:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8006840:	bd70      	pop	{r4, r5, r6, pc}
    while ( size-- ) *dest++ = *buffer++;
 8006842:	1e58      	subs	r0, r3, #1
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8006844:	f104 0616 	add.w	r6, r4, #22
    pHandle->TxFrame.Code = code;
 8006848:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 800684a:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 800684c:	b2c0      	uxtb	r0, r0
 800684e:	b343      	cbz	r3, 80068a2 <UFCP_Send+0x6e>
 8006850:	1c51      	adds	r1, r2, #1
 8006852:	1a75      	subs	r5, r6, r1
 8006854:	2d02      	cmp	r5, #2
 8006856:	d938      	bls.n	80068ca <UFCP_Send+0x96>
 8006858:	2805      	cmp	r0, #5
 800685a:	d936      	bls.n	80068ca <UFCP_Send+0x96>
 800685c:	0899      	lsrs	r1, r3, #2
 800685e:	3901      	subs	r1, #1
 8006860:	b2c9      	uxtb	r1, r1
 8006862:	1d15      	adds	r5, r2, #4
 8006864:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8006868:	46b4      	mov	ip, r6
 800686a:	4611      	mov	r1, r2
 800686c:	f851 eb04 	ldr.w	lr, [r1], #4
 8006870:	f84c eb04 	str.w	lr, [ip], #4
 8006874:	42a9      	cmp	r1, r5
 8006876:	d1f9      	bne.n	800686c <UFCP_Send+0x38>
 8006878:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 800687c:	1a40      	subs	r0, r0, r1
 800687e:	428b      	cmp	r3, r1
 8006880:	b2c0      	uxtb	r0, r0
 8006882:	eb02 0c01 	add.w	ip, r2, r1
 8006886:	eb06 0501 	add.w	r5, r6, r1
 800688a:	d00a      	beq.n	80068a2 <UFCP_Send+0x6e>
 800688c:	5c53      	ldrb	r3, [r2, r1]
 800688e:	5473      	strb	r3, [r6, r1]
 8006890:	b138      	cbz	r0, 80068a2 <UFCP_Send+0x6e>
 8006892:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8006896:	706b      	strb	r3, [r5, #1]
 8006898:	2801      	cmp	r0, #1
 800689a:	d002      	beq.n	80068a2 <UFCP_Send+0x6e>
 800689c:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80068a0:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 80068a2:	f104 0014 	add.w	r0, r4, #20
 80068a6:	f7fe f8ed 	bl	8004a84 <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 80068aa:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 80068ae:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 80068b2:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 80068b4:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 80068b6:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 80068ba:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80068be:	68d3      	ldr	r3, [r2, #12]
 80068c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c4:	2002      	movs	r0, #2
 80068c6:	60d3      	str	r3, [r2, #12]
}
 80068c8:	bd70      	pop	{r4, r5, r6, pc}
 80068ca:	f104 0015 	add.w	r0, r4, #21
 80068ce:	441a      	add	r2, r3
 80068d0:	e000      	b.n	80068d4 <UFCP_Send+0xa0>
 80068d2:	3101      	adds	r1, #1
    while ( size-- ) *dest++ = *buffer++;
 80068d4:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80068d8:	f800 3f01 	strb.w	r3, [r0, #1]!
 80068dc:	4291      	cmp	r1, r2
 80068de:	d1f8      	bne.n	80068d2 <UFCP_Send+0x9e>
 80068e0:	e7df      	b.n	80068a2 <UFCP_Send+0x6e>
 80068e2:	bf00      	nop

080068e4 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 80068e4:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 80068e8:	b90b      	cbnz	r3, 80068ee <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 80068ea:	482d      	ldr	r0, [pc, #180]	; (80069a0 <UFCP_RX_IRQ_Handler+0xbc>)
}
 80068ec:	4770      	bx	lr
{
 80068ee:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 80068f0:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 80068f4:	b083      	sub	sp, #12
 80068f6:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 80068f8:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 80068fa:	b36b      	cbz	r3, 8006958 <UFCP_RX_IRQ_Handler+0x74>
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d035      	beq.n	800696c <UFCP_RX_IRQ_Handler+0x88>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8006900:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 8006904:	3101      	adds	r1, #1
 8006906:	428b      	cmp	r3, r1
 8006908:	dc08      	bgt.n	800691c <UFCP_RX_IRQ_Handler+0x38>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800690a:	18c1      	adds	r1, r0, r3
          pBaseHandle->RxFrameLevel++;
 800690c:	3301      	adds	r3, #1
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800690e:	4824      	ldr	r0, [pc, #144]	; (80069a0 <UFCP_RX_IRQ_Handler+0xbc>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8006910:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 8006914:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8006918:	b003      	add	sp, #12
 800691a:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 800691c:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8006920:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006924:	68cb      	ldr	r3, [r1, #12]
          pBaseHandle->RxTimeoutCountdown = 0;
 8006926:	2200      	movs	r2, #0
 8006928:	f023 0320 	bic.w	r3, r3, #32
 800692c:	8242      	strh	r2, [r0, #18]
 800692e:	60cb      	str	r3, [r1, #12]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8006930:	3099      	adds	r0, #153	; 0x99
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8006932:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8006936:	f7fe f8a5 	bl	8004a84 <FCP_CalcCRC>
 800693a:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800693e:	4283      	cmp	r3, r0
 8006940:	d122      	bne.n	8006988 <UFCP_RX_IRQ_Handler+0xa4>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8006942:	6820      	ldr	r0, [r4, #0]
 8006944:	68a5      	ldr	r5, [r4, #8]
 8006946:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800694a:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 800694e:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8006952:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8006954:	4813      	ldr	r0, [pc, #76]	; (80069a4 <UFCP_RX_IRQ_Handler+0xc0>)
 8006956:	e7df      	b.n	8006918 <UFCP_RX_IRQ_Handler+0x34>
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8006958:	8a01      	ldrh	r1, [r0, #16]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 800695a:	4813      	ldr	r0, [pc, #76]	; (80069a8 <UFCP_RX_IRQ_Handler+0xc4>)
        pBaseHandle->RxFrame.Code = rx_byte;
 800695c:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 8006960:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8006962:	8261      	strh	r1, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 8006964:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8006968:	b003      	add	sp, #12
 800696a:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 800696c:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 800696e:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8006972:	d404      	bmi.n	800697e <UFCP_RX_IRQ_Handler+0x9a>
        pBaseHandle->RxFrameLevel++;
 8006974:	2302      	movs	r3, #2
 8006976:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800697a:	4809      	ldr	r0, [pc, #36]	; (80069a0 <UFCP_RX_IRQ_Handler+0xbc>)
 800697c:	e7cc      	b.n	8006918 <UFCP_RX_IRQ_Handler+0x34>
          pBaseHandle->RxFrameLevel =0 ;
 800697e:	2300      	movs	r3, #0
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006980:	4807      	ldr	r0, [pc, #28]	; (80069a0 <UFCP_RX_IRQ_Handler+0xbc>)
          pBaseHandle->RxFrameLevel =0 ;
 8006982:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
 8006986:	e7c7      	b.n	8006918 <UFCP_RX_IRQ_Handler+0x34>
            error_code = FCP_MSG_RX_BAD_CRC;
 8006988:	250a      	movs	r5, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800698a:	2301      	movs	r3, #1
 800698c:	f10d 0207 	add.w	r2, sp, #7
 8006990:	21ff      	movs	r1, #255	; 0xff
 8006992:	4620      	mov	r0, r4
            error_code = FCP_MSG_RX_BAD_CRC;
 8006994:	f88d 5007 	strb.w	r5, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006998:	f7ff ff4c 	bl	8006834 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800699c:	4801      	ldr	r0, [pc, #4]	; (80069a4 <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 800699e:	e7bb      	b.n	8006918 <UFCP_RX_IRQ_Handler+0x34>
 80069a0:	08006f20 	.word	0x08006f20
 80069a4:	08006f24 	.word	0x08006f24
 80069a8:	08006f22 	.word	0x08006f22

080069ac <UFCP_OVR_IRQ_Handler>:
{
 80069ac:	b500      	push	{lr}
 80069ae:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 80069b0:	f04f 0c08 	mov.w	ip, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80069b4:	2301      	movs	r3, #1
 80069b6:	f10d 0207 	add.w	r2, sp, #7
 80069ba:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 80069bc:	f88d c007 	strb.w	ip, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80069c0:	f7ff ff38 	bl	8006834 <UFCP_Send>
}
 80069c4:	b003      	add	sp, #12
 80069c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80069ca:	bf00      	nop

080069cc <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80069cc:	2300      	movs	r3, #0
 80069ce:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 80069d2:	4770      	bx	lr

080069d4 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 80069d4:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80069d6:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
  pHandle->_Super.bSpeedErrorNumber = 0u;
 80069d8:	7003      	strb	r3, [r0, #0]
  pHandle->wElSpeedDpp32 = 0;
 80069da:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.hElAngle = 0;
 80069de:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 80069e0:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 80069e2:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 80069e4:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 80069e6:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80069e8:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->hElAngleAccu = 0;
 80069ea:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop

080069f0 <VSS_Init>:
{
 80069f0:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 80069f2:	f7ff ffef 	bl	80069d4 <VSS_Clear>
}
 80069f6:	bd08      	pop	{r3, pc}

080069f8 <VSS_CalcElAngle>:
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 80069f8:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
{
 80069fc:	4603      	mov	r3, r0
  if ( pHandle->bCopyObserver == true )
 80069fe:	b11a      	cbz	r2, 8006a08 <VSS_CalcElAngle+0x10>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 8006a00:	f9b1 0000 	ldrsh.w	r0, [r1]
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 8006a04:	8098      	strh	r0, [r3, #4]
  return hRetAngle;
}
 8006a06:	4770      	bx	lr
{
 8006a08:	b530      	push	{r4, r5, lr}
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8006a0a:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8006a0e:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8006a10:	88dd      	ldrh	r5, [r3, #6]
    if ( pHandle->bTransitionStarted == true )
 8006a12:	f893 402c 	ldrb.w	r4, [r3, #44]	; 0x2c
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 8006a16:	785a      	ldrb	r2, [r3, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8006a18:	fb9c f2f2 	sdiv	r2, ip, r2
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8006a1c:	4460      	add	r0, ip
 8006a1e:	fa1f fe80 	uxth.w	lr, r0
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8006a22:	442a      	add	r2, r5
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8006a24:	b200      	sxth	r0, r0
 8006a26:	8618      	strh	r0, [r3, #48]	; 0x30
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8006a28:	80da      	strh	r2, [r3, #6]
    if ( pHandle->bTransitionStarted == true )
 8006a2a:	b1fc      	cbz	r4, 8006a6c <VSS_CalcElAngle+0x74>
      if ( pHandle->hTransitionRemainingSteps == 0 )
 8006a2c:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 8006a30:	b1f2      	cbz	r2, 8006a70 <VSS_CalcElAngle+0x78>
        pHandle->hTransitionRemainingSteps--;
 8006a32:	3a01      	subs	r2, #1
 8006a34:	b212      	sxth	r2, r2
 8006a36:	85da      	strh	r2, [r3, #46]	; 0x2e
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8006a38:	f1bc 0f00 	cmp.w	ip, #0
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8006a3c:	8809      	ldrh	r1, [r1, #0]
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8006a3e:	db26      	blt.n	8006a8e <VSS_CalcElAngle+0x96>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8006a40:	eba1 0e0e 	sub.w	lr, r1, lr
 8006a44:	fa0f fe8e 	sxth.w	lr, lr
 8006a48:	2501      	movs	r5, #1
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 8006a4a:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	; 0x36
        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 8006a4e:	fb0e f202 	mul.w	r2, lr, r2
        if ( hAngleDiff >= 0 )
 8006a52:	f1be 0f00 	cmp.w	lr, #0
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 8006a56:	fb92 f2f4 	sdiv	r2, r2, r4
        hAngleCorr *= hSignCorr;
 8006a5a:	fb12 f205 	smulbb	r2, r2, r5
 8006a5e:	b292      	uxth	r2, r2
        if ( hAngleDiff >= 0 )
 8006a60:	db0e      	blt.n	8006a80 <VSS_CalcElAngle+0x88>
          pHandle->bTransitionLocked = true;
 8006a62:	2001      	movs	r0, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8006a64:	1a8a      	subs	r2, r1, r2
          pHandle->bTransitionLocked = true;
 8006a66:	f883 0032 	strb.w	r0, [r3, #50]	; 0x32
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8006a6a:	b210      	sxth	r0, r2
  pHandle->_Super.hElAngle = hRetAngle;
 8006a6c:	8098      	strh	r0, [r3, #4]
}
 8006a6e:	bd30      	pop	{r4, r5, pc}
        hRetAngle = *( int16_t * )pInputVars_str;
 8006a70:	f9b1 0000 	ldrsh.w	r0, [r1]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 8006a74:	701a      	strb	r2, [r3, #0]
        pHandle->bTransitionEnded = true;
 8006a76:	2401      	movs	r4, #1
 8006a78:	f883 402d 	strb.w	r4, [r3, #45]	; 0x2d
  pHandle->_Super.hElAngle = hRetAngle;
 8006a7c:	8098      	strh	r0, [r3, #4]
}
 8006a7e:	bd30      	pop	{r4, r5, pc}
          if ( pHandle->bTransitionLocked == false )
 8006a80:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
 8006a84:	2c00      	cmp	r4, #0
 8006a86:	d0f1      	beq.n	8006a6c <VSS_CalcElAngle+0x74>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 8006a88:	440a      	add	r2, r1
 8006a8a:	b210      	sxth	r0, r2
 8006a8c:	e7ee      	b.n	8006a6c <VSS_CalcElAngle+0x74>
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 8006a8e:	ebae 0e01 	sub.w	lr, lr, r1
 8006a92:	fa0f fe8e 	sxth.w	lr, lr
 8006a96:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8006a9a:	e7d6      	b.n	8006a4a <VSS_CalcElAngle+0x52>

08006a9c <VSS_CalcAvrgMecSpeedUnit>:
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 8006a9c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d925      	bls.n	8006aee <VSS_CalcAvrgMecSpeedUnit+0x52>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8006aa2:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 8006aa6:	441a      	add	r2, r3
 8006aa8:	6242      	str	r2, [r0, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8006aaa:	2a00      	cmp	r2, #0
 8006aac:	bfb8      	it	lt
 8006aae:	f502 427f 	addlt.w	r2, r2, #65280	; 0xff00

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8006ab2:	8b43      	ldrh	r3, [r0, #26]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8006ab4:	f890 c001 	ldrb.w	ip, [r0, #1]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8006ab8:	bfb8      	it	lt
 8006aba:	32ff      	addlt	r2, #255	; 0xff
 8006abc:	1412      	asrs	r2, r2, #16
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8006abe:	fb02 f303 	mul.w	r3, r2, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8006ac2:	81c2      	strh	r2, [r0, #14]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8006ac4:	69c2      	ldr	r2, [r0, #28]
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8006ac6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8006aca:	fb02 f20c 	mul.w	r2, r2, ip
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	fb93 f3f2 	sdiv	r3, r3, r2
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8006ad4:	b21b      	sxth	r3, r3
 8006ad6:	800b      	strh	r3, [r1, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;

    pHandle->hRemainingStep--;
 8006ad8:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8006ada:	8183      	strh	r3, [r0, #12]
    pHandle->hRemainingStep--;
 8006adc:	1e53      	subs	r3, r2, #1
 8006ade:	8503      	strh	r3, [r0, #40]	; 0x28
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 8006ae0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8006ae4:	b95b      	cbnz	r3, 8006afe <VSS_CalcAvrgMecSpeedUnit+0x62>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8006ae6:	78c2      	ldrb	r2, [r0, #3]
 8006ae8:	7002      	strb	r2, [r0, #0]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
  }

  return ( SpeedSensorReliability );
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	4770      	bx	lr
  else if ( pHandle->hRemainingStep == 1u )
 8006aee:	d008      	beq.n	8006b02 <VSS_CalcAvrgMecSpeedUnit+0x66>
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8006af0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8006af4:	800b      	strh	r3, [r1, #0]
  if ( pHandle->bTransitionEnded == false )
 8006af6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0f3      	beq.n	8006ae6 <VSS_CalcAvrgMecSpeedUnit+0x4a>
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 8006afe:	f7ff b9bd 	b.w	8005e7c <SPD_IsMecSpeedReliable>
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8006b02:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	; 0x2a
 8006b06:	f8a1 c000 	strh.w	ip, [r1]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006b0a:	8b43      	ldrh	r3, [r0, #26]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8006b0c:	69c2      	ldr	r2, [r0, #28]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8006b0e:	f8a0 c00c 	strh.w	ip, [r0, #12]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006b12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006b16:	005b      	lsls	r3, r3, #1
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8006b18:	fb02 f20c 	mul.w	r2, r2, ip
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 8006b1c:	fb92 f2f3 	sdiv	r2, r2, r3
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8006b20:	7843      	ldrb	r3, [r0, #1]
 8006b22:	fb13 f302 	smulbb	r3, r3, r2
    pHandle->hRemainingStep = 0u;
 8006b26:	2200      	movs	r2, #0
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8006b28:	81c3      	strh	r3, [r0, #14]
    pHandle->hRemainingStep = 0u;
 8006b2a:	8502      	strh	r2, [r0, #40]	; 0x28
 8006b2c:	e7d8      	b.n	8006ae0 <VSS_CalcAvrgMecSpeedUnit+0x44>
 8006b2e:	bf00      	nop

08006b30 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8006b30:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 8006b32:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8006b34:	fb91 f3f3 	sdiv	r3, r1, r3
  pHandle->_Super.hElAngle = hMecAngle;
 8006b38:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8006b3a:	80c3      	strh	r3, [r0, #6]
}
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop

08006b40 <VSS_SetMecAcceleration>:
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 8006b40:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006b44:	b993      	cbnz	r3, 8006b6c <VSS_SetMecAcceleration+0x2c>
{
 8006b46:	b510      	push	{r4, lr}
  {
    if ( hDurationms == 0u )
 8006b48:	b98a      	cbnz	r2, 8006b6e <VSS_SetMecAcceleration+0x2e>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006b4a:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8006b4c:	69c4      	ldr	r4, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8006b4e:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006b50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006b54:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8006b56:	fb01 f404 	mul.w	r4, r1, r4
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8006b5a:	fb94 f4f3 	sdiv	r4, r4, r3

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8006b5e:	7843      	ldrb	r3, [r0, #1]

      pHandle->hRemainingStep = 0u;
 8006b60:	8502      	strh	r2, [r0, #40]	; 0x28
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8006b62:	fb13 f304 	smulbb	r3, r3, r4
 8006b66:	81c3      	strh	r3, [r0, #14]

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8006b68:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 8006b6a:	bd10      	pop	{r4, pc}
 8006b6c:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8006b6e:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8006b70:	4c12      	ldr	r4, [pc, #72]	; (8006bbc <VSS_SetMecAcceleration+0x7c>)
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 8006b72:	f890 e001 	ldrb.w	lr, [r0, #1]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8006b76:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8006b78:	fb03 f202 	mul.w	r2, r3, r2
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006b7c:	8b43      	ldrh	r3, [r0, #26]
 8006b7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8006b82:	fba4 4202 	umull	r4, r2, r4, r2
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006b86:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8006b8a:	69c3      	ldr	r3, [r0, #28]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8006b8c:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8006b90:	f3c2 128f 	ubfx	r2, r2, #6, #16
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8006b94:	fb01 f303 	mul.w	r3, r1, r3
      hNbrStep++;
 8006b98:	3201      	adds	r2, #1
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8006b9a:	fb94 f1fe 	sdiv	r1, r4, lr
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8006b9e:	fb93 f3fc 	sdiv	r3, r3, ip
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8006ba2:	1a5b      	subs	r3, r3, r1
      hNbrStep++;
 8006ba4:	b292      	uxth	r2, r2
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8006ba6:	041b      	lsls	r3, r3, #16
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8006ba8:	0424      	lsls	r4, r4, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8006baa:	fb93 f3f2 	sdiv	r3, r3, r2
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8006bae:	fb0e f303 	mul.w	r3, lr, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8006bb2:	e9c0 3408 	strd	r3, r4, [r0, #32]
      pHandle->hRemainingStep = hNbrStep;
 8006bb6:	8502      	strh	r2, [r0, #40]	; 0x28
}
 8006bb8:	bd10      	pop	{r4, pc}
 8006bba:	bf00      	nop
 8006bbc:	10624dd3 	.word	0x10624dd3

08006bc0 <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 8006bc0:	b151      	cbz	r1, 8006bd8 <VSS_SetStartTransition+0x18>
  {
    pHandle->bTransitionStarted = true;

    if ( pHandle->hTransitionSteps == 0 )
 8006bc2:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
    pHandle->bTransitionStarted = true;
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    if ( pHandle->hTransitionSteps == 0 )
 8006bcc:	b923      	cbnz	r3, 8006bd8 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionEnded = true;
 8006bce:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 8006bd2:	7003      	strb	r3, [r0, #0]
      bAux = false;
 8006bd4:	4618      	mov	r0, r3
    }
  }
  return bAux;
}
 8006bd6:	4770      	bx	lr
  bool bAux = true;
 8006bd8:	2001      	movs	r0, #1
 8006bda:	4770      	bx	lr

08006bdc <VSS_TransitionEnded>:
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
}
 8006bdc:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop

08006be4 <memset>:
 8006be4:	4402      	add	r2, r0
 8006be6:	4603      	mov	r3, r0
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d100      	bne.n	8006bee <memset+0xa>
 8006bec:	4770      	bx	lr
 8006bee:	f803 1b01 	strb.w	r1, [r3], #1
 8006bf2:	e7f9      	b.n	8006be8 <memset+0x4>

08006bf4 <__libc_init_array>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	4d0d      	ldr	r5, [pc, #52]	; (8006c2c <__libc_init_array+0x38>)
 8006bf8:	4c0d      	ldr	r4, [pc, #52]	; (8006c30 <__libc_init_array+0x3c>)
 8006bfa:	1b64      	subs	r4, r4, r5
 8006bfc:	10a4      	asrs	r4, r4, #2
 8006bfe:	2600      	movs	r6, #0
 8006c00:	42a6      	cmp	r6, r4
 8006c02:	d109      	bne.n	8006c18 <__libc_init_array+0x24>
 8006c04:	4d0b      	ldr	r5, [pc, #44]	; (8006c34 <__libc_init_array+0x40>)
 8006c06:	4c0c      	ldr	r4, [pc, #48]	; (8006c38 <__libc_init_array+0x44>)
 8006c08:	f000 f818 	bl	8006c3c <_init>
 8006c0c:	1b64      	subs	r4, r4, r5
 8006c0e:	10a4      	asrs	r4, r4, #2
 8006c10:	2600      	movs	r6, #0
 8006c12:	42a6      	cmp	r6, r4
 8006c14:	d105      	bne.n	8006c22 <__libc_init_array+0x2e>
 8006c16:	bd70      	pop	{r4, r5, r6, pc}
 8006c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c1c:	4798      	blx	r3
 8006c1e:	3601      	adds	r6, #1
 8006c20:	e7ee      	b.n	8006c00 <__libc_init_array+0xc>
 8006c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c26:	4798      	blx	r3
 8006c28:	3601      	adds	r6, #1
 8006c2a:	e7f2      	b.n	8006c12 <__libc_init_array+0x1e>
 8006c2c:	08006f30 	.word	0x08006f30
 8006c30:	08006f30 	.word	0x08006f30
 8006c34:	08006f30 	.word	0x08006f30
 8006c38:	08006f34 	.word	0x08006f34

08006c3c <_init>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	bf00      	nop
 8006c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c42:	bc08      	pop	{r3}
 8006c44:	469e      	mov	lr, r3
 8006c46:	4770      	bx	lr

08006c48 <_fini>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	bf00      	nop
 8006c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4e:	bc08      	pop	{r3}
 8006c50:	469e      	mov	lr, r3
 8006c52:	4770      	bx	lr
